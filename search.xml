<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[网址（自用）]]></title>
      <url>/2017/06/23/2017-06-23-%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>描述：这里是记录了一些我认为比较好的一些文章网址！</p>
<p><a href="http://blog.csdn.net/kebi007/article/details/54882425" target="_blank" rel="external">2017年前端面试题整理汇总100题</a><br><a href="https://zhuanlan.zhihu.com/p/25424194" target="_blank" rel="external">2017年第一波JavaScript前端面试题</a><br><a href="http://www.html5wd.com/archives/2567.html" target="_blank" rel="external">2017最新前端面试题</a><br><a href="https://juejin.im/collection/58b51f146a22657a386988f3" target="_blank" rel="external">2017 前端面试准备-掘金</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网址 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript闭包]]></title>
      <url>/2017/06/21/2017-06-21-Javascript%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>当function里嵌套function时，内部的function可以访问外部function里的变量。、</p>
<pre><code>function foo(x) {
    var tmp = 3;
    function bar(y) {
        alert(x + y + (++tmp));
    }
    bar(10);
}
foo(2)
</code></pre><p>不管执行多少次，都会alert 16，因为bar能访问foo的参数x，也能访问foo的变量tmp。<br>　　但，这还不是闭包。当你return的是内部function时，就是一个闭包。内部function会close-over外部function的变量直到内部function结束。</p>
<pre><code>function foo(x) {
    var tmp = 3;
    return function (y) {
        alert(x + y + (++tmp));
    }
}
var bar = foo(2); // bar 现在是一个闭包
bar(10);
</code></pre><p>上面的脚本最终也会alert 16，因为虽然bar不直接处于foo的内部作用域，但bar还是能访问x和tmp。<br>　　但是，由于tmp仍存在于bar闭包的内部，所以它还是会自加1，而且你每次调用bar时它都会自加1.<br>　　（考虑到六岁这个限制：我们其实可以建立不止一个闭包方法，比如return它们的数组，也可以把它们设置为全局变量。它们全都指向相同的x和相同的tmp，而不是各自有一份副本。）<br>　　注：现在来整点儿七岁的内容。<br>　　上面的x是一个字面值（值传递），和JS里其他的字面值一样，当调用foo时，实参x的值被复制了一份，复制的那一份作为了foo的参数x。<br>　　那么问题来了，JS里处理object时是用到引用传递的，那么，你调用foo时传递一个object，foo函数return的闭包也会引用最初那个object！</p>
<pre><code>function foo(x) {
var tmp = 3;
return function (y) {
    alert(x + y + tmp);
    x.memb = x.memb ? x.memb + 1 : 1;
    alert(x.memb);
    }
}
var age = new Number(2);
var bar = foo(age); // bar 现在是一个引用了age的闭包
bar(10);
</code></pre><p>不出我们意料，每次运行bar(10)，x.memb都会自加1。但需要注意的是x每次都指向同一个object变量——age，运行两次bar(10)后，age.memb会变成2.<br>　　这和HTML对象的内存泄漏有关，呃，不过貌似超出了答题的范围。<br>　　JohnMerlino 对Ali说：<br>　　这里有一个不用return关键字的闭包例子：</p>
<pre><code>function closureExample(objID, text, timedelay) { 
    setTimeout(function() { 
        document.getElementById(objID).innerHTML = text; 
    }, timedelay); 
} 
closureExample(‘myDiv’, ‘Closure is created’, 500);
</code></pre><p>JS里的function能访问它们的：<br>　　1. 参数<br>　　2. 局部变量或函数<br>　　3. 外部变量（环境变量？），包括<br>3.1 全局变量，包括DOM。<br>3.2 外部函数的变量或函数。<br>　　如果一个函数访问了它的外部变量，那么它就是一个闭包。<br>　　注意，外部函数不是必需的。通过访问外部变量，一个闭包可以维持（keep alive）这些变量。在内部函数和外部函数的例子中，外部函数可以创建局部变量，并且最终退出；但是，如果任何一个或多个内部函数在它退出后却没有退出，那么内部函数就维持了外部函数的局部数据。<br>　　一个典型的例子就是全局变量的使用。<br>　　mykhal这样回答：<br>　　Wikipedia对闭包的定义是这样的：<br>In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.<br>　　从技术上来讲，在JS中，每个function都是闭包，因为它总是能访问在它外部定义的数据。<br>　　Since scope-defining construction in Javascript is a function, not a code block like in many other languages, what we usually mean by closure in Javascript is a fuction working with nonlocal variables defined in already executed surrounding function.<br>　　闭包经常用于创建含有隐藏数据的函数（但并不总是这样）。</p>
<pre><code>var db = (function() {
// 创建一个隐藏的object, 这个object持有一些数据
// 从外部是不能访问这个object的
var data = {};
// 创建一个函数, 这个函数提供一些访问data的数据的方法
return function(key, val) {
    if (val === undefined) { return data[key] } // get
    else { return data[key] = val } // set
    }
// 我们可以调用这个匿名方法
// 返回这个内部函数，它是一个闭包
})();

db(&apos;x&apos;); // 返回 undefined
db(&apos;x&apos;, 1); // 设置data[&apos;x&apos;]为1
db(&apos;x&apos;); // 返回 1
</code></pre><p>// 我们不可能访问data这个object本身<br>// 但是我们可以设置它的成员<br>　　看了这么多外国大牛的解答，不知道你懂还是不懂，反正我是懂了。<br>　　P.S. 发布文章之后看到@xiaotie的一篇文章，觉得有必要推荐一下，因为其剖析得更为深入。有人说应该在文章结尾对闭包进行总结，可惜小弟才疏学浅，不能给出一个精辟的总结。<br>　　@xiaotie对闭包的总结如下：<br>（1）闭包是一种设计原则，它通过分析上下文，来简化用户的调用，让用户在不知晓的情况下，达到他的目的；<br>（2）网上主流的对闭包剖析的文章实际上是和闭包原则反向而驰的，如果需要知道闭包细节才能用好的话，这个闭包是设计失败的；<br>（3）尽量少学习。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2015-12-31杭州西湖文化广场灯光SHOW]]></title>
      <url>/2015/12/31/2015-12-30-%E8%A5%BF%E6%B9%96%E6%96%87%E5%8C%96%E5%B9%BF%E5%9C%BA%E7%81%AF%E5%85%89SHOW/</url>
      <content type="html"><![CDATA[<ul>
<li>作者：无双</li>
<li>地点：杭州西湖文化广场</li>
<li>时间：2015-12-31</li>
<li>工具：手机拍摄</li>
</ul>
<embed src="http://player.youku.com/player.php/sid/XMTQzMTQ4NzQ2OA==/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash">


<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 视频 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拍摄 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[教程]]></title>
      <url>/2015/12/28/2015-10-19-%E6%95%99%E7%A8%8B%E7%BD%91%E5%9D%80%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="/img/jiaocheng.jpg" alt=""><br>一些教程网址收录，方便学习、查阅。</p>
<a id="more"></a>
<ul>
<li><a href="http://isux.tencent.com/css3/index.html?matrix" target="_blank" rel="external">css3在线学习：http://isux.tencent.com/css3/index.html?matrix</a></li>
<li><a href="http://selectivizr.com/" target="_blank" rel="external">http://selectivizr.com/</a></li>
<li><a href="http://get-set.cn/front-end-chart/" target="_blank" rel="external">前端资料搜集</a></li>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门-阮一峰：            http://es6.ruanyifeng.com/</a></li>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程                  （alpha）-阮一峰：http://javascript.ruanyifeng.com/</a></li>
<li><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="external">阮一峰的个人网站：                    http://www.ruanyifeng.com/home.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的博客：                        http://www.ruanyifeng.com/blog/</a></li>
<li><a href="http://www.chengweiyang.cn/gitbook/basic-usage/README.html" target="_blank" rel="external">GitBook 简明教程:                    http://www.chengweiyang.cn/gitbook/basic-usage/README.html</a></li>
<li><a href="http://www.cnblogs.com/TomXu/" target="_blank" rel="external">汤姆大叔的博客:                        http://www.cnblogs.com/TomXu/</a></li>
<li><a href="http://www.daqianduan.com/" target="_blank" rel="external">大前端                                http://www.daqianduan.com/</a></li>
<li><a href="http://www.w3cplus.com/" target="_blank" rel="external">W3C                                    http://www.w3cplus.com/</a></li>
<li><a href="http://www.zhangxinxu.com/" target="_blank" rel="external">张鑫旭-鑫空间-鑫生活：                http://www.zhangxinxu.com/</a></li>
<li><a href="http://www.alloyteam.com/mobiledevelop/" target="_blank" rel="external">腾讯全端 AlloyTeam 团队 Blog:        http://www.alloyteam.com/mobiledevelop/</a></li>
<li><a href="http://www.qianduan.net/" target="_blank" rel="external">前段观察：                            http://www.qianduan.net/</a></li>
<li><a href="http://www.cssforest.org/blog/" target="_blank" rel="external">CSS森林：                            http://www.cssforest.org/blog/</a></li>
<li><a href="http://beforweb.com/" target="_blank" rel="external">be for web:                        http://beforweb.com/</a></li>
<li><a href="http://www.shejidaren.com/" target="_blank" rel="external">设计达人：                            http://www.shejidaren.com/</a></li>
<li><a href="http://f2e.im/" target="_blank" rel="external">前端技术社区:                        http://f2e.im/</a></li>
<li><a href="http://blog.fens.me/" target="_blank" rel="external">粉丝日志：                            http://blog.fens.me/</a>                </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[markdown使用相关教程]]></title>
      <url>/2015/12/28/2015-12-28-markdown/</url>
      <content type="html"><![CDATA[<p><img src="http://25.io/mou/img/1.png" alt=""><br>markdown的使用教程<br>工具：</p>
<ul>
<li>marked.js</li>
<li><p>highlight.js</p>
</li>
<li><p><a href="https://segmentfault.com/q/1010000002406964" target="_blank" rel="external">参考链接：https://segmentfault.com/q/1010000002406964</a></p>
</li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">参考链接：https://www.zybuluo.com/mdeditor</a></li>
</ul>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象之属性继承、方法继承]]></title>
      <url>/2015/12/25/2015-12-25-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>使用了对比方法。有函数式写法，然后改成面向对象写法。并且有属性的继承演示、方法继承的演示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">&lt;!-- </div><div class="line">	      拖拽.html</div><div class="line">	      &lt;project&gt;  </div><div class="line">	      Created by my on 2015-11-22.</div><div class="line">	      Copyright 2015 my. All rights reserved.</div><div class="line">	 --&gt;</div><div class="line">	&lt;!DOCTYPE html&gt;</div><div class="line">	&lt;html&gt;</div><div class="line">	</div><div class="line">		&lt;head&gt;</div><div class="line">			&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">			&lt;title&gt;&lt;/title&gt;</div><div class="line">			&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">				#div &#123;width:200px; height:200px; background:yellow; position:absolute;&#125;</div><div class="line">	#div2 &#123;width:200px; height:200px; background:green; position:absolute;&#125;</div><div class="line">			&lt;/style&gt;</div><div class="line">		&lt;/head&gt;</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">		window.onload=function()&#123;</div><div class="line">			new Drag(&apos;div&apos;);</div><div class="line">			new LimitDrag(&apos;div2&apos;);</div><div class="line">		&#125;;</div><div class="line">	&lt;/script&gt;</div><div class="line">		&lt;body&gt;</div><div class="line">			&lt;div id=&quot;div&quot;&gt;&lt;/div&gt;</div><div class="line">			&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</div><div class="line">		&lt;/body&gt;</div><div class="line">		&lt;script src=&quot;js/drag.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">		&lt;script src=&quot;js/limitDrag.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class="line">	</div><div class="line">	&lt;/html&gt;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">	/*</div><div class="line">	 *	作者：无双</div><div class="line">	 * 	时间：2015年11月22日</div><div class="line">	 * 	描述：拖拽</div><div class="line">	 */</div><div class="line">	function Drag(id)</div><div class="line">	&#123;</div><div class="line">		var _this=this;</div><div class="line">		this.disX=0;</div><div class="line">		this.disY=0;</div><div class="line">		</div><div class="line">		this.oDiv=document.getElementById(id);</div><div class="line">		this.oDiv.onmousedown=function (ev)</div><div class="line">		&#123;</div><div class="line">			_this.fnDown(ev);</div><div class="line">			</div><div class="line">			return false;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">	Drag.prototype.fnDown=function (ev)</div><div class="line">	&#123;</div><div class="line">		var _this=this;</div><div class="line">		var oEvent=ev||event;</div><div class="line">		</div><div class="line">		this.disX=oEvent.clientX-this.oDiv.offsetLeft;</div><div class="line">		this.disY=oEvent.clientY-this.oDiv.offsetTop;</div><div class="line">		</div><div class="line">		document.onmousemove=function (ev)</div><div class="line">		&#123;</div><div class="line">			_this.fnMove(ev);</div><div class="line">		&#125;;</div><div class="line">		document.onmouseup=function ()</div><div class="line">		&#123;</div><div class="line">			_this.fnUp();</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	Drag.prototype.fnMove=function (ev)</div><div class="line">	&#123;</div><div class="line">		var oEvent=ev||event;</div><div class="line">		</div><div class="line">		this.oDiv.style.left=oEvent.clientX-this.disX+&apos;px&apos;;</div><div class="line">		this.oDiv.style.top=oEvent.clientY-this.disY+&apos;px&apos;;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	Drag.prototype.fnUp=function ()</div><div class="line">	&#123;</div><div class="line">		document.onmousemove=null;</div><div class="line">		document.onmouseup=null;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">	/*</div><div class="line">	 *	作者：无双</div><div class="line">	 * 	时间：2015年11月22日</div><div class="line">	 * 	描述：限制范围拖拽</div><div class="line">	 */</div><div class="line">	function LimitDrag(id)</div><div class="line">	&#123;</div><div class="line">		Drag.call(this, id);	//继承属性</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	for(var i in Drag.prototype)</div><div class="line">	&#123;</div><div class="line">		LimitDrag.prototype[i]=Drag.prototype[i];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	LimitDrag.prototype.fnMove=function (ev)</div><div class="line">	&#123;</div><div class="line">		var oEvent=ev||event;</div><div class="line">		var l=oEvent.clientX-this.disX;</div><div class="line">		var t=oEvent.clientY-this.disY;</div><div class="line">		</div><div class="line">		if(l&lt;0)</div><div class="line">		&#123;</div><div class="line">			l=0;</div><div class="line">		&#125;</div><div class="line">		else if(l&gt;document.documentElement.clientWidth-this.oDiv.offsetWidth)</div><div class="line">		&#123;</div><div class="line">			l=document.documentElement.clientWidth-this.oDiv.offsetWidth;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		this.oDiv.style.left=l+&apos;px&apos;;</div><div class="line">		this.oDiv.style.top=t+&apos;px&apos;;</div><div class="line">	&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[集财项目开发记录]]></title>
      <url>/2015/12/22/2015-10-19-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<ol>
<li>nodejs项目在使用handlebars时，改文件后缀的设置(主要是html文件)。<br><br>1-1： 首先将views下面的html文件后缀改成’文件名.html’。（有的文件名是’xx.hbs，有的则不一定。。’）<br><br>1-2：在app处增加如下代码：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;view engine&apos;, &apos;html&apos;);</div><div class="line"></div><div class="line">app.engine(&apos;html&apos;, require(&apos;hbs&apos;).__express);</div></pre></td></tr></table></figure>
<ol>
<li>判断微信以及IOS和安卓系统。</li>
</ol>
<a id="more"></a>
<h1 id="node项目开发目前大致如下："><a href="#node项目开发目前大致如下：" class="headerlink" title="node项目开发目前大致如下："></a>node项目开发目前大致如下：</h1><ul>
<li>node原生（使用c编写的http服务器）</li>
<li>node 框架，（如express，使node开发更简单便捷。）</li>
<li>mvc框架（如 EJS、juice、handlebars、jade等，也就是页面模板）</li>
<li>第三方插件（如jQuery、方便处理数据请求、元素选择、处理动画等）</li>
<li>在手机端使用viewport 就能使得页面自动缩放，适合移动端观看，少用固定宽高，再配合一些媒寻（@media）、百分比布局、rem（相对跟元素【html】的单位）、css3独有布局（盒子模型）、分栏布局等。</li>
</ul>
<h1 id="业务逻辑大致如下："><a href="#业务逻辑大致如下：" class="headerlink" title="业务逻辑大致如下："></a>业务逻辑大致如下：</h1><ul>
<li>controller部分（本质上就是路由部分）负责页面渲染，在内部使用node自带的数据请求，直接渲染到页面（使用res.render(页面目录,{数据：你要传到页面的数据})）。其他部分使用jq的ajax来处理数据。</li>
<li>想要全局得到数据，则用 window.数据= 你定义的数据。这样就能在全局获取 var 数据=window.数据，在node部分，使用req.session.自定义变量=自定义变量，要取时直接 var 变量= req.session.自定义变量。</li>
<li>页面之间，除了使用以上部分说的，还可以使用res.locals.自定义变量=自定义数据的方式来存或取。</li>
</ul>
<ol>
<li>nodejs项目在使用handlebars时，改文件后缀的设置(主要是html文件)。<br><br>1-1： 首先将views下面的html文件后缀改成’文件名.html’。（有的文件名是’xx.hbs，有的则不一定。。’）<br><br>1-2：在app处增加如下代码：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;view engine&apos;, &apos;html&apos;);</div><div class="line"></div><div class="line">app.engine(&apos;html&apos;, require(&apos;hbs&apos;).__express);</div></pre></td></tr></table></figure>
<ol>
<li>判断微信以及IOS和安卓系统。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">define(function(require, exports, module) &#123;</div><div class="line">	require(&apos;jquery&apos;);</div><div class="line"></div><div class="line">	function isWx() &#123; //判断微信系统</div><div class="line">		var browser = &#123;</div><div class="line">			versions: function() &#123;</div><div class="line">				var u = navigator.userAgent,</div><div class="line">					app = navigator.appVersion;</div><div class="line">				return &#123; //移动终端浏览器版本信息</div><div class="line">					trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核</div><div class="line">					presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核</div><div class="line">					webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核</div><div class="line">					gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核</div><div class="line">					mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端</div><div class="line">					ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</div><div class="line">					android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或uc浏览器</div><div class="line">					//              iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 , //是否为iPhone或者QQHD浏览器</div><div class="line">					//              iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad</div><div class="line">					//              webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部</div><div class="line">				&#125;;</div><div class="line">			&#125;(),</div><div class="line">			language: (navigator.browserLanguage || navigator.language).toLowerCase()</div><div class="line">		&#125;</div><div class="line">		var ua = window.navigator.userAgent.toLowerCase();</div><div class="line">		if (ua.match(/MicroMessenger/i) == &apos;micromessenger&apos;) &#123; //是微信，跳转到应用宝</div><div class="line">			$(&quot;.down-app&quot;).attr(&quot;href&quot;, &quot;http://a.app.qq.com/o/simple.jsp?pkgname=com.jc.jicai_android&quot;);</div><div class="line">		&#125; else &#123;</div><div class="line">			if (browser.versions.ios == true) &#123; //ios跳转到。。。</div><div class="line">				$(&quot;.down-app&quot;).attr(&quot;href&quot;, &quot;https://itunes.apple.com/cn/app/ji-cai/id1024955696&quot;);</div><div class="line">			&#125; else if (browser.versions.android == true) &#123; //安卓跳转地址。。</div><div class="line">				$(&quot;.down-app&quot;).attr(&quot;href&quot;, &quot;/downloadAndroid&quot;);</div><div class="line">			&#125; else &#123;</div><div class="line">				//其他系统。。</div><div class="line">				$(&quot;.down-app&quot;).attr(&quot;href&quot;, &quot;/product/list&quot;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	isWx();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="如何求一个数组之和。"><a href="#如何求一个数组之和。" class="headerlink" title="如何求一个数组之和。"></a>如何求一个数组之和。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(document).ready(function() &#123;</div><div class="line">	var arr = [1, 2, 3, 1, 2, 3, 34, 15,1,23,123,151,15125,151233,1516,152,231512,15];</div><div class="line">	var x = null;</div><div class="line">	for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">		x += arr[i];</div><div class="line">		console.log(x);</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="集财注册js代码（自用）"><a href="#集财注册js代码（自用）" class="headerlink" title="集财注册js代码（自用）"></a>集财注册js代码（自用）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports, module) &#123;</div><div class="line">	require(&apos;jquery&apos;);</div><div class="line"></div><div class="line">	function CreatedComReg() &#123;</div><div class="line">		require(&apos;/js/jquery_md5&apos;);</div><div class="line">		this.oText = $(&apos;#loadingText&apos;).val();</div><div class="line">		this.loadingHtml = &apos;\</div><div class="line">							&lt;div id=&quot;parent&quot;&gt;\</div><div class="line">								&lt;div id=&quot;loading&quot;&gt;\</div><div class="line">									&lt;div id=&quot;circleG&quot;&gt;\</div><div class="line">										&lt;div id=&quot;circleG_1&quot; class=&quot;circleG&quot;&gt;\</div><div class="line">										&lt;/div&gt;\</div><div class="line">									&lt;div id=&quot;circleG_2&quot; class=&quot;circleG&quot;&gt;\</div><div class="line">									&lt;/div&gt;\</div><div class="line">								&lt;div id=&quot;circleG_3&quot; class=&quot;circleG&quot;&gt;\</div><div class="line">							&lt;/div&gt;\</div><div class="line">							&lt;div id=&quot;loadingText&quot;&gt;\</div><div class="line">							&lt;p&gt;&apos; + this.oText + &apos;&lt;/p&gt;\</div><div class="line">							&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\</div><div class="line">							&apos;;</div><div class="line">		this.telReg = /1[3|5|7|8|][0-9]&#123;9&#125;/; //手机号码正则</div><div class="line">		this.mmsgSpeed = 3000; //提示信息显示时间</div><div class="line">		this.oTimer_mmsg = null;</div><div class="line">		this.tel = $(&apos;#telephone&apos;).val(); //电话号码</div><div class="line">		this.code = $(&apos;#validateCode&apos;).val(); //验证码</div><div class="line">		this.psd = $(&apos;#passwd&apos;).val(); //密码</div><div class="line">		this.sendCodeBtn = $(&apos;#oSendCodeBtn&apos;);</div><div class="line">		this.img = $(&apos;#oRandomImg&apos;);</div><div class="line">		this.confirmBtn = $(&apos;#btn_Confirm&apos;);</div><div class="line">		var This = this;</div><div class="line"></div><div class="line">		this.sendStyleCtr();</div><div class="line">		this.btn_ConfirmCtr();</div><div class="line">		This.getImgFn(); //进来图片就加载</div><div class="line"></div><div class="line">		this.sendCodeBtn.click(function() &#123; //发送验证码</div><div class="line">			This.sendCodeBtnFn();</div><div class="line">		&#125;);</div><div class="line">		this.confirmBtn.click(function() &#123; //发送验证码</div><div class="line">			This.confirmBtnFn();</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">		this.img.click(function() &#123;</div><div class="line">			This.imgClick();</div><div class="line">		&#125;);</div><div class="line">		//					$(document.body).before(this.loadingHtml);</div><div class="line">	&#125;;</div><div class="line">	CreatedComReg.prototype.sendCodeBtnFn = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		this.tel = $(&apos;#telephone&apos;).val(); //电话号码</div><div class="line">		if (this.tel.length &lt; 1) &#123;</div><div class="line">			This.mmsg(&apos;请输入正确的手机号码&apos;);</div><div class="line">		&#125; else if (!This.telReg.test(This.tel)) &#123;</div><div class="line">			This.mmsg(&apos;手机号码格式错误&apos;);</div><div class="line">		&#125; else &#123;</div><div class="line">			var oImgCode = $(&apos;#imgCode&apos;).val();</div><div class="line">			if (!oImgCode || oImgCode.length &lt; 1) &#123;</div><div class="line">				This.mmsg(&apos;图片验证码错误，点击刷新&apos;);</div><div class="line">			&#125; else if (oImgCode &amp;&amp; oImgCode.length &lt; 4) &#123;</div><div class="line">				This.mmsg(&apos;图片验证码错误，点击刷新&apos;);</div><div class="line">			&#125; else &#123;</div><div class="line">				This.verifyFn();</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">	CreatedComReg.prototype.confirmBtnFn = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		this.tel = $(&apos;#telephone&apos;).val(); //电话号码</div><div class="line">		if (This.tel.length &lt; 1) &#123;</div><div class="line">			This.mmsg(&apos;请输入正确的手机号码&apos;);</div><div class="line">		&#125; else if (!This.telReg.test(This.tel)) &#123;</div><div class="line">			This.mmsg(&apos;手机号码格式错误&apos;);</div><div class="line">		&#125; else &#123;</div><div class="line">			var oImgCode = $(&apos;#imgCode&apos;).val();</div><div class="line">			if (!oImgCode || oImgCode.length &lt; 1) &#123;</div><div class="line">				This.mmsg(&apos;请输入图片中的验证码&apos;);</div><div class="line">			&#125; else if (oImgCode &amp;&amp; oImgCode.length &lt; 4) &#123;</div><div class="line">				This.mmsg(&apos;请输入正确的图片验证码&apos;);</div><div class="line">			&#125; else &#123;</div><div class="line">				//					sendCodeFn();</div><div class="line">				var oCode = $(&apos;#validateCode&apos;).val();</div><div class="line">				var oPsd = $(&apos;#passwd&apos;).val();</div><div class="line">				if (!oCode || oCode.length &lt; 1) &#123;</div><div class="line">					This.mmsg(&apos;请输入正确的短信验证码&apos;);</div><div class="line">				&#125; else if (oCode &amp;&amp; oCode.length &lt; 6) &#123;</div><div class="line">					This.mmsg(&apos;请输入正确的短信验证码&apos;);</div><div class="line">				&#125; else if (!oPsd || oPsd.length &lt; 1) &#123;</div><div class="line">					This.mmsg(&apos;请输入6~16位密码&apos;);</div><div class="line">				&#125; else if (oPsd &amp;&amp; oPsd &lt; 6) &#123;</div><div class="line">					This.mmsg(&apos;请输入6~16位密码&apos;);</div><div class="line">				&#125; else &#123;</div><div class="line">					This.codeVerify();</div><div class="line">				&#125;;</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">	//短信验证码校验</div><div class="line">	CreatedComReg.prototype.codeVerify = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		var tel = $(&apos;#telephone&apos;).val(); //电话号码</div><div class="line">		var code = $(&apos;#validateCode&apos;).val(); //验证码</div><div class="line">		$.ajax(&#123;</div><div class="line">			type: &quot;post&quot;,</div><div class="line">			url: API_HOST + &quot;/api/msg/code/verify&quot;,</div><div class="line">			dataType: &apos;jsonp&apos;,</div><div class="line">			data: &#123;</div><div class="line">				telephone: tel,</div><div class="line">				code: code</div><div class="line">			&#125;,</div><div class="line">			success: function(v) &#123;</div><div class="line">				if (v.err_code == &apos;0&apos;) &#123;</div><div class="line">					$(&apos;form&apos;).attr(&apos;action&apos;, &apos;/register&apos;);</div><div class="line">					$(&apos;form&apos;).submit();</div><div class="line">					$(document.body).before(This.loadingHtml);</div><div class="line">				&#125; else &#123;</div><div class="line">					This.mmsg(v.err_msg);</div><div class="line">				&#125;;</div><div class="line">			&#125;,</div><div class="line">			async: true</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	//发送验证码倒计时</div><div class="line">	CreatedComReg.prototype.sendCodeTime = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		this.oSendCodeTimer = null;</div><div class="line">		this.oSendCodeNum = 60;</div><div class="line">		var oTime = 60;</div><div class="line">		clearInterval(this.oSendCodeTimer);</div><div class="line">		this.oSendCodeTimer = setInterval(function() &#123;</div><div class="line">			if (This.oSendCodeNum &lt;= 0) &#123;</div><div class="line">				This.oSendCodeNum = oTime;</div><div class="line">				This.sendStyleCtr2();</div><div class="line">				$(&apos;#oSendCodeBtn&apos;).text(&apos;获取验证码&apos;);</div><div class="line">				$(&apos;#oSendCodeBtn&apos;).attr(&apos;disabled&apos;, false);</div><div class="line">				clearInterval(This.oSendCodeTimer);</div><div class="line">			&#125; else &#123;</div><div class="line">				This.oSendCodeNum--;</div><div class="line">				$(&apos;form&apos;).off();</div><div class="line">				$(&apos;#oSendCodeBtn&apos;).attr(&apos;disabled&apos;, true);</div><div class="line">				$(&apos;#oSendCodeBtn&apos;).css(&apos;background&apos;, &apos;rgb( 165, 165, 165)&apos;);</div><div class="line">				$(&apos;#oSendCodeBtn&apos;).text(This.oSendCodeNum + &quot;s&quot;);</div><div class="line">			&#125;;</div><div class="line">		&#125;, 1000);</div><div class="line">	&#125;;</div><div class="line">	//发送验证码按钮状态控制</div><div class="line">	CreatedComReg.prototype.sendStyleCtr = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		$(&apos;form&apos;).on(&apos;input propertychange&apos;, function() &#123;</div><div class="line">			This.sendStyleCtr2();</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	//发送验证码按钮状态控制方法</div><div class="line">	CreatedComReg.prototype.sendStyleCtr2 = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		var tel = $(&apos;#telephone&apos;).val();</div><div class="line">		this.telReg = /1[3|5|7|8|][0-9]&#123;9&#125;/; //手机号码正则</div><div class="line">		if (this.telReg.test(tel)) &#123;</div><div class="line">			var oImgCode = $(&apos;#imgCode&apos;).val();</div><div class="line">			if (!oImgCode || $(&apos;#imgCode&apos;).val().length &lt; 4) &#123;</div><div class="line">				$(&apos;#oSendCodeBtn&apos;).css(&apos;background&apos;, &apos;rgb( 165, 165, 165)&apos;);</div><div class="line">			&#125; else &#123;</div><div class="line">				$(&apos;#oSendCodeBtn&apos;).css(&apos;background&apos;, &apos;rgb( 165, 165, 165)&apos;);</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	//确认按钮样式控制</div><div class="line">	CreatedComReg.prototype.btn_ConfirmCtr = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		$(&apos;form&apos;).on(&apos;input propertychange&apos;, function() &#123;</div><div class="line">			This.btn_ConfirmCtr2();</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line">	//确认按钮样式控制 方法</div><div class="line">	CreatedComReg.prototype.btn_ConfirmCtr2 = function() &#123;</div><div class="line">		this.telReg = /1[3|5|7|8|][0-9]&#123;9&#125;/; //手机号码正则</div><div class="line">		this.tel = $(&apos;#telephone&apos;).val(); //电话号码</div><div class="line">		this.code = $(&apos;#validateCode&apos;).val(); //验证码</div><div class="line">		this.psd = $(&apos;#passwd&apos;).val(); //密码</div><div class="line">		this.imgCode = $(&apos;#imgCode&apos;).val();</div><div class="line">		if (this.telReg.test(this.tel) &amp;&amp; this.code.length &gt; 5 &amp;&amp; this.psd.length &gt; 5 &amp;&amp; this.imgCode.length &gt; 3) &#123;</div><div class="line">			$(&apos;#btn_Confirm&apos;).css(&apos;background-color&apos;, &apos;rgb( 255, 172, 42)&apos;)</div><div class="line">		&#125; else &#123;</div><div class="line">			$(&apos;#btn_Confirm&apos;).css(&apos;background-color&apos;, &apos;rgb( 255, 172, 42)&apos;)</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	//发送验证码方法</div><div class="line">	CreatedComReg.prototype.sendCodeFn = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		var tel = $(&apos;#telephone&apos;).val() //电话号码</div><div class="line">		var code = $(&apos;#validateCode&apos;).val(); //验证码</div><div class="line">		var psd = $(&apos;#passwd&apos;).val(); //密码</div><div class="line">		var oImgCode = $(&apos;#imgCode&apos;).val();</div><div class="line">		$.ajax(&#123;</div><div class="line">			type: &quot;post&quot;,</div><div class="line">			url: API_HOST + &quot;/api/msg/generateCode&quot;,</div><div class="line">			dataType: &apos;jsonp&apos;,</div><div class="line">			data: &#123;</div><div class="line">				telephone: tel,</div><div class="line">				key: this.key,</div><div class="line">				imgCode: oImgCode</div><div class="line">			&#125;,</div><div class="line">			success: function(v) &#123;</div><div class="line">				if (v.err_code == &apos;0&apos;) &#123;</div><div class="line">					This.mmsg(&apos;验证码已发送&apos;);</div><div class="line">					This.sendCodeTime();</div><div class="line">				&#125; else if (v.err_code != &apos;0&apos;) &#123;</div><div class="line">					This.mmsg(v.err_msg);</div><div class="line">				&#125;;</div><div class="line">			&#125;,</div><div class="line">			async: true</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line">	CreatedComReg.prototype.verifyFn = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		var tel = $(&apos;#telephone&apos;).val(); //电话号码</div><div class="line">		$.ajax(&#123;</div><div class="line">			type: &quot;post&quot;,</div><div class="line">			url: API_HOST + &quot;/api/validateTelephone&quot;,</div><div class="line">			dataType: &apos;jsonp&apos;,</div><div class="line">			data: &#123;</div><div class="line">				telephone: tel</div><div class="line">			&#125;,</div><div class="line">			success: function(v) &#123;</div><div class="line">				if (v.err_code == &apos;0&apos;) &#123;</div><div class="line">					if (v.data.isExist == true) &#123;</div><div class="line">						This.mmsg(&apos;该手机号码已经注册&apos;);</div><div class="line">					&#125; else &#123;</div><div class="line">						This.sendCodeFn();</div><div class="line">					&#125;;</div><div class="line">				&#125; else &#123;</div><div class="line">					This.mmsg(v.err_msg);</div><div class="line">				&#125;</div><div class="line">			&#125;,</div><div class="line">			async: true</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	CreatedComReg.prototype.mmsg = function(mmsg) &#123; //提示信息方法</div><div class="line">		var This = this;</div><div class="line">		clearTimeout(This.oTimer_mmsg);</div><div class="line">		$(&apos;#mmsg&apos;).val(&quot; &quot;);</div><div class="line">		$(&apos;#mmsg&apos;).slideDown(&apos;slow&apos;, function() &#123;</div><div class="line">			oTimer_mmsg = setTimeout(function() &#123;</div><div class="line">				$(&apos;#mmsg&apos;).slideToggle(&apos;slow&apos;);</div><div class="line">			&#125;, This.mmsgSpeed)</div><div class="line">			$(&apos;#mmsg&apos;).val(mmsg);</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line">	CreatedComReg.prototype.getImgFn = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		this.date = new Date(); //时间</div><div class="line">		this.tiemTmp = this.date.getTime(); //时间戳</div><div class="line">		this.random = (Math.random() * 100).toString(); //随机数</div><div class="line">		this.key = $.md5(this.tiemTmp.toString() + this.random);</div><div class="line">		//		console.log(this.key)</div><div class="line"></div><div class="line">		This.img.attr(&apos;src&apos;, API_HOST + &apos;/api/captcha/getImage&apos; + &apos;?key=&apos; + this.key);</div><div class="line">	&#125;;</div><div class="line">	CreatedComReg.prototype.imgClick = function() &#123;</div><div class="line">		var This = this;</div><div class="line">		This.getImgFn();</div><div class="line">	&#125;;</div><div class="line">	new CreatedComReg();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongoose]]></title>
      <url>/2015/12/22/2015-12-22-mongoose/</url>
      <content type="html"><![CDATA[<p><img src="https://scotch.io/wp-content/uploads/2014/11/mongoosejs-node-mongodb-applications.png" alt=""><br>从听说node，到使用node，再到到node进阶中，遇到了许多坑，也收获了许多喜悦。<br>此处是mongoose的学习、实践记录。</p>
<ul>
<li><a href="http://mongoosejs.com/docs/index.html" target="_blank" rel="external">官网api链接：http://mongoosejs.com/docs/index.html</a></li>
<li><a href="https://cnodejs.org/topic/504b4924e2b84515770103dd" target="_blank" rel="external">参考链接1：https://cnodejs.org/topic/504b4924e2b84515770103dd</a></li>
<li><a href="http://www.html-js.com/article/Mongoose-based-mongoose-entry-a" target="_blank" rel="external">参考链接2：http://www.html-js.com/article/Mongoose-based-mongoose-entry-a</a></li>
</ul>
<p>内容有空再添加….尚在完善中。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongoose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nodeJS之socket.io]]></title>
      <url>/2015/12/22/2015-12-22-nodeJS%E4%B9%8Bsocket.io/</url>
      <content type="html"><![CDATA[<p><img src="http://atinux.developpez.com/tutoriels/javascript/utiliser-socket-io/images/socket-io.jpg" alt=""><br>socket.io基于node.js并简化了WebSocket API，统一了各种通信API。</p>
<ul>
<li><a href="http://socket.io/" target="_blank" rel="external">API文档参考：http://socket.io/</a></li>
<li><a href="http://www.cnblogs.com/dxy1982/archive/2012/01/30/2328020.html" target="_blank" rel="external">参考链接1：http://www.cnblogs.com/dxy1982/archive/2012/01/30/2328020.html</a></li>
<li><a href="http://www.cnblogs.com/flyoung2008/archive/2012/07/19/2600132.html" target="_blank" rel="external">参考链接2：http://www.cnblogs.com/flyoung2008/archive/2012/07/19/2600132.html</a></li>
<li>….</li>
</ul>
<p>尚在完善中…..</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> socket.io </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp、grunt与seajs的使用总结]]></title>
      <url>/2015/12/22/2015-12-22-gulp%E3%80%81grunt%E4%B8%8Eseajs%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="http://i.stack.imgur.com/eaepe.png" alt=""><br>前言：在构建中，使用seajs、gulp等混合使用时，会出现的便利和坑，记录于此！</p>
<ul>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文网：http://www.gulpjs.com.cn/</a></li>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">gulp官网：http://gulpjs.com/</a></li>
<li><a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt中文网：http://www.gruntjs.net/</a></li>
<li><a href="http://gruntjs.com/" target="_blank" rel="external">grunt官网：http://gruntjs.com/</a></li>
<li><a href="http://seajs.org/" target="_blank" rel="external">seajs官网：http://seajs.org/</a></li>
<li><a href="https://github.com/seajs/seajs" target="_blank" rel="external">seajs在github：https://github.com/seajs/seajs</a></li>
</ul>
<p>尚在完善。。。</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grunt </tag>
            
            <tag> gulp </tag>
            
            <tag> seajs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>/2015/12/20/2015-10-19-git%E4%B9%8B%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="一-设置git的user-name和email："><a href="#一-设置git的user-name和email：" class="headerlink" title="一 .设置git的user name和email："></a>一 .设置git的user name和email：</h3><p><strong>[因为git bash 上是自带了$，所以为了方便复制，我这里就不带$了，直接复制过去，改掉””里面的东西就可以用了]</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;wushuang&quot;</div><div class="line">git config --global user.email &quot;wushuang@jicai.com&quot;</div></pre></td></tr></table></figure>
<h3 id="二-生成密钥"><a href="#二-生成密钥" class="headerlink" title="二 生成密钥 :"></a>二 生成密钥 :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;wushuang@jicai.com&quot;</div></pre></td></tr></table></figure>
<ul>
<li>按3个回车，密码为空。(不要输密码)</li>
<li>然后到.ssh下面将id_rsa.pub里的内容复制出来粘贴到github个人中心的账户设置的ssh key里面        </li>
</ul>
<p><a href="http://git-scm.com/download" target="_blank" rel="external">git for windows下载地址</a></p>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[胡言乱语]]></title>
      <url>/2015/12/20/2015-10-19-%E4%B9%B1%E8%AF%AD/</url>
      <content type="html"><![CDATA[<p>没事发发骚</p>
<p><img src="/img/blts.jpg" alt=""></p>
<p></p><p style="text-align: center;"> 何以飘零去</p><p></p>
<p></p><p style="text-align: center;"> 何以少团栾</p><p></p>
<p></p><p style="text-align: center;"> 何以别离久</p><p></p>
<p></p><p style="text-align: center;"> 何以不得安</p><p></p>
<p></p><p style="text-align: center;"> 指云问天道 </p><p></p>
<p></p><p style="text-align: center;"> 琴鸣血斑斓</p><p></p>
<h2 id="——记《古剑奇谭》-by-wushuang"><a href="#——记《古剑奇谭》-by-wushuang" class="headerlink" title="——记《古剑奇谭》 by wushuang"></a>——记《古剑奇谭》 by wushuang</h2>]]></content>
      
        <categories>
            
            <category> 奇谭 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 乱语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js计算，输入参数即可计算昨天，今天，明天]]></title>
      <url>/2015/12/20/2015-11-20-js%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>js计算，输入参数即可计算昨天，今天，明天</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt; </div><div class="line">&lt;head&gt; </div><div class="line">&lt;meta charset=&quot;UTF-8&quot;/&gt;</div><div class="line">&lt;title&gt;js获取日期：前天、昨天、今天、明天、后天&lt;/title&gt; </div><div class="line">&lt;/head&gt; </div><div class="line"></div><div class="line">&lt;body&gt; </div><div class="line">&lt;script language=&quot;JavaScript&quot; type=&quot;text/javascript&quot;&gt; </div><div class="line">Date.prototype.DateAdd = function(strInterval, Number) </div><div class="line">&#123; </div><div class="line">var dtTmp = this; </div><div class="line">switch (strInterval) &#123; </div><div class="line">case &apos;s&apos; :return new Date(Date.parse(dtTmp) + (1000 * Number)); </div><div class="line">case &apos;n&apos; :return new Date(Date.parse(dtTmp) + (60000 * Number)); </div><div class="line">case &apos;h&apos; :return new Date(Date.parse(dtTmp) + (3600000 * Number)); </div><div class="line">case &apos;d&apos; :return new Date(Date.parse(dtTmp) + (86400000 * Number)); </div><div class="line">case &apos;w&apos; :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number)); </div><div class="line">case &apos;q&apos; :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); </div><div class="line">case &apos;m&apos; :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); </div><div class="line">case &apos;y&apos; :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds()); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line">function GetDateStr2(AddDayCount) </div><div class="line">&#123; </div><div class="line">var dd = new Date(); </div><div class="line">ddd = dd.DateAdd(&apos;d&apos;,AddDayCount);//三天后 </div><div class="line">var y = ddd.getFullYear(); </div><div class="line">var m = ddd.getMonth()+1;//获取当前月 </div><div class="line">var d = ddd.getDate(); </div><div class="line">return y+&quot;-&quot;+m+&quot;-&quot;+d; </div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">document.write(&quot;前天：&quot;+GetDateStr2(-2)); </div><div class="line">document.write(&quot;&lt;br /&gt;昨天：&quot;+GetDateStr2(-1)); </div><div class="line">document.write(&quot;&lt;br /&gt;今天：&quot;+GetDateStr2(0)); </div><div class="line">document.write(&quot;&lt;br /&gt;明天：&quot;+GetDateStr2(1)); </div><div class="line">document.write(&quot;&lt;br /&gt;后天：&quot;+GetDateStr2(2)); </div><div class="line">document.write(&quot;&lt;br /&gt;大后天：&quot;+GetDateStr2(3)); </div><div class="line"></div><div class="line">&lt;/script&gt; </div><div class="line"></div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var str1 = &apos;2010年9月16日&apos;;</div><div class="line">var str2 = &apos;2010-09-10&apos;;</div><div class="line">//用字符串分割, 精确到日</div><div class="line">function Days(day1, day2)&#123;</div><div class="line">    var y1, y2, m1, m2, d1, d2;//year, month, day;</div><div class="line">    y1 = parseInt(day1);</div><div class="line">    y2 = parseInt(day2.split(&apos;-&apos;)[0]);</div><div class="line">    m1 = parseInt(day1.split(&apos;年&apos;)[1].split(&apos;月&apos;)[0]);</div><div class="line">    m2 = parseInt(day2.split(&apos;-&apos;)[1]);</div><div class="line">    d1 = parseInt(day1.split(&apos;年&apos;)[1].split(&apos;月&apos;)[1].split(&apos;日&apos;)[0]);</div><div class="line">    d2 = parseInt(day2.split(&apos;-&apos;)[2]);</div><div class="line">    var date1 = new Date(y1, m1, d1);</div><div class="line">    var date2 = new Date(y2, m2, d2);</div><div class="line">   </div><div class="line">    //用距标准时间差来获取相距时间</div><div class="line">    var minsec = Date.parse(date1) - Date.parse(date2);</div><div class="line">    var days = minsec / 1000 / 60 / 60 / 24; //factor: second / minute / hour / day</div><div class="line">    return days;</div><div class="line">&#125;</div><div class="line">alert(Days(str1, str2));</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jekyll目录结构与变量]]></title>
      <url>/2015/12/20/2015-10-18-%E6%AD%A3%E5%88%99/</url>
      <content type="html"><![CDATA[<ul>
<li><p>/^\d{16}|\d{19}$/             –银行卡–</p>
</li>
<li><p>什么是正则表达式？</p>
</li>
</ul>
<ul>
<li>/^\d{16}|\d{19}$/                –银行卡–</li>
<li>(^\d{15}$)|(^\d{17}([0-9]|X)$)    –身份证–</li>
<li>/1[3|5|7|8|][0-9]{9}/            –手机号–</li>
<li>/^\d{4}/                        –验证码–</li>
</ul>
<p>**什么是正则表达式？</p>
<p><strong><strong>这个问题可以参见：“正则表达式30分钟入门教程”，很多编程语言都支持正则表达式，本文仅仅讨论JavaScript中的正则表达式。</strong></strong>创建一个正则表达式</p>
<p><strong><strong>第一种方法：</strong></strong>   </p>
<pre><code>var reg = /pattern/;
</code></pre><p><strong><strong>第二种方法：</strong></strong></p>
<pre><code>var reg = new  RegExp(&apos;pattern&apos;);
</code></pre><p><em>**</em>正则表达式的exec方法简介</p>
<p><strong><strong>语法：</strong></strong></p>
<pre><code>reg.exec(str);
</code></pre><p><strong><strong>其中str为要执行正则表达式的目标字符串。</strong></strong>例如：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  &lt;script  type=&quot;text/javascript&quot;&gt; </div><div class="line">        var reg = /test/; </div><div class="line">        var str = &apos;testString&apos;; </div><div class="line">        var result =  reg.exec(str); </div><div class="line">        alert(result); </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><strong>将会输出test<br>，因为正则表达式reg会匹配str(‘testString’)中的’test’子字符串，并且将其返回。**</strong>我们使用下面的函数来做匹配正则的练习：<em>**</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function  execReg(reg,str)&#123;   </div><div class="line">        var result =  reg.exec(str);  </div><div class="line">        alert(result);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>**函数接受一个正则表达式参数reg和一个目标字符串参数str，执行之后会alert出正则表达式与字符串的匹配结果。</strong><br><strong>用这个函数测试上面的例子就是：**</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        function execReg(reg, str) &#123;</div><div class="line">                var result = reg.exec(str);</div><div class="line">                alert(result);</div><div class="line">        &#125;</div><div class="line">        var reg = /test/;</div><div class="line">        var str = &apos;testString&apos;;</div><div class="line">        execReg(reg, str);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><strong><strong>上面的例子用正则里的test去匹配字符串里的test，实在是很无聊，同样的任务用indexOf方法就可以完成了。用正则，自然是要完成更强大的功能：</strong></strong>一片两片三四片，落尽正则全不见</p>
<p><strong><strong>上面的小标题翻译成正则就是{1},{2},{3,4},{1,}。</strong></strong>c{n}</p>
<p><strong><strong>{1}表示一个的意思。</strong></strong>/c{1}/只能匹配一个c。<strong><strong>/c{2}/则会匹配两个连续的c。</strong></strong>以此类推,<strong><strong>/c{n}/则会匹配n个连续的c。</strong></strong>看下面的例子：<em>**</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;1&#125;/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>**返回结果c</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;2&#125;/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回结果null<br>，表示没有匹配成功。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;2&#125;/;</div><div class="line">str = &apos;ccVC果冻爽&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回结果cc。**</strong>c{m,n}<strong><strong>c{3,4}的意思是，连续的3个c或者4个c<br>。</strong></strong>例如**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;3,4&#125;/;</div><div class="line">str = &apos;ccVC果冻爽&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回结果null<br>，表示没有匹配成功。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;3,4&#125;/;</div><div class="line">str = &apos;cccTest&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果返回ccc。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;3,4&#125;/;</div><div class="line">str = &apos;ccccTest&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果返回cccc，这表明正则会尽量多匹配，可3可4的时候它会选择多匹配一个。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;3,4&#125;/;</div><div class="line">str = &apos;cccccTest&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>仍然只匹配4个c。**</strong>由以上例子可以推断出，c{m,n}表示m个到n个c，且m小于等于n。<strong><strong>c{n,}</strong></strong>c{1,}表示1个以上的c。例如：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;1,&#125;/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果返回c。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;1,&#125;/;</div><div class="line">str = &apos;cccccTest&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回ccccc，再次说明了正则表达式会尽量多地匹配。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;2,&#125;/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果返回null，c{2,}表示2个以上的c，而cainiao中只有1个c。**</strong>由以上例子可知，c{n,}表示最少n个c，最多则不限个数<br>。<strong>*</strong>,+,?</p>
<p><strong>*</strong>表示0次或者多次，等同于{0,}，即<strong><strong>c* 和 c{0,} 是一个意思。</strong></strong>+表示一次或者多次，等同于{1,}，即<strong><strong>c+ 和 c{1,} 是一个意思。</strong></strong>最后，?表示0次或者1次，等同于{0,1}，即<strong><strong>c? 和 c{0,1} 是一个意思</strong></strong>贪心与非贪心</p>
<p><strong><strong>人都是贪婪的，正则也是如此。我们在例子reg = /c{3,4}/;str=’ccccTest’;的例子中已经看到了，能匹配四个的时候，正则绝对不会去匹配三个。上面所介绍的所有的正则都是这样，只要在合法的情况下，它们会尽量多去匹配字符，这就叫做贪心模式。</strong></strong>如果我们希望正则尽量少地匹配字符，那么就可以在表示数字的符号后面加上一个?。组成如下的形式：<strong><strong>{n,}?, *?, +?, ??, {m,n}?</strong></strong>同样来看一个例子：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c&#123;1,&#125;?/;</div><div class="line">str = &apos;ccccc&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回的结果只有1个c<br>，尽管有5个c可以匹配，但是由于正则表达式是非贪心模式，所以只会匹配一个。**</strong>/^开头,结尾$/</p>
<p><strong>**^表示只匹配字符串的开头。看下面的例子：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^c/;</div><div class="line">str = &apos;维生素c&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果为null，因为字符串‘维生素c’的开头并不是c，所以匹配失败。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^c/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这次则返回c，匹配成功，因为cainiao恰恰是以c开头的。**</strong>与^相反，$则只匹配字符串结尾的字符，同样，看例子：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c$/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回null，表示正则表达式没能在字符串的结尾找到c这个字符。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c$/;</div><div class="line">str = &apos;维生素c&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这次返回的结果是c，表明匹配成功。**</strong>点’.’</p>
<p><strong>**‘.’会匹配字符串中除了换行符\n之外的所有字符，例如</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /./;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果显示，正则匹配到了字符c。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /./;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这次是b。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /.+/;</div><div class="line">str = &apos;blueidea——经典论坛  好_。&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果是“blueidea——经典论坛 好_。“也就是说所有的字符都被匹配掉了，包括一个空格，一个下滑线，和一个破折号。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">reg = /.+/;</div><div class="line">reg = /.+/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>同样，直接返回整个字符串——bbs.blueidea.com，可见”.”也匹配”.”本身。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^./;</div><div class="line">str = &apos;\ncainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果是null，终于失败了，正则要求字符串的第一个字符不是换行，但是恰恰字符是以\n开始的。**</strong>二选一，正则表达式中的或，“|“</p>
<p><strong><strong>b|c表示，匹配b或者c。</strong></strong>例如：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /b|c/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果是b。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /b|c/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果是c。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^b|c.+/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>匹配掉整个cainiao。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^b|c.+/;</div><div class="line">str  = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果只有一个b，而不是整个字符串。因为上面正则表达式的意思是，匹配开头的b或者是c.+。**</strong>括号</p>
<p>**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^(b|c).+/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这次的结果是整个串bbs.blueidea.com，加上上面的括号后，这个正则的意思是，如果字符串的开头是b或者c，那么匹配开头的b或者c以及其后的所有的非换行字符。**</strong>如果你也实验了的话，会发现返回的结果后面多出来一个“,b“，这是()内的b|c所匹配的内容。我们在正则表达式内括号里写的内容会被认为是子正则表达式，所匹配的结果也会被记录下来供后面使用。我们暂且不去理会这个特性。<br><em>**</em>字符集合[abc]</p>
<p><strong>**[abc]表示a或者b或者c中的任意一个字符。例如：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^[abc]/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回结果是b。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^[abc]/;</div><div class="line">str = &apos;test&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这次的结果就是null了。**</strong>我们在字字符集合中使用如下的表示方式:[a-z],[A-Z],[0-9]，分别表示小写字母，大写字母，数字。例如：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^[a-zA-Z][a-zA-Z0-9_]+/;</div><div class="line">str = &apos;test&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果是整个test，正则的意思是开头必须是英文字母，后面可以是英文字母或者数字以及下划线。**</strong>反字符集合[^abc]</p>
<p><strong>**^在正则表达式开始部分的时候表示开头的意思，例如/^c/表示开头是c；但是在字符集和中，它表示的是类似“非“的意思，例如[^abc]就表示不能是a，b或者c中的任何一个。例如：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /[^abc]/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回的结果是l，因为它是第一个非abc的字符（即第一个b没有匹配）。同样：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /[^abc]/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>则返回i，前两个字符都是[abc]集合中的。**</strong>由此我们可知：[^0-9]表示非数字，[^a-z]表示非小写字母，一次类推。<em>**</em>边界与非边界</p>
<p><strong>**\b表示的边界的意思，也就是说，只有字符串的开头和结尾才算数。例如/\bc/就表示字符串开始的c或者是结尾的c。看下面的例子：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\bc/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回结果c。匹配到了左边界的c字符。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\bc/;</div><div class="line">str = &apos;维生素c&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>仍然返回c，不过这次返回的是右侧边界的c。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\bc/;</div><div class="line">str = &apos;bcb&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这次匹配失败，因为bcb字符串中的c被夹在中间，既不在左边界也不再右边界。**</strong>与\b对应\B表示非边界。例如：**<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\Bc/;</div><div class="line">str = &apos;bcb&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure></p>
<p><strong>这次会成功地匹配到bcb中的c，。然而</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\Bc/;</div><div class="line">str = &apos;cainiao&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>则会返回null。因为\B告诉正则，只匹配非边界的c。**</strong>数字与非数字</p>
<p><strong>**\d表示数字的意思，相反，\D表示非数字。例如：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\d/;</div><div class="line">str = &apos;cainiao8&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回的匹配结果为8，因为它是第一个数字字符。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\D/;</div><div class="line">str = &apos;cainiao8&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure></p>
<p><strong>返回c，第一个非数字字符。**</strong>空白</p>
<p><strong><strong>\f匹配换页符，\n匹配换行符，\r匹配回车，\t匹配制表符，\v匹配垂直制表符。</strong></strong>\s匹配单个空格，等同于[\f\n\r\t\v]。例如：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\s.+/;</div><div class="line">str = &apos;This is a test  String.&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回“is a test String.”，正则的意思是匹配第一个空格以及其后的所有非换行字符。**</strong>同样，\S表示非空格字符。**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\S+/;</div><div class="line">str = &apos;This is a test  String.&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>匹配结果为This，当遇到第一个空格之后，正则就停止匹配了。**</strong>单词字符</p>
<p><strong>**\w表示单词字符，等同于字符集合[a-zA-Z0-9_]。例如：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\w+/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回完整的blueidea字符串，因为所有字符都是单词字符。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\w+/;</div><div class="line">str = &apos;.className&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果显示匹配了字符串中的className，只有第一个“.”——唯一的非单词字符没有匹配。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\w+/;</div><div class="line">str = &apos;中文如何？&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>试图用单词字符去匹配中文自然行不通了，返回null。**</strong>\W表示非单词字符，等效于[^a-zA-Z0-9_]**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\W+/;</div><div class="line">str = &apos;中文如何？&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回完整的字符串，因为，无论是中文和“？”都算作是非单词字符。**</strong>反向引用</p>
<p><strong><strong>形式如下：/(子正则表达式)\1/</strong></strong>依旧用例子来说明：<strong>**1.</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /\w/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回b。**</strong>2.**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /(\w)(\w)/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回bl,b,l**</strong>bl是整个正则匹配的内容，b是第一个括号里的子正则表达式匹配的内容，l是第二个括号匹配的内容。<strong>**3.</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /(\w)\1/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>则会返回null。这里的“\1”就叫做反向引用，它表示的是第一个括号内的字正则表达式匹配的内容。在上面的例子中，第一个括号里的(\w)匹配了b，因此“\1”就同样表示b了，在余下的字符串里自然找不到b了。**</strong>与第二个例子对比就可以发现，“\1”是等同于“第1个括号匹配的内容”，而不是“第一个括号的内容”。**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /(\w)\1/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这个正则则会匹配到bb。**</strong>同样，前面有几个子正则表达式我们就可以使用几个反向引用。例如：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /(\w)(\w)\2\1/;</div><div class="line">str = &apos;woow&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>会匹配成功，因为第一个括号匹配到w，第二个括号匹配到o，而\2\1则表示ow，恰好匹配了字符串的最后两个字符。**</strong>括号（2）</p>
<p><strong>**前面我们曾经讨论过一次括号的问题，见下面这个例子：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^(b|c).+/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>这个正则是为了实现只匹配以b或者c开头的字符串，一直匹配到换行字符，但是。上面我们已经看到了，可以使用“\1”来反向引用这个括号里的子正则表达式所匹配的内容。而且exec方法也会将这个字正则表达式的匹配结果保存到返回的结果中。**</strong>不记录子正则表达式的匹配结果</p>
<p><strong><strong>使用形如(?:pattern)的正则就可以避免保存括号内的匹配结果。例如：</strong></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^(?:b|c).+/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong><strong>可以看到返回的结果不再包括那个括号内的字正则表达式多匹配的内容。</strong></strong>同理，反向引用也不好使了：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^(b|c)\1/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回bb,b。bb是整个正则表达式匹配的内容，而b是第一个子正则表达式匹配的内容。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /^(?:b|c)\1/;</div><div class="line">str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回null。由于根本就没有记录括号内匹配的内容，自然没有办法反向引用了。**</strong>正向预查</p>
<p><strong><strong>形式：(?=pattern)</strong></strong>所谓正向预查，意思就是：要匹配的字符串，后面必须紧跟着pattern！<strong>**我们知道正则表达式/cainiao/会匹配cainiao。同样，也会匹配cainiao9中的cainiao。但是我们可能希望，cainiao只能匹配cainiao8中的菜鸟。这时候就可以像下面这样写：/cainiao(?=8)/，看两个实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /cainiao(?=8)/;</div><div class="line">str = &apos;cainiao9&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回null。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /cainiao(?=8)/;</div><div class="line">str = &apos;cainiao8&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>匹配cainiao。**</strong>需要注意的是，括号里的内容并不参与真正的匹配，只是检查一下后面的字符是否符合要求而已，例如上面的正则，返回的是cainiao，而不是cainiao8。<strong>**再来看两个例子：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /blue(?=idea)/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>匹配到blue，而不是blueidea。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /blue(?=idea)/;</div><div class="line">str = &apos;bluetooth&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回null，因为blue后面不是idea。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /blue(?=idea)/;</div><div class="line">str = &apos;bluetoothidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>同样返回null。**</strong>?!</p>
<p><strong>**形式(?!pattern)和?=恰好相反，要求字符串的后面不能紧跟着某个pattern，还拿上面的例子：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /blue(?!idea)/;</div><div class="line">str = &apos;blueidea&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回null，因为正则要求，blue的后面不能是idea。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /blue(?!idea)/;</div><div class="line">str = &apos;bluetooth&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>则成功返回blue。**</strong>匹配元字符</p>
<p><strong><strong>首先要搞清楚什么是元字符呢？我们之前用过*,+,?之类的符号，它们在正则表达式中都有一定的特殊含义，类似这些有特殊功能的字符都叫做元字符。例如</strong></strong>reg = /c*/;</p>
<p><strong><em>*表示有任意个c，但是如果我们真的想匹配’c</em>’这个字符串的时候怎么办呢？只要将*转义了就可以了，如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">reg = /c\*/;</div><div class="line">str = &apos;c*&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回匹配的字符串：c<em>。*</em></strong>同理，要匹配其他元字符，只要在前面加上一个“\”就可以了。<em>**</em>正则表达式的修饰符</p>
<p><em>**</em>全局匹配，修饰符g</p>
<p><strong><strong>形式：/pattern/g</strong></strong>例子：reg = /b/g;<strong><strong>后面再说这个g的作用。先看后面的两个修饰符。</strong></strong>不区分大小写，修饰符i</p>
<p><strong><strong>形式：/pattern/i</strong></strong>例子：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /b/;</div><div class="line">var str = &apos;BBS&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>返回null，因为大小写不符合。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /b/i;</div><div class="line">var str = &apos;BBS&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>匹配到B，这个就是i修饰符的作用了。**</strong>行首行尾，修饰符m</p>
<p><strong><strong>形式：/pattern/m</strong></strong>m修饰符的作用是修改^和$在正则表达式中的作用，让它们分别表示行首和行尾。例如：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /^b/;</div><div class="line">var str = &apos;test\nbbs&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>匹配失败，因为字符串的开头没有b字符。但是加上m修饰符之后：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /^b/m;</div><div class="line">var str = &apos;test\nbbs&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>匹配到b，因为加了m修饰符之后，^已经表示行首，由于bbs在字符串第二行的行首，所以可以成功地匹配。**</strong>exec方法详解</p>
<p><em>**</em>exec方法的返回值</p>
<p><strong><strong>exec方法返回的其实并不是匹配结果字符串，而是一个对象，简单地修改一下execReg函数，来做一个实验就可以印证这一点：</strong></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function  execReg(reg,str)&#123; </div><div class="line">      var result =  reg.exec(str);  </div><div class="line">      alert(typeof result);  &#125;  </div><div class="line">var reg = /b/; </div><div class="line">      var  str=&apos;bbs.bblueidea.com&apos;; </div><div class="line">      execReg(reg,str);</div></pre></td></tr></table></figure>
<p><strong><strong>结果显示result的类型是object。而且是一个类似数组的对象。使用for in可以知道它的属性: index input 0。其中index是表示匹配在原字符串中的索引；而input则是表示输入的字符串；</strong></strong>至于0则是表示只有一个匹配结果，可以用下标0来引用这个匹配结果，这个数量可能改变。我们可以通过返回值的length属性来得知匹配结果的总数量。<strong><strong>根据以上对返回值的分析，修改execReg函数如下：</strong></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function execReg(reg, str) &#123;</div><div class="line">        var result = reg.exec(str);</div><div class="line">        document.write(&apos;index:&apos; + result.index + &apos;&lt;br  /&gt;&apos; + &apos;input:&apos; + result.input + &apos;&lt;br  /&gt;&apos;);</div><div class="line">        for (i = 0; i &lt; result.length; i++) &#123;</div><div class="line">                document.write(&apos;result[&apos; + i + &apos;]:&apos; + result[i] + &apos;&lt;br  /&gt;&apos;)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>**马上来实验一下：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /\w/;</div><div class="line">var str = &apos;bbs.bblueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果如下：**</strong>index:0<strong><strong>input:bbs.bblueidea.com</strong></strong>result[0]:b<strong><strong>输入字符串为bbs.bblueidea.com；</strong></strong>匹配的b在原字符串的索引是0。<strong>**正则的匹配结果为一个，b；</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /(\w)(\w)(.+)/;</div><div class="line">var str = &apos;bbs.bblueidea.com&apos;;</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果为：**</strong>index:0<strong><strong>input:bbs.bblueidea.com</strong></strong>result[0]:bbs.bblueidea.com<strong><strong>result[1]:b</strong></strong>result[2]:b<strong><strong>result[3]:s.bblueidea.com</strong></strong>由上面两个例子可见，返回对象[0]就是整个正则表达式所匹配的内容。后续的元素则是各个子正则表达式的匹配内容。<em>**</em>exec方法对正则表达式的更新</p>
<p><strong>**exec方法在返回结果对象的同时，还可能会更新原来的正则表达式，这就要看正则表达式是否设置了g修饰符。先来看两个例子吧：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /b/;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果如下：**</strong>index:0<strong><strong>input:bbs.blueidea.com</strong></strong>result[0]:b<strong><strong>index:0</strong></strong>input:bbs.blueidea.com<strong><strong>result[0]:b</strong></strong>也就是说，两次匹配的结果完全一样，从索引可以看出来，匹配的都是字符串首的b字符。<strong>**下面看看设置了g的正则表达式表现如何：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /b/g;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">execReg(reg, str);</div><div class="line">execReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>结果如下：**</strong>index:0<strong><strong>input:bbs.blueidea.com</strong></strong>result[0]:b<strong><strong>index:1</strong></strong>input:bbs.blueidea.com<strong><strong>result[0]:b</strong></strong>可以看得出来，第二次匹配的是字符串的字符串的第二个b。这也就是g修饰符的作用了，下面来看exec是如何区别对待g和非g正则表达式的。<strong><strong>如果正则表达式没有设置g，那么exec方法不会对正则表达式有任何的影响，如果设置了g，那么exec执行之后会更新正则表达式的lastIndex属性，表示本次匹配后，所匹配字符串的下一个字符的索引，下一次再用这个正则表达式匹配字符串的时候就会从上次的lastIndex属性开始匹配，也就是上面两个例子结果不同的原因了。</strong></strong>test方法</p>
<p><strong>**test方法仅仅检查是否能够匹配str，并且返回布尔值以表示是否成功。同样建立一个简单的测试函数：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  function testReg(reg, str) &#123;</div><div class="line">        alert(reg.test(str));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>实例1</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /b/;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">testReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>成功，输出true。**</strong>实例2**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /9/;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">testReg(reg, str);</div></pre></td></tr></table></figure>
<p><strong>失败，返回false。**</strong>使用字符串的方法执行正则表达式</p>
<p><em>**</em>match方法</p>
<p><strong><strong>形式：str.match(reg);</strong></strong>与正则表达式的exec方法类似，该方法同样返回一个类似数组的对象，也有input和index属性。我们定义如下一个函数用来测试：<em>**</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function matchReg(reg, str) &#123;</div><div class="line">        var result = str.match(reg);</div><div class="line">        if (result) &#123;</div><div class="line">                document.write(&apos;index:&apos; + result.index + &apos;&lt;br  /&gt;&apos; + &apos;input:&apos; + result.input + &apos;&lt;br  /&gt;&apos;);</div><div class="line">                for (i = 0; i &lt; result.length; i++) &#123;</div><div class="line">                        document.write(&apos;result[&apos; + i + &apos;]:&apos; + result[i] + &apos;&lt;br  /&gt;&apos;)</div><div class="line">                &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">                alert(&apos;null：匹配失败！&apos;)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var reg = /b/;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">matchReg(reg, str);</div></pre></td></tr></table></figure>
<p>结果如下：<strong><strong>index:0</strong></strong>input:bbs.blueidea.com<strong><strong>result[0]:b</strong></strong>可见，和exec的结果一样。<strong><strong>但是如果正则表达式设置了g修饰符，exec和match的行为可就不一样了，见下例：</strong></strong>index:undefined<strong><strong>input:undefined</strong></strong>result[0]:b<strong><strong>result[1]:b</strong></strong>result[2]:b<strong><strong>设置了g修饰符的正则表达式在完成一次成功匹配后不会停止，而是继续找到所有可以匹配到的字符。返回的结果包括了三个b。不过没有提供input和index这些信息。</strong></strong>replace方法</p>
<p><strong><strong>形式：str. replace (reg,’new str’);</strong></strong>它的作用是将str字符串中匹配reg的部分用’’new str”部分代码，值得注意的是原字符串并不会被修改，而是作为返回值被返回。例子：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /b/;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">var newStr = str.replace(reg, &apos;c&apos;);</div><div class="line">document.write(newStr);</div></pre></td></tr></table></figure>
<p><strong>结果为cbs.blueidea.com，只有第一个b被替换为c。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /b/g;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">var newStr = str.replace(reg, &apos;c&apos;);</div><div class="line">document.write(newStr);</div></pre></td></tr></table></figure>
<p><strong>输出ccs.clueidea.com**</strong>由于，设置了g修饰符，所以会替换掉所有的b。**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /\w+/g;</div><div class="line">    var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">    var newStr = str.replace(reg, &apos;word&apos;);</div><div class="line">    document.write(newStr);</div></pre></td></tr></table></figure>
<p><strong>输出：**</strong>word.word.word。<em>**</em>在replace函数中使用$引用子正则表达式匹配内容</p>
<p><strong><strong>就像在正则里我们可以使用\1来引用第一个子正则表达式所匹配的内容一样，我们在replace函数的替换字符里也可以使用$1来引用相同的内容。</strong></strong>还是来看一个例子吧：**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /(\w+).(\w+).(\w+)/;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">var newStr = str.replace(reg, &apos;$1.$1.$1&apos;);</div><div class="line">document.write(newStr);</div></pre></td></tr></table></figure>
<p><strong>输出的结果为：**</strong>bbs.bbs.bbs<strong><strong>首先，我们知道第一个子正则表达式匹配到了bbs，那么$1也就代表bbs了。其后我们把替换字符串设置为’$1.$1.$1’,其实也就是“bbs.bbs.bbs”。同理，$2就是blueidea，$3就是com。</strong></strong>在来看一个例子，颠倒空格前后两个单词的顺序。**</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /(\w+)\s(\w+)/;</div><div class="line">var str = &apos;cainiao  gaoshou&apos;;</div><div class="line">var newStr = str.replace(reg, &apos;$2 $1&apos;);</div><div class="line">document.write(newStr);</div></pre></td></tr></table></figure>
<p><strong>结果为：gaoshou cainiao，也就是空格前后的单词被调换顺序了。**</strong>由于在替换文本里$有了特殊的含义，所以我们如果想要是用$这个字符的话，需要写成$$，例如：**<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /(\w+)\s(\w+)/;</div><div class="line">var str = &apos;cainiao  gaoshou&apos;;</div><div class="line">var newStr = str.replace(reg, &apos;$ $&apos;);</div><div class="line">document.write(newStr);</div></pre></td></tr></table></figure></p>
<p><strong>结果为：$ $。**</strong>search方法和split方法</p>
<p><strong><strong>同样，字符串的search方法和split方法中也可以使用正则表达式，形式如下：</strong></strong>str.search(reg);<strong>**search返回正则表达式第一次匹配的位置。例子：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /idea/;</div><div class="line">var str = &apos;blueidea&apos;;</div><div class="line">var pos = str.search(reg);</div><div class="line">document.write(pos);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /\W/;</div><div class="line">var str = &apos;bbs.blueidea.com&apos;;</div><div class="line">var pos = str.search(reg);</div><div class="line">document.write(pos);</div></pre></td></tr></table></figure>
<p><strong>结果为3，也就是那个点“.”的位置。</strong>str.split(reg,’seprator’);<br>split返回分割后的数组，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /\W/;</div><div class="line">var str =  &apos;bbs.blueidea.com&apos;;</div><div class="line">var arr =  str.split(reg);</div><div class="line">document.write(arr);</div></pre></td></tr></table></figure></p>
<p><strong>结果为：bbs,blueidea,com，可见数组被非单词字符分为了有三个元素的数组。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var reg = /\W/;</div><div class="line">var str = &apos;http://www.baidu.com/&apos;;</div><div class="line">var arr = str.split(reg);</div><div class="line">document.write(arr.length + &apos;&lt;br  /&gt;&apos;);</div><div class="line">document.write(arr);</div></pre></td></tr></table></figure></p>
<p><strong>结果为：**</strong>7<strong><strong>http,,,www,baidu,com,</strong></strong>可见字符串被分为了有7个元素的数组，其中包括了三个为空字符串的元素。**</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[倒计时函数封装]]></title>
      <url>/2015/12/20/2015-11-20-%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>倒计时函数封装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports, module) &#123;</div><div class="line"></div><div class="line">    function Countdown(countButton)&#123;</div><div class="line">        this.countButton = countButton;</div><div class="line">        this.oSendCodeTimer = undefined;</div><div class="line">        this.oSendCodeNum = 60;</div><div class="line">        this.isStart = false;</div><div class="line"></div><div class="line">        this.start = function()&#123;</div><div class="line">            if(this.isStart)&#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            this.isStart = true;</div><div class="line">            var _this = this;</div><div class="line">            this.oSendCodeTimer = setInterval(function() &#123;</div><div class="line">                if (_this.oSendCodeNum &lt; 1) &#123;</div><div class="line">                    _this.countButton.val(&apos;获取验证码&apos;);</div><div class="line">                    _this.countButton.attr(&apos;disabled&apos;, false);</div><div class="line">                    clearInterval(_this.oSendCodeTimer);</div><div class="line">                &#125; else &#123;</div><div class="line">                    _this.oSendCodeNum--;</div><div class="line">                    _this.countButton.attr(&apos;disabled&apos;, true);</div><div class="line">                    _this.countButton.val(_this.oSendCodeNum + &quot; s&quot;);</div><div class="line">                &#125;;</div><div class="line">            &#125;, 1000);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        this.stop = function()&#123;</div><div class="line">            if(this.isStart &amp;&amp; this.oSendCodeTimer)&#123;</div><div class="line">                this.oSendCodeNum = 60;</div><div class="line">                this.countButton.val(&apos;获取验证码&apos;);</div><div class="line">                clearInterval(this.oSendCodeTimer);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    module.exports =Countdown;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[封装分页（包含js/jq/ajax/juice。。。）]]></title>
      <url>/2015/12/20/2015-11-18-%E5%B0%81%E8%A3%85%E5%88%86%E9%A1%B5%5Bjuerce%20ajaxjq%20nodejs%5D/</url>
      <content type="html"><![CDATA[<p>封装分页（包含js/jq/ajax/juice。。。）</p>
<h3 id="模板部分：product-list-tpl-html"><a href="#模板部分：product-list-tpl-html" class="headerlink" title="模板部分：product-list-tpl.html"></a>模板部分：product-list-tpl.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/juicer&quot; id=&quot;product-list-tpl&quot;&gt;</div><div class="line">    &#123;@each products as product&#125;</div><div class="line">    &#123;@set statusName = &apos;&apos; &#125;</div><div class="line">    &#123;@set className = &apos;&apos; &#125;</div><div class="line">    &#123;@if product.status ==&apos;销售中&apos; &#125;</div><div class="line">			&#123;@set className = &apos;button-div&apos; &#125;</div><div class="line">			&#123;@set statusName =&quot;立即购买&quot; &#125;</div><div class="line">	&#123;@else if product.status ==&apos;待上架&apos;&#125;</div><div class="line">			&#123;@set className = &apos;button-div button-arive&apos; &#125;</div><div class="line">			&#123;@set statusName =&quot;预售&quot; &#125;</div><div class="line">	&#123;@else if product.status ==&apos;售完&apos;|| products.status ==&apos;兑付中&apos; &#125;</div><div class="line">			&#123;@set className = &apos;button-div-saleout&apos; &#125;</div><div class="line">			&#123;@set statusName =&quot;已售完&quot; &#125;</div><div class="line">	&#123;@else if product.status ==&apos;已兑付&apos; &#125;</div><div class="line">			&#123;@set className = &apos;status-p1&apos; &#125;</div><div class="line">			&#123;@set statusName =&quot;已兑付&quot; &#125;</div><div class="line">	&#123;@/if&#125;</div><div class="line">    &lt;div class=&quot;product-list&quot;&gt;</div><div class="line">					&lt;div class=&quot;pro-list-left pro-list-left-bj1&quot;&gt;</div><div class="line">						&lt;p class=&quot;pro-p1&quot;&gt;$&#123;product.name&#125;&lt;/p&gt;</div><div class="line">						&lt;p class=&quot;p1&quot;&gt;年化收益率&lt;/p&gt;</div><div class="line">						&lt;p class=&quot;pro-p3&quot;&gt;$&#123;(product.rate + product.extraRate)&#125;&lt;span&gt;%&lt;/span&gt;&lt;/p&gt;</div><div class="line">					&lt;/div&gt;</div><div class="line">					&lt;div class=&quot;pro-list-right&quot;&gt;</div><div class="line">						&lt;div class=&quot;right-top&quot;&gt;</div><div class="line">							&lt;p class=&quot;right-top-p right-p-border&quot;&gt;可购金额（元）&lt;br&gt;</div><div class="line">								&lt;span class=&quot;num&quot;&gt;$&#123;product.remainAmt&#125;&lt;/span&gt;</div><div class="line">							&lt;/p&gt;</div><div class="line">							&lt;p class=&quot;right-top-p&quot;&gt;理财期限（天）&lt;br&gt;</div><div class="line">								&lt;span class=&quot;num&quot;&gt;$&#123;product.duration&#125;&lt;/span&gt;</div><div class="line">							&lt;/p&gt;</div><div class="line">						&lt;/div&gt;</div><div class="line">						&lt;div class=&quot;right-bottom&quot;&gt;</div><div class="line">							&lt;form action=&quot;#&quot; method=&quot;post&quot;&gt;</div><div class="line">								&lt;div class=&quot;num-div&quot;&gt;</div><div class="line">									&lt;p class=&quot;num&quot;&gt;起购金额：$&#123;product.limitAmt&#125;元&lt;/p&gt;</div><div class="line">								&lt;/div&gt;</div><div class="line">								&lt;div class=&quot;$&#123;className&#125;&quot;&gt;</div><div class="line">									&lt;a href=&quot;/product/detail/$&#123;product.id&#125;&quot;&gt;$&#123;statusName&#125;&lt;/a&gt;</div><div class="line">								&lt;/div&gt;</div><div class="line">							&lt;/form&gt;</div><div class="line">						&lt;/div&gt;</div><div class="line">					&lt;/div&gt;</div><div class="line">	&lt;/div&gt;&lt;!--product-list end--&gt;</div><div class="line">    &#123;@/each&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="页面部分："><a href="#页面部分：" class="headerlink" title="页面部分："></a>页面部分：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/stylesheets/productlist.css&quot;&gt;</div><div class="line">&lt;!--&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/stylesheets/paging.css&quot; /&gt;--&gt;</div><div class="line">&lt;div class=&quot;index-banner&quot;&gt;</div><div class="line">	&lt;div class=&quot;hd&quot;&gt;</div><div class="line">		&lt;ul class=&quot;num&quot;&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;bd&quot;&gt;</div><div class="line">		&lt;ul class=&quot;pic&quot;&gt;</div><div class="line">			&lt;!--</div><div class="line">                作者：zhongciyisheng@live.com</div><div class="line">                时间：2015-11-03</div><div class="line">                描述：动态添加图片，要添加图片和连接，青岛addbannerimges.js文件添加</div><div class="line">            --&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;pnBtn prev&quot;&gt; &lt;span class=&quot;blackBg&quot;&gt;&lt;/span&gt;</div><div class="line">		&lt;a class=&quot;arrow&quot; href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;pnBtn next&quot;&gt; &lt;span class=&quot;blackBg&quot;&gt;&lt;/span&gt;</div><div class="line">		&lt;a class=&quot;arrow&quot; href=&quot;javascript:void(0)&quot;&gt;&lt;/a&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;&lt;!--index-banner end--&gt;</div><div class="line">&lt;div class=&quot;bank&quot;&gt;&lt;/div&gt;&lt;!--轮播下面的空白--&gt;</div><div class="line">&lt;div class=&quot;licai&quot;&gt;</div><div class="line">	&lt;div class=&quot;full&quot;&gt;</div><div class="line">		&lt;div class=&quot;licai-p&quot;&gt;</div><div class="line">			&lt;p class=&quot;licai-product&quot;&gt;理财产品&lt;/p&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;div id=&quot;container&quot;&gt;</div><div class="line">			&lt;!--</div><div class="line">            	作者：zhongciyisheng@live.com</div><div class="line">            	时间：2015-11-18</div><div class="line">            	描述：装载产品列表区域，为便于后期维护查找。特意做此备注</div><div class="line">            --&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;div &gt;</div><div class="line">			&lt;ul id=&quot;pagination&quot; class=&quot;pagination-sm&quot;&gt;&lt;/ul&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/div&gt;&lt;!--full end--&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div><div class="line">&lt;!--licai end--&gt;</div><div class="line"></div><div class="line">&lt;%-partial(&apos;../template/product-list-tpl&apos;) %&gt;</div><div class="line">	&lt;!--&lt;script src=&quot;/js/jquery.pagination.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;--&gt;</div><div class="line">	&lt;!--&lt;script src=&quot;/js/modules/paging-config.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;--&gt;</div><div class="line">	&lt;script src=&quot;/js/modules/productlist-config.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by lrh on 17/11/15.</div><div class="line"> * pagination use jquery twbs-pagination plugin</div><div class="line"> * twbs-pagination defaults param</div><div class="line"> * defaults = &#123;</div><div class="line">        totalPages: 1,</div><div class="line">        startPage: 1,</div><div class="line">        visiblePages: 5,</div><div class="line">        initiateStartPageClick: true,</div><div class="line">        href: false,</div><div class="line">        pageVariable: &apos;&#123;-&#123; pa----ge &#125;-&#125;&apos;,</div><div class="line">        totalPagesVariable: &apos;&#123;&#123;total_pages&#125;&#125;&apos;,</div><div class="line">        page: null,</div><div class="line">        first: &apos;First&apos;,</div><div class="line">        prev: &apos;Previous&apos;,</div><div class="line">        next: &apos;Next&apos;,</div><div class="line">        last: &apos;Last&apos;,</div><div class="line">        loop: false,</div><div class="line">        onPageClick: null,</div><div class="line">        paginationClass: &apos;pagination&apos;,</div><div class="line">        nextClass: &apos;next&apos;,</div><div class="line">        prevClass: &apos;prev&apos;,</div><div class="line">        lastClass: &apos;last&apos;,</div><div class="line">        firstClass: &apos;first&apos;,</div><div class="line">        pageClass: &apos;page&apos;,</div><div class="line">        activeClass: &apos;active&apos;,</div><div class="line">        disabledClass: &apos;disabled&apos;</div><div class="line">    &#125;</div><div class="line"> */</div><div class="line"></div><div class="line">define(function(require, exports, module) &#123;</div><div class="line">    require(&apos;/stylesheets/pagination.css&apos;);</div><div class="line">    require(&apos;jpagination&apos;);</div><div class="line">    require(&apos;juicer&apos;);</div><div class="line"></div><div class="line">    var pagination;</div><div class="line">    var currentPage = 1;</div><div class="line">    var cacheParam;</div><div class="line">    var pPlugin;</div><div class="line">    var defaults = &#123;</div><div class="line">        first:&apos;首页&apos;,</div><div class="line">        prev:&apos;上一页&apos;,</div><div class="line">        next:&apos;下一页&apos;,</div><div class="line">        last:&apos;尾页&apos;,</div><div class="line">        startPage:1,</div><div class="line">        visiblePages: 5,</div><div class="line">        initiateStartPageClick: false,</div><div class="line">        onPageClick: function (event, page) &#123;</div><div class="line">            currentPage = page;</div><div class="line">            pagination.request(cacheParam);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     *</div><div class="line">     * @param content 展示内容的对象</div><div class="line">     * @param tplId list模板的id</div><div class="line">     * @param url   请求数据的url</div><div class="line">     * @constructor</div><div class="line">     */</div><div class="line">    </div><div class="line">    function Pagination(content,tplId,url)&#123;</div><div class="line">        this.content = content;</div><div class="line">        this.tplId = tplId;</div><div class="line">        this.url = url;</div><div class="line">        pagination = this;</div><div class="line">    &#125;</div><div class="line">    Pagination.prototype.withErrorCallBack = function(errorCallBack)&#123;</div><div class="line">        this.errorCallBack = errorCallBack;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Pagination.prototype.render = function(data)&#123;</div><div class="line">        this.content.html(juicer(this.tplId,data));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Pagination.prototype.request = function(param)&#123;</div><div class="line">        if(!cacheParam)&#123;</div><div class="line">            cacheParam = param||&#123;&#125;;</div><div class="line">        &#125;</div><div class="line">        var reqParam = $.extend(&#123;&#125;,cacheParam,&#123;currentPage:currentPage&#125;);</div><div class="line">        </div><div class="line">        $.ajax(&#123;</div><div class="line">            type: &quot;POST&quot;,</div><div class="line">            dataType: &quot;jsonp&quot;,</div><div class="line">            url: pagination.url,</div><div class="line">            data: reqParam,</div><div class="line">            success: function (data) &#123;</div><div class="line">                if(data.err_code == &apos;0&apos;)&#123;</div><div class="line">                    if(!pPlugin)&#123;</div><div class="line">                        pPlugin = pagination.initPage(&#123;totalPages:Number(data.page.pageNum)&#125;);</div><div class="line">                    &#125;else&#123;</div><div class="line">                        pPlugin.options.totalPages = Number(data.page.pageNum);</div><div class="line">                    &#125;</div><div class="line">                    pagination.render(data.data);</div><div class="line"></div><div class="line">                &#125;else if(pagination.errorCallBack)&#123;</div><div class="line">                    pagination.errorCallBack(data);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * chu</div><div class="line">     * @param options</div><div class="line">     * @returns &#123;*|jQuery&#125;</div><div class="line">     */</div><div class="line">    Pagination.prototype.initPage = function(options)&#123;</div><div class="line">        var dp = $.extend(&#123;&#125;,defaults,options);</div><div class="line">        $(&apos;#pagination&apos;).parent().css(&apos;text-align&apos;,&apos;center&apos;);</div><div class="line">        return new $.fn.twbsPagination(&apos;#pagination&apos;,dp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    module.exports =Pagination;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ajax]]></title>
      <url>/2015/12/20/2015-12-04-ajax/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">##jquery的ajax：</div><div class="line"></div><div class="line"></div><div class="line">	$.ajax(&#123;</div><div class="line">	  url: &apos;getTwitterFollowers.php&apos;,</div><div class="line">	  type: &apos;post&apos;,//GET,POST</div><div class="line">	  dataType:&apos;jsonp&apos;,//html,xml,json,jsonp....</div><div class="line">	  data: &#123;&#125;,//需要的参数</div><div class="line">	  success: function(data) &#123;//请求成功后处理函数</div><div class="line">		$(&apos;#ajaxphp-results&apos;).html(data);</div><div class="line">	  &#125;,</div><div class="line">	  error: function(e) &#123;//失败事的回调</div><div class="line">		//called when there is an error</div><div class="line">		//console.log(e.message);</div><div class="line">	  &#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h2 id="js原生的ajax："><a href="#js原生的ajax：" class="headerlink" title="js原生的ajax："></a>js原生的ajax：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">var xhr = null; //1-- 创建ajax对象</div><div class="line">if (window.XMLHttpRequest) &#123;</div><div class="line">	xhr = XMLHttpRequest();</div><div class="line">&#125; else &#123; //为了兼容IE6</div><div class="line">	xhr = ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</div><div class="line">&#125;;</div><div class="line">//2.连接服务器open(方法GET/POST，请求地址， 异步传输)									</div><div class="line">xhr.open(&apos;GET&apos;, &apos;请求数据的地址&apos;, true /*true是阻塞模式*/ );</div><div class="line">xhr.send(); //3 发送请求</div><div class="line">xhr.onreadystatechange = function() &#123;</div><div class="line">	if (xhr.readyState == 4) &#123;</div><div class="line">		/*</div><div class="line">		 ** Http状态码</div><div class="line">		 ** 1xx ：信息展示</div><div class="line">		 ** 2xx ：成功</div><div class="line">		 ** 3xx ：重定向</div><div class="line">		 ** 4xx : 客户端错误</div><div class="line">		 ** 5xx ：服务器端错误</div><div class="line">		 */</div><div class="line">		if (xhr.status == 200) &#123;</div><div class="line">			success(xhr.responseText);</div><div class="line">		&#125; else &#123;</div><div class="line">			if (failed) &#123;</div><div class="line">				failed(xhr.status);</div><div class="line">			&#125;;</div><div class="line">		&#125;;</div><div class="line">	&#125;;</div><div class="line">&#125;;</div><div class="line">// 处理返回数据</div><div class="line">/*</div><div class="line"> ** 每当readyState改变时，就会触发onreadystatechange事件</div><div class="line"> ** readyState属性存储有XMLHttpRequest的状态信息</div><div class="line"> ** 0 ：请求未初始化</div><div class="line"> ** 1 ：服务器连接已建立</div><div class="line"> ** 2 ：请求已接受</div><div class="line"> ** 3 : 请求处理中</div><div class="line"> ** 4 ：请求已完成，且相应就绪</div><div class="line"> */</div></pre></td></tr></table></figure>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">function Ajax(type, url, data, success, failed) &#123;</div><div class="line">// 创建ajax对象</div><div class="line">var xhr = null;</div><div class="line">if (window.XMLHttpRequest) &#123;</div><div class="line">	xhr = new XMLHttpRequest();</div><div class="line">&#125; else &#123;</div><div class="line">	xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;)</div><div class="line">&#125;</div><div class="line">var type = type.toUpperCase();</div><div class="line">// 用于清除缓存</div><div class="line">var random = Math.random();</div><div class="line">if (typeof data == &apos;object&apos;) &#123;</div><div class="line">	var str = &apos;&apos;;</div><div class="line">	for (var key in data) &#123;</div><div class="line">		str += key + &apos;=&apos; + data[key] + &apos;&amp;&apos;;</div><div class="line">	&#125;</div><div class="line">	data = str.replace(/&amp;$/, &apos;&apos;);</div><div class="line">&#125;</div><div class="line">if (type == &apos;GET&apos;) &#123;</div><div class="line">	if (data) &#123;</div><div class="line">		xhr.open(&apos;GET&apos;, url + &apos;?&apos; + data, true);</div><div class="line">	&#125; else &#123;</div><div class="line">		xhr.open(&apos;GET&apos;, url + &apos;?t=&apos; + random, true);</div><div class="line">	&#125;</div><div class="line">	xhr.send();</div><div class="line">&#125; else if (type == &apos;POST&apos;) &#123;</div><div class="line">	xhr.open(&apos;POST&apos;, url, true);</div><div class="line">	// 如果需要像 html 表单那样 POST 数据，请使用 setRequestHeader() 来添加 http 头。</div><div class="line">	xhr.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</div><div class="line">	xhr.send(data);</div><div class="line">&#125;</div><div class="line">// 处理返回数据</div><div class="line">xhr.onreadystatechange = function() &#123;</div><div class="line">	if (xhr.readyState == 4) &#123;</div><div class="line">		if (xhr.status == 200) &#123;</div><div class="line">			success(xhr.responseText);</div><div class="line">		&#125; else &#123;</div><div class="line">			if (failed) &#123;</div><div class="line">				failed(xhr.status);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">// 测试调用</div><div class="line">var sendData = &#123;</div><div class="line">	name: &apos;asher&apos;,</div><div class="line">	sex: &apos;male&apos;</div><div class="line">&#125;;</div><div class="line">Ajax(&apos;get&apos;, &apos;data/data.html&apos;, sendData, function(data) &#123;</div><div class="line">	console.log(data);</div><div class="line">&#125;, function(error) &#123;</div><div class="line">	console.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[grunt]]></title>
      <url>/2015/12/20/2015-12-04-grunt%E6%95%B4%E5%90%88%E7%89%88%5B30%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9Agrunt%5D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>说明：<a href="http://www.cnblogs.com/yexiaochai/p/3603389.html" target="_blank" rel="external">引用来源：</a><br><br>【grunt整合版】30分钟学会使用grunt打包前端代码<br></p>
<h2 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h2><p>是一套前端自动化工具，一个基于nodeJs的命令行工具，一般用于：<br><br>① 压缩文件  <br><br>② 合并文件  <br><br>③ 简单语法检查<br><br>对于其他用法，我还不太清楚，我们这里简单介绍下grunt的压缩、合并文件，初学，有误请包涵</p>
</blockquote>
<p>##准备阶段</p>
<blockquote>
<ul>
<li>1、nodeJs环境<br>因为grunt是基于nodeJs的，所以首先各位需要安装nodeJS环境，这块我们便不管了<br><br><a href="http://www.cnblogs.com/yexiaochai/p/3527418.html" target="_blank" rel="external">http://www.cnblogs.com/yexiaochai/p/3527418.html</a>  <br></li>
<li>2、安装grunt<br><br>有了nodeJs环境后，我们便可以开始搞grunt了，因为我们可能在任何目录下运行打包程序，所以我们需要安装CLI<br><br>官方推荐在全局安装CLI（grunt的命令行接口）</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure>
<blockquote>
<p>这条命令将会把grunt命令植入系统路径，这样就能在任意目录运行他，原因是<br>每次运行grunt时，它都会使用node的require查找本地是否安装grunt，如果找到CLI便加载这个本地grunt库<br>然后应用我们项目中的GruntFile配置，并执行任务<br><br><br>PS：这段先不要管，安装完了往下看</p>
</blockquote>
<h2 id="实例学习：打包zepto"><a href="#实例学习：打包zepto" class="headerlink" title="实例学习：打包zepto"></a>实例学习：打包zepto</h2><blockquote>
<p>一些东西说多了都是泪，直接先上实例吧，实例结束后再说其它的<br>首先在D盘新建一个项目（文件夹就好）<br>在里面新增两个文件（不要问为什么，搞进去先）</p>
</blockquote>
<p>① package.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;demo&quot;,</div><div class="line">  &quot;file&quot;: &quot;zepto&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;demo&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;grunt&quot;: &quot;~0.4.1&quot;,</div><div class="line">    &quot;grunt-contrib-jshint&quot;: &quot;~0.6.3&quot;,</div><div class="line">    &quot;grunt-contrib-uglify&quot;: &quot;~0.2.1&quot;,</div><div class="line">    &quot;grunt-contrib-requirejs&quot;: &quot;~0.4.1&quot;,</div><div class="line">    &quot;grunt-contrib-copy&quot;: &quot;~0.4.1&quot;,</div><div class="line">    &quot;grunt-contrib-clean&quot;: &quot;~0.5.0&quot;,</div><div class="line">    &quot;grunt-strip&quot;: &quot;~0.2.1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;express&quot;: &quot;3.x&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>② Gruntfile.js<br>完了我们需要在grunt目录下执行 npm install将相关的文件下载下来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd d:</div><div class="line">$ cd grunt</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/294743/201403/112017579622449.png" alt=""></p>
<p>然后我们的目录就会多一点东西：</p>
<p><img src="http://images.cnitblog.com/i/294743/201403/112018246778586.png" alt=""></p>
<p>多了很多东西，先别管事干什么的，我们后面都会用到，这个时候在目录下新建src文件夹，并且搞一个zepto进去</p>
<p><img src="http://images.cnitblog.com/i/294743/201403/112019037591143.png" alt=""></p>
<p>然后在Gruntfile中新增以下代码（先别管，增加再说）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  // 项目配置</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class="line">    uglify: &#123;</div><div class="line">      options: &#123;</div><div class="line">        banner: &apos;/*! &lt;%= pkg.file %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; */\n&apos;</div><div class="line">      &#125;,</div><div class="line">      build: &#123;</div><div class="line">        src: &apos;src/&lt;%=pkg.file %&gt;.js&apos;,</div><div class="line">        dest: &apos;dest/&lt;%= pkg.file %&gt;.min.js&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  // 加载提供&quot;uglify&quot;任务的插件</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);</div><div class="line">  // 默认任务</div><div class="line">  grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行 grunt命令后</p>
<pre><code>grunt
</code></pre><p><img src="http://images.cnitblog.com/i/294743/201403/112020055415469.png" alt=""></p>
<p>嗯嗯，多了一个文件，并且是压缩的，不差！！！第一步结束</p>
<h2 id="认识Gruntdile与package-json"><a href="#认识Gruntdile与package-json" class="headerlink" title="认识Gruntdile与package.json"></a>认识Gruntdile与package.json</h2><p>不出意外，每一个gurnt都会需要这两个文件，并且很可能就只有这两个文件（复杂的情况有所不同）</p>
<ul>
<li>package.json</li>
</ul>
<blockquote>
<p>这个文件用来存储npm模块的依赖项（比如我们的打包若是依赖requireJS的插件，这里就需要配置）<br>然后，我们会在里面配置一些不一样的信息，比如我们上面的file，这些数据都会放到package中<br>对于package的灵活配置，我们会在后面提到</p>
</blockquote>
<ul>
<li>Gruntfile</li>
</ul>
<p>这个文件尤其关键，他一般干两件事情：<br><br>① 读取package信息<br><br>② 插件加载、注册任务，运行任务（grunt对外的接口全部写在这里面）<br></p>
<p>Gruntfile一般由四个部分组成<br><br>① 包装函数<br><br>这个包装函数没什么东西，意思就是我们所有的代码必须放到这个函数里面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">//你的代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个不用知道为什么，直接将代码放入即可</p>
<p>② 项目/任务配置<br>我们在Gruntfile一般第一个用到的就是initConfig方法配置依赖信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkg: grunt.file.readJSON(&apos;package.json&apos;)</div></pre></td></tr></table></figure>
<p>这里的 grunt.file.readJSON就会将我们的配置文件读出，并且转换为json对象</p>
<p>然后我们在后面的地方就可以采用pkg.XXX的方式访问其中的数据了<br>值得注意的是这里使用的是underscore模板引擎，所以你在这里可以写很多东西</p>
<blockquote>
<p>uglify是一个插件的，我们在package依赖项进行了配置，这个时候我们为系统配置了一个任务<br><br>uglify（压缩），他会干这几个事情：<br><br>① 在src中找到zepto进行压缩（具体名字在package中找到）<br><br>② 找到dest目录，没有就新建，然后将压缩文件搞进去<br><br>③ 在上面加几个描述语言<br><br>这个任务配置其实就是一个方法接口调用，按照规范来就好，暂时不予关注，内幕后期来<br><br>这里只是定义了相关参数，但是并未加载实际函数，所以后面马上就有一句：<br></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);</div></pre></td></tr></table></figure>
<p>用于加载相关插件</p>
<p>最后注册一个自定义任务（其实也是默认任务），所以我们下面的命令行是等效的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt == grunt uglify</div></pre></td></tr></table></figure>
<p>至此，我们就简单解析了一番grunt的整个操作，下面来合并文件的例子</p>
<h2 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h2><p>合并文件依赖于grunt-contrib-concat插件，所以我们的package依赖项要新增一项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">  &quot;grunt&quot;: &quot;~0.4.1&quot;,</div><div class="line">  &quot;grunt-contrib-jshint&quot;: &quot;~0.6.3&quot;,</div><div class="line">  &quot;grunt-contrib-concat&quot;: &quot;~0.3.0&quot;,</div><div class="line">  &quot;grunt-contrib-uglify&quot;: &quot;~0.2.1&quot;,</div><div class="line">  &quot;grunt-contrib-requirejs&quot;: &quot;~0.4.1&quot;,</div><div class="line">  &quot;grunt-contrib-copy&quot;: &quot;~0.4.1&quot;,</div><div class="line">  &quot;grunt-contrib-clean&quot;: &quot;~0.5.0&quot;,</div><div class="line">  &quot;grunt-strip&quot;: &quot;~0.2.1&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>然后再将代码写成这个样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  // 项目配置</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class="line">    concat: &#123;</div><div class="line">      options: &#123;</div><div class="line">        separator: &apos;;&apos;</div><div class="line">      &#125;,</div><div class="line">      dist: &#123;</div><div class="line">        src: [&apos;src/zepto.js&apos;, &apos;src/underscore.js&apos;, &apos;src/backbone.js&apos;],</div><div class="line">        dest: &apos;dest/libs.js&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);</div><div class="line">  // 默认任务</div><div class="line">  grunt.registerTask(&apos;default&apos;, [&apos;concat&apos;]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行后，神奇的一幕发生了：<br><br><img src="http://images.cnitblog.com/i/294743/201403/112025532554110.png" alt=""><br><br>三个文件被压缩成了一个，但是没有压缩，所以，我们这里再加一步操作，将之压缩后再合并<br></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  // 项目配置</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class="line">    concat: &#123;</div><div class="line">      options: &#123;</div><div class="line">        separator: &apos;;&apos;</div><div class="line">      &#125;,</div><div class="line">      dist: &#123;</div><div class="line">        src: [&apos;src/zepto.js&apos;, &apos;src/underscore.js&apos;, &apos;src/backbone.js&apos;],</div><div class="line">        dest: &apos;dest/libs.js&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    uglify: &#123;</div><div class="line">      build: &#123;</div><div class="line">        src: &apos;dest/libs.js&apos;,</div><div class="line">        dest: &apos;dest/libs.min.js&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);</div><div class="line">  // 默认任务</div><div class="line">  grunt.registerTask(&apos;default&apos;, [&apos;concat&apos;, &apos;uglify&apos;]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>我这里的做法是先合并形成一个libs，然后再将libs压缩成libs.min.js<br><br><br><img src="http://images.cnitblog.com/i/294743/201403/112027097063953.png" alt=""><br><br><br>所以我们这里换个做法，先压缩再合并，其实unglify已经干了这些事情了<br><br></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  // 项目配置</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class="line">    uglify: &#123;</div><div class="line">      &quot;my_target&quot;: &#123;</div><div class="line">        &quot;files&quot;: &#123;</div><div class="line">          &apos;dest/libs.min.js&apos;: [&apos;src/zepto.js&apos;, &apos;src/underscore.js&apos;, &apos;src/backbone.js&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);</div><div class="line">  // 默认任务</div><div class="line">  grunt.registerTask(&apos;default&apos;, [&apos;uglify&apos;]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，我们就暂时不去关注concat了</p>
<p>最后，今天时间不早了，我们最后研究下grunt配合require于是便结束今天的学习吧</p>
<h2 id="合并requireJS管理的文件"><a href="#合并requireJS管理的文件" class="headerlink" title="合并requireJS管理的文件"></a>合并requireJS管理的文件</h2><blockquote>
<p>有了前面基础后，我们来干一件平时很头疼的事情，便是将require管理的所有js文件给压缩了合并为一个文件<br><br><br>首先我们建立一个简单的程序，里面使用了zepto、backbone、underscore（事实上我并未使用什么）<br><br><br><img src="http://images.cnitblog.com/i/294743/201403/112028067046139.png" alt=""><br><br><br>在main.js中新增代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line"> baseUrl: &apos;&apos;,</div><div class="line"> shim: &#123;</div><div class="line">  $: &#123;</div><div class="line">      exports: &apos;zepto&apos;</div><div class="line">  &#125;,</div><div class="line">  _: &#123;</div><div class="line">   exports: &apos;_&apos;</div><div class="line">  &#125;,</div><div class="line">  B: &#123;</div><div class="line">   deps: [</div><div class="line">    &apos;_&apos;,</div><div class="line">    &apos;$&apos;</div><div class="line">     ],</div><div class="line">   exports: &apos;Backbone&apos;</div><div class="line">  &#125;</div><div class="line"> &#125;,</div><div class="line"> paths: &#123;</div><div class="line">  &apos;$&apos;: &apos;src/zepto&apos;,</div><div class="line">  &apos;_&apos;: &apos;src/underscore&apos;,</div><div class="line">  &apos;B&apos;: &apos;src/backbone&apos;</div><div class="line"> &#125;</div><div class="line">&#125;);</div><div class="line">requirejs([&apos;B&apos;], function (b) &#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样的话运行会自动加载几个文件，我们现在希望将之合并为一个libs.js该怎么干呢？？？</p>
<p>我们这里使用自定义任务方法来做，因为我们好像没有介绍他</p>
<p>要使用requireJS相关需要插件     </p>
<pre><code>grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);
</code></pre><p>因为我们以后可能存在配置文件存在各个项目文件的情况，所以我们这里将requireJs相关的配置放入gruntCfg.json中</p>
<p>这样我们的package.json就没有什么实际意义了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;demo&quot;,</div><div class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;demo&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line"> &quot;grunt&quot;: &quot;~0.4.1&quot;,</div><div class="line"> &quot;grunt-contrib-jshint&quot;: &quot;~0.6.3&quot;,</div><div class="line"> &quot;grunt-contrib-concat&quot;: &quot;~0.3.0&quot;,</div><div class="line"> &quot;grunt-contrib-uglify&quot;: &quot;~0.2.1&quot;,</div><div class="line"> &quot;grunt-contrib-requirejs&quot;: &quot;~0.4.1&quot;,</div><div class="line"> &quot;grunt-contrib-copy&quot;: &quot;~0.4.1&quot;,</div><div class="line"> &quot;grunt-contrib-clean&quot;: &quot;~0.5.0&quot;,</div><div class="line"> &quot;grunt-strip&quot;: &quot;~0.2.1&quot;</div><div class="line"> </div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;express&quot;: &quot;3.x&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们这里设置的require相关的grunt配置文件如下（gruntCfg.json）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;requirejs&quot;: &#123;</div><div class="line">    &quot;main&quot;: &#123;</div><div class="line">      &quot;options&quot;: &#123;</div><div class="line">        &quot;baseUrl&quot;: &quot;&quot;,</div><div class="line">        &quot;paths&quot;: &#123;</div><div class="line">          &quot;$&quot;: &quot;src/zepto&quot;,</div><div class="line">          &quot;_&quot;: &quot;src/underscore&quot;,</div><div class="line">          &quot;B&quot;: &quot;src/backbone&quot;,</div><div class="line">          &quot;Test&quot;: &quot;src/Test&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;web&quot;: &#123;</div><div class="line">          &quot;include&quot;: [</div><div class="line">            &quot;$&quot;,</div><div class="line">            &quot;_&quot;,</div><div class="line">            &quot;B&quot;,</div><div class="line">            &quot;Test&quot;</div><div class="line">          ],</div><div class="line">          &quot;out&quot;: &quot;dest/libs.js&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们要打包这些文件搞到dest的libs.js文件中，这个文件照做就行，最后核心代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line">  //为了介绍自定义任务搞了一个这个</div><div class="line">  grunt.registerTask(&apos;build&apos;, &apos;require demo&apos;, function () &#123;</div><div class="line">    //任务列表</div><div class="line">    var tasks = [&apos;requirejs&apos;];</div><div class="line">    //源码文件</div><div class="line">    var srcDir = &apos;src&apos;;</div><div class="line">    //目标文件</div><div class="line">    var destDir = &apos;dest&apos;;</div><div class="line">    //设置参数</div><div class="line">    grunt.config.set(&apos;config&apos;, &#123;</div><div class="line">      srcDir: srcDir,</div><div class="line">      destDir: destDir</div><div class="line">    &#125;);</div><div class="line">    //设置requireJs的信息</div><div class="line">    var taskCfg = grunt.file.readJSON(&apos;gruntCfg.json&apos;);</div><div class="line">    var options = taskCfg.requirejs.main.options,</div><div class="line">        platformCfg = options.web,</div><div class="line">        includes = platformCfg.include,</div><div class="line">        paths = options.paths;</div><div class="line">    var pos = -1;</div><div class="line">    var requireTask = taskCfg.requirejs;</div><div class="line">    options.path = paths;</div><div class="line">    options.out = platformCfg.out;</div><div class="line">    options.include = includes;</div><div class="line">    //运行任务</div><div class="line">    grunt.task.run(tasks);</div><div class="line">    grunt.config.set(&quot;requirejs&quot;, requireTask);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>搞完了运行就好：grunt build</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt build</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/294743/201403/112029548774259.png" alt=""></p>
<p>最后发现叶小钗三字，我就放心了，安全！！！！！！</p>
<p>##配置任务/grunt.initConfig</p>
<p>前面我们简单的介绍了grunt相关的知识，这里我们这里还需要再熟悉下Gruntfile相关的知识点，比如说配置任务</p>
<p>grunt的任务配置都是在Gruntfile中的grunt.initConfig方法中指定的，这个配置主要都是一些命名性属性<br>比如我们上次用到的合并以及压缩的任务配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">    concat: &#123;</div><div class="line">        //这里是concat任务的配置信息</div><div class="line">    &#125;,</div><div class="line">    uglify: &#123;</div><div class="line">        //这里是uglify任务的配置信息</div><div class="line">    &#125;,</div><div class="line">    //任意非任务特定属性</div><div class="line">    my_property: &apos;whatever&apos;,</div><div class="line">    my_src_file: [&apos;foo/*.js&apos;, &apos;bar/*.js&apos;]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其中的my_property完全可能读取外部json配置文件，然后在上面任务配置中便可以，比如我们要压缩的文件为准或者最后要放到哪里，便可以在此配置</p>
<p>我们使用grunt的时候，主要工作就是配置任务或者创建任务，实际上就是做一个事件注册，然后由我们触发之，所以grunt的核心还是事件注册<br>每次运行grunt时，我们可以指定运行一个或者多个任务，通过任务决定要做什么，比如我们同时要压缩和合并还要做代码检查<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(&apos;default&apos;, [&apos;jshint&apos;,&apos;qunit&apos;,&apos;concat&apos;,&apos;uglify&apos;]);</div></pre></td></tr></table></figure></p>
<p>当运行一个基本任务时，grunt并不会查找配置和检查运行环境，他仅仅运行指定的任务函数，可以传递冒号分割参数，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(&apos;foo&apos;, &apos;A sample task that logs stuff.&apos;, function (arg1, arg2) &#123;</div><div class="line">  if (arguments.length === 0) &#123;</div><div class="line">    grunt.log.writeln(this.name + &quot;, no args&quot;);</div><div class="line">  &#125; else &#123;</div><div class="line">    grunt.log.writeln(this.name + &quot;, &quot; + arg1 + &quot; &quot; + arg2);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ grunt foo:testing:123</div><div class="line">Running &quot;foo:testing:123&quot; (foo) task</div><div class="line">foo, testing 123</div><div class="line"></div><div class="line">$ grunt foo:testing</div><div class="line">Running &quot;foo:testing&quot; (foo) task</div><div class="line">foo, testing undefined</div><div class="line"></div><div class="line">$ grunt foo</div><div class="line">Running &quot;foo&quot; task</div><div class="line">foo, no args</div></pre></td></tr></table></figure>
<p>这里有个多任务的情况，就是一个任务里面实际上第一了多个东东，这个时候就有所不同</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">    log: &#123;</div><div class="line">        demo01: [1,2,3],</div><div class="line">        demo02: &apos;hello world&apos;,</div><div class="line">        demo03: false</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">grunt.registerTask(&apos;log&apos;,&apos;log stuff.&apos;, function()&#123;</div><div class="line">    grunt.log.writeln(this.target + &apos;: &apos; + this.data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果我们运行，运行情况如下：</p>
<p>???????</p>
<p>更多时候，我们实际场景中都会需要自定义任务，而在我们任务内部使用 grunt.task.run({}) 运行任务<br>这块的知识点，我们后面以实际例子说明</p>
<h2 id="grunt插件"><a href="#grunt插件" class="headerlink" title="grunt插件"></a>grunt插件</h2><p>学习grunt主要就是学习grunt的插件使用，所以我们今天先来学习常用的几个插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt-contrib-unglify</div></pre></td></tr></table></figure>
<p>我们仍然以简单例子学习</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    uglify: &#123;</div><div class="line">      my_target: &#123;</div><div class="line">        files: &#123;</div><div class="line">          &apos;dest/libs.min.js&apos;: [&apos;src/zepto.js&apos;, &apos;src/underscoce.js&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样会将src里面的zepto等文件打包值dest的lib.min.js中</p>
<p><strong>压缩一个文件夹的所有文件</strong></p>
<p>然后这段代码非常有意思，他会将一个文件目录里面的所有js文件打包到另一个文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    uglify: &#123;</div><div class="line">      my_target: &#123;</div><div class="line">        files: [&#123;</div><div class="line">          expand: true,</div><div class="line">          cwd: &apos;src&apos;,</div><div class="line">          src: &apos;**/*.js&apos;,</div><div class="line">          dest: &apos;dest&apos;</div><div class="line">        &#125;]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-uglify&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/294743/201403/151430462467839.png" alt=""></p>
<p>若是你希望给你文件的头部加一段注释性语言配置banner信息即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  pkg: grunt.file.readJSON(&apos;package.json&apos;),</div><div class="line">  uglify: &#123;</div><div class="line">    options: &#123;</div><div class="line">      banner: &apos;/*! 注释信息 */&apos;</div><div class="line">    &#125;,</div><div class="line">    my_target: &#123;</div><div class="line">      files: &#123;</div><div class="line">        &apos;dest/output.min.js&apos;: [&apos;src/input.js&apos;]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt-contrib-concat</div></pre></td></tr></table></figure>
<blockquote>
<p>该插件主要用于代码合并，将多个文件合并为一个，我们前面的uglify也提供了一定合并的功能<br>在可选属性中我们可以设置以下属性：<br><br>① separator 用于分割各个文件的文字，<br><br>② banner 前面说到的文件头注释信息，只会出现一次<br><br>③ footer 文件尾信息，只会出现一次<br><br>④ stripBanners去掉源代码注释信息（只会清楚/**/这种注释）<br></p>
</blockquote>
<p>一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">  concat: &#123;</div><div class="line">    options: &#123;</div><div class="line">      separator: &apos;/*分割*/&apos;,</div><div class="line">      banner: &apos;/*测试*/&apos;,</div><div class="line">      footer: &apos;/*footer*/&apos;</div><div class="line">     </div><div class="line">    &#125;,</div><div class="line">    dist: &#123;</div><div class="line">      src: [&apos;src/zepto.js&apos;, &apos;src/underscore.js&apos;, &apos;src/backbone.js&apos;],</div><div class="line">      dest: &apos;dist/built.js&apos;,</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>合并三个文件为一个，这种在我们源码调试时候很有意义</p>
<p><strong>构建两个文件夹</strong></p>
<p>有时候我们可能需要将合并的代码放到不同的文件，这个时候可以这样干<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    concat: &#123;</div><div class="line">      basic: &#123;</div><div class="line">        src: [&apos;src/zepto.js&apos;],</div><div class="line">        dest: &apos;dest/basic.js&apos;</div><div class="line">      &#125;,</div><div class="line">      extras: &#123;</div><div class="line">        src: [&apos;src/underscore.js&apos;, &apos;src/backbone.js&apos;],</div><div class="line">        dest: &apos;dest/with_extras.js&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种功能还有这样的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    concat: &#123;</div><div class="line">      basic_and_extras: &#123;</div><div class="line">        files: &#123;</div><div class="line">          &apos;dist/basic.js&apos;: [&apos;src/test.js&apos;, &apos;src/zepto.js&apos;],</div><div class="line">          &apos;dist/with_extras.js&apos;: [&apos;src/underscore.js&apos;, &apos;src/backbone.js&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种写法便于使用配置文件，具体各位选取吧，至于读取配置文件的东西我们这里就先不关注了</p>
<pre><code>grunt-contrib-jshint
</code></pre><p>该插件用于检测文件中的js语法问题，比如我test.js是这样写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;我是叶小钗&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    jshint: &#123; </div><div class="line">      all: [&apos;src/test.js&apos;]</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-jshint&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ grunt jshint</div><div class="line">Running &quot;jshint:all&quot; (jshint) task</div><div class="line">Linting src/test.js ...ERROR</div><div class="line">[L1:C15] W033: Missing semicolon.</div><div class="line">alert(&apos;我是叶小钗&apos;)</div></pre></td></tr></table></figure>
<p>说我缺少一个分号，好像确实缺少…..如果在里面写明显的BUG的话会报错<br>多数时候，我们认为没有分号无伤大雅，所以，我们文件会忽略这个错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">jshint: &#123;</div><div class="line">  options: &#123;</div><div class="line">    &apos;-W033&apos;: true</div><div class="line">  &#125;,</div><div class="line">  all: [&apos;src/test.js&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有一个稍微复杂的应用，就是我们合并之前做一次检查，合并之后再做一次检查，我们可以这样写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    concat: &#123;</div><div class="line">      dist: &#123;</div><div class="line">        src: [&apos;src/test01.js&apos;, &apos;src/test02.js&apos;],</div><div class="line">        dest: &apos;dist/output.js&apos;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    jshint: &#123;</div><div class="line">      options: &#123;</div><div class="line">        &apos;-W033&apos;: true </div><div class="line">      &#125;,</div><div class="line">      pre: [&apos;src/test01.js&apos;, &apos;src/test02.js&apos;],</div><div class="line">      after: [&apos;dist/output.js&apos;]</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-concat&apos;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-jshint&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ grunt jshint:pre concat jshint:after</div><div class="line">Running &quot;jshint:pre&quot; (jshint) task</div><div class="line">&gt;&gt; 2 files lint free.</div><div class="line">Running &quot;concat:dist&quot; (concat) task</div><div class="line">File &quot;dist/output.js&quot; created.</div><div class="line">Running &quot;jshint:after&quot; (jshint) task</div><div class="line">&gt;&gt; 1 file lint free.</div></pre></td></tr></table></figure>
<p>这里连续运行了三个任务，先做检查再合并，然后做检测，我这里写了两个简单的文件，如果将jquery搞进去的话，好像还出了不少BUG……<br>所以真的要用它还要自定一些规范，我们这里暂时到这里，先进入下一个插件学习</p>
<pre><code>grunt-contrib-requirejs
</code></pre><p>我们的grunt打包程序极有可能与requirejs一起使用，但是几个插件学习下来又属requireJs的使用最为麻烦，因为网上资源很少，搞到这一段耗掉了我很多精力</p>
<p>这个时候你就会感叹，英语好不一定编程好，英语差想成为高手还是不简单啊！！！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">requirejs: &#123;</div><div class="line">  compile: &#123;</div><div class="line">    options: &#123;</div><div class="line">      baseUrl: &quot;path/to/base&quot;,</div><div class="line">      mainConfigFile: &quot;path/to/config.js&quot;,</div><div class="line">      name: &quot;path/to/almond&quot;, // assumes a production build using almond</div><div class="line">      out: &quot;path/to/optimized.js&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官方的例子首先就是这几个属性：</p>
<p>baseUrl 代表所有的js文件都会相对于这个目录<br></p>
<p>mainConfigFile 配置文件目录<br></p>
<p>name ？？？<br></p>
<p>out 输出文件<br></p>
<p>一些参数我们不太了解，这个时候就只能以例子破之了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    requirejs: &#123;</div><div class="line">      compile: &#123;</div><div class="line">        &quot;options&quot;: &#123;</div><div class="line">          &quot;baseUrl&quot;: &quot;./&quot;,</div><div class="line">          &quot;paths&quot;: &#123;</div><div class="line">            &quot;$&quot;: &quot;src/zepto&quot;,</div><div class="line">            &quot;_&quot;: &quot;src/underscore&quot;,</div><div class="line">            &quot;B&quot;: &quot;src/backbone&quot;,</div><div class="line">            &quot;Test&quot;: &quot;src/Test01&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;include&quot;: [</div><div class="line">            &quot;$&quot;,</div><div class="line">            &quot;_&quot;,</div><div class="line">            &quot;B&quot;,</div><div class="line">            &quot;Test&quot;</div><div class="line">          ],</div><div class="line">          &quot;out&quot;: &quot;dest/libs.js&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/294743/201403/151512568713886.png" alt=""></p>
<p>这样配置后，会将include里面的文件打包为out对应的文件，paths的本身意义不大，就是用于配置include里面的指向</p>
<p>这个时候我们来加个name看看有神马作用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    requirejs: &#123;</div><div class="line">      compile: &#123;</div><div class="line">        &quot;options&quot;: &#123;</div><div class="line">          &quot;baseUrl&quot;: &quot;./&quot;,</div><div class="line">          &quot;name&quot;: &apos;src/test02.js&apos;,</div><div class="line">          &quot;paths&quot;: &#123;</div><div class="line">            &quot;$&quot;: &quot;src/zepto&quot;,</div><div class="line">            &quot;_&quot;: &quot;src/underscore&quot;,</div><div class="line">            &quot;B&quot;: &quot;src/backbone&quot;,</div><div class="line">            &quot;Test&quot;: &quot;src/Test01&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;include&quot;: [</div><div class="line">            &quot;$&quot;,</div><div class="line">            &quot;_&quot;,</div><div class="line">            &quot;B&quot;,</div><div class="line">            &quot;Test&quot;</div><div class="line">          ],</div><div class="line">          &quot;out&quot;: &quot;dest/libs.js&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，这里我们便不是有initConfig的做法了，直接使用自定义任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line"></div><div class="line">  grunt.registerTask(&apos;build&apos;, &apos;require demo&apos;, function () &#123;</div><div class="line"></div><div class="line">    //第一步，读取配置信息</div><div class="line">    var cfg = grunt.file.readJSON(&apos;cfg.json&apos;);</div><div class="line">    cfg = cfg.requirejs;</div><div class="line">    grunt.config.set(&apos;requirejs&apos;, &#123; test: cfg &#125;);</div><div class="line"></div><div class="line">    //第二步，设置参数</div><div class="line">    grunt.log.debug(&apos;参数：&apos; + JSON.stringify(grunt.config()));</div><div class="line"></div><div class="line">    //第三步跑任务</div><div class="line">    grunt.task.run([&apos;requirejs&apos;]);</div><div class="line">    </div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ grunt build --debug</div><div class="line">Running &quot;build&quot; task</div><div class="line">[D] Task source: d:\grunt\Gruntfile.js</div><div class="line">[D] 参数：&#123;&quot;requirejs&quot;:&#123;&quot;test&quot;:&#123;&quot;options&quot;:&#123;&quot;baseUrl&quot;:&quot;./&quot;,&quot;paths&quot;:&#123;&quot;$&quot;:&quot;src/zept</div><div class="line">o&quot;,&quot;_&quot;:&quot;src/underscore&quot;,&quot;B&quot;:&quot;src/backbone&quot;,&quot;Test&quot;:&quot;src/Test01&quot;&#125;,&quot;include&quot;:[&quot;$&quot;,&quot;</div><div class="line">_&quot;,&quot;B&quot;,&quot;Test&quot;],&quot;out&quot;:&quot;dest/libs.js&quot;&#125;&#125;&#125;&#125;</div><div class="line"></div><div class="line">Running &quot;requirejs:test&quot; (requirejs) task</div><div class="line">[D] Task source: d:\grunt\node_modules\grunt-contrib-requirejs\tasks\requirejs.j</div><div class="line">s</div><div class="line">&gt;&gt; Tracing dependencies for: d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; Uglifying file: d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; ----------------</div><div class="line">&gt;&gt; d:/grunt/src/zepto.js</div><div class="line">&gt;&gt; d:/grunt/src/underscore.js</div><div class="line">&gt;&gt; d:/grunt/src/backbone.js</div><div class="line">&gt;&gt; d:/grunt/src/Test01.js</div></pre></td></tr></table></figure></p>
<p>效果还是有的，最后我们介绍下requireJS打包模板文件</p>
<p>##require与模板文件</p>
<blockquote>
<p>我们知道，模板文件一般都是html，比如我们这里的demo01.html，对于这个文件我们应该怎么打包呢？其实很简单……<br>需要干两件事情：<br><br>① 引入require.text<br><br>② 加入模板文件<br></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;requirejs&quot;: &#123;</div><div class="line">    &quot;options&quot;: &#123;</div><div class="line">      &quot;baseUrl&quot;: &quot;./&quot;,</div><div class="line">      &quot;paths&quot;: &#123;</div><div class="line">        &quot;$&quot;: &quot;src/zepto&quot;,</div><div class="line">        &quot;_&quot;: &quot;src/underscore&quot;,</div><div class="line">        &quot;B&quot;: &quot;src/backbone&quot;,</div><div class="line">        &quot;test&quot;: &quot;src/test01&quot;,</div><div class="line">        &quot;text&quot;: &quot;src/require.text&quot;</div><div class="line"></div><div class="line">      &#125;,</div><div class="line">      &quot;include&quot;: [</div><div class="line">        &quot;$&quot;,</div><div class="line">        &quot;_&quot;,</div><div class="line">        &quot;B&quot;,</div><div class="line">        &quot;test&quot;,</div><div class="line">        &quot;text!src/demo01.html&quot;</div><div class="line">      ],</div><div class="line">      &quot;out&quot;: &quot;dest/libs.js&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>于是，我们便成功将模板打入了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ grunt build --debug</div><div class="line">Running &quot;build&quot; task</div><div class="line">[D] Task source: d:\grunt\Gruntfile.js</div><div class="line">[D] 参数：&#123;&quot;requirejs&quot;:&#123;&quot;test&quot;:&#123;&quot;options&quot;:&#123;&quot;baseUrl&quot;:&quot;./&quot;,&quot;paths&quot;:&#123;&quot;$&quot;:&quot;src/zept</div><div class="line">o&quot;,&quot;_&quot;:&quot;src/underscore&quot;,&quot;B&quot;:&quot;src/backbone&quot;,&quot;test&quot;:&quot;src/test01&quot;,&quot;text&quot;:&quot;src/requi</div><div class="line">re.text&quot;&#125;,&quot;include&quot;:[&quot;$&quot;,&quot;_&quot;,&quot;B&quot;,&quot;test&quot;,&quot;text!src/demo01.html&quot;],&quot;out&quot;:&quot;dest/libs</div><div class="line">.js&quot;&#125;&#125;&#125;&#125;</div><div class="line"></div><div class="line">Running &quot;requirejs:test&quot; (requirejs) task</div><div class="line">[D] Task source: d:\grunt\node_modules\grunt-contrib-requirejs\tasks\requirejs.j</div><div class="line">s</div><div class="line">&gt;&gt; Tracing dependencies for: d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; Uglifying file: d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; ----------------</div><div class="line">&gt;&gt; d:/grunt/src/zepto.js</div><div class="line">&gt;&gt; d:/grunt/src/underscore.js</div><div class="line">&gt;&gt; d:/grunt/src/backbone.js</div><div class="line">&gt;&gt; d:/grunt/src/test01.js</div><div class="line">&gt;&gt; d:/grunt/src/require.text.js</div><div class="line">&gt;&gt; text!src/demo01.html</div></pre></td></tr></table></figure>
<p>在文件中我们引用方式是：</p>
<pre><code>&quot;text!src/demo01.html&quot; =&gt; &apos;具体文件&apos;

过滤关键字
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    requirejs: &#123;</div><div class="line">      compile: &#123;</div><div class="line">        &quot;options&quot;: &#123;</div><div class="line">          optimize: &apos;uglify2&apos;,</div><div class="line">          uglify2: &#123;</div><div class="line">            mangle: &#123;</div><div class="line">              except: [&quot;$super&quot;]</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &quot;baseUrl&quot;: &quot;./&quot;,</div><div class="line">          &quot;paths&quot;: &#123;</div><div class="line">            &quot;UIAbstractView&quot;: &quot;ui_beta/ui.abstract.view&quot;,</div><div class="line">            &quot;UILayer&quot;: &quot;ui_beta/ui.layer&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;include&quot;: [</div><div class="line">            &quot;UIAbstractView&quot;</div><div class="line">          ],</div><div class="line">          &quot;out&quot;: &quot;dest/libs.js&quot;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line">  grunt.registerTask(&apos;default&apos;, [&apos;requirejs&apos;]);</div></pre></td></tr></table></figure>
<p>##打包样式文件</p>
<p>样式文件的打包方式与js不太一样，这里我们下载css-min插件，并且在package.json中新增依赖项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;demo&quot;,</div><div class="line">  &quot;version&quot;:         &quot;0.1.0&quot;,</div><div class="line">  &quot;description&quot;:     &quot;demo&quot;,</div><div class="line">  &quot;license&quot;:         &quot;MIT&quot;,</div><div class="line">  &quot;devDependencies&quot;: &#123;</div><div class="line">    &quot;grunt&quot;:                   &quot;~0.4.1&quot;,</div><div class="line">    &quot;grunt-contrib-jshint&quot;:    &quot;~0.6.3&quot;,</div><div class="line">    &quot;grunt-contrib-concat&quot;:    &quot;~0.3.0&quot;,</div><div class="line">    &quot;grunt-contrib-uglify&quot;:    &quot;~0.2.1&quot;,</div><div class="line">    &quot;grunt-contrib-requirejs&quot;: &quot;~0.4.1&quot;,</div><div class="line">    &quot;grunt-contrib-copy&quot;:      &quot;~0.4.1&quot;,</div><div class="line">    &quot;grunt-contrib-clean&quot;:     &quot;~0.5.0&quot;,</div><div class="line">    &quot;grunt-strip&quot;:             &quot;~0.2.1&quot;,</div><div class="line">    &quot;grunt-contrib-watch&quot;: &quot;~0.6.0&quot;,</div><div class="line">    &quot;grunt-contrib-cssmin&quot;: &quot;~0.5.0&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;dependencies&quot;:    &#123;</div><div class="line">    &quot;express&quot;: &quot;3.x&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<br>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line">  grunt.initConfig(&#123;</div><div class="line">    cssmin: &#123;</div><div class="line">      compress: &#123;</div><div class="line">        files: &#123;</div><div class="line">          &apos;dest/car.min.css&apos;: [</div><div class="line">          &quot;src/car.css&quot;,</div><div class="line">          &quot;src/car01.css&quot;</div><div class="line">        ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-cssmin&apos;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此一来我们便可以压缩合并CSS文件了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">	$ grunt cssmin --debug</div><div class="line">	Running &quot;cssmin:compress&quot; (cssmin) task</div><div class="line">	[D] Task source: d:\grunt\node_modules\grunt-contrib-cssmin\tasks\cssmin.js</div><div class="line">	File dest/car.min.css created.	</div><div class="line">```	</div><div class="line">##移动打包文件</div><div class="line"></div><div class="line">&gt;其实，grunt本身具有这样的功能，但是我们实际项目重会出现这种可能：&lt;br /&gt;</div><div class="line">我们核心框架会有一套压缩代码，并且会在对应目录生成文件用于发布，但是这个地方的权限对各个频道团队是不可见的&lt;br /&gt;</div><div class="line">所以，我们在各个频道的公共文件夹内应该将刚刚的文件给复制过去，这块代码其实很简单，不需要任何新知识都能实现：&lt;br /&gt;</div><div class="line">我们这里依旧采用昨天的require相关的代码，但是一有个不同的地方就是，我们要同时在D盘的common文件夹中生成该文件&lt;br /&gt;</div><div class="line">这个代码其实比较简单，这里我们先介绍一个新的插件copy&lt;br /&gt;</div><div class="line"></div><div class="line">	grunt-contrib-copy</div><div class="line">	</div><div class="line">该插件用于复制文件到你想要的文件夹处</div></pre></td></tr></table></figure>
<pre><code>grunt.initConfig({ copy: {
  main: {
    flatten: true,
    src: &apos;src/*.js&apos;,
    dest: &apos;dest/&apos;
  }
}
});
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这段代码就会将src中的js文件搞到dest里面，并且新建src文件夹：</div><div class="line">	</div><div class="line">```	</div><div class="line">	$ grunt copy</div><div class="line">	Running &quot;copy:main&quot; (copy) task</div><div class="line">	Copied 7 files</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/294743/201403/161354551832280.png" alt=""></p>
<p>若是不想复制文件夹只要文件应该这样干：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123; copy: &#123;</div><div class="line">  main: &#123;</div><div class="line">    flatten: true,</div><div class="line">    //    filter: &apos;isFile&apos;,</div><div class="line">    expand: true,</div><div class="line">    src: &apos;src/**.js&apos;,</div><div class="line">    dest: &apos;dest/&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这块完了，我们就来移动打包文件至D盘了</p>
<p><strong>移动打包文件</strong></p>
<p>这个时候代码这样写就好（也许移动前我们还想将其文件夹里面的东西销毁，暂时不考虑了）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line"></div><div class="line">  grunt.initConfig(&#123; copy: &#123;</div><div class="line">    main: &#123;</div><div class="line">      //      flatten: true,</div><div class="line">      //      expand: true,</div><div class="line">      src: &apos;dest/**.js&apos;,</div><div class="line">      dest: &apos;d:/common/&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-copy&apos;);</div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line"></div><div class="line">  grunt.registerTask(&apos;build&apos;, &apos;require demo&apos;, function () &#123;</div><div class="line"></div><div class="line">    //第一步，读取配置信息</div><div class="line">    var cfg = grunt.file.readJSON(&apos;cfg.json&apos;);</div><div class="line">    cfg = cfg.requirejs;</div><div class="line">    grunt.config.set(&apos;requirejs&apos;, &#123; test: cfg &#125;);</div><div class="line"></div><div class="line">    //第二步，设置参数</div><div class="line">    grunt.log.debug(&apos;参数：&apos; + JSON.stringify(grunt.config()));</div><div class="line"></div><div class="line">    //第三步跑任务</div><div class="line">    grunt.task.run([&apos;requirejs&apos;]);</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.registerTask(&apos;default&apos;, &apos;test demo&apos;, [&apos;build&apos;, &apos;copy&apos;]);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Running &quot;build&quot; task</div><div class="line"></div><div class="line">Running &quot;requirejs:test&quot; (requirejs) task</div><div class="line">&gt;&gt; Tracing dependencies for: d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; Uglifying file: d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; d:/grunt/dest/libs.js</div><div class="line">&gt;&gt; ----------------</div><div class="line">&gt;&gt; d:/grunt/src/zepto.js</div><div class="line">&gt;&gt; d:/grunt/src/underscore.js</div><div class="line">&gt;&gt; d:/grunt/src/backbone.js</div><div class="line">&gt;&gt; d:/grunt/src/test01.js</div><div class="line">&gt;&gt; d:/grunt/src/require.text.js</div><div class="line">&gt;&gt; text!src/demo01.html</div><div class="line"></div><div class="line">Running &quot;copy:main&quot; (copy) task</div><div class="line">Copied 8 files</div></pre></td></tr></table></figure></p>
<p><img src="http://images.cnitblog.com/i/294743/201403/161405554656860.png" alt=""></p>
<p>关于移动相关的知识点暂时介绍到这里，我们进入下一话题</p>
<p>##分支/频道处理</p>
<blockquote>
<p>我们在实际项目重会遇到这种情况，我们一个主干分支上可能拉出很多分支完成不同的功能，而各个分支就有那么一点点不同，那么这个时候打包工具该怎么办呢？<br><br>我们一般是这样处理的：<br><br>① 首先全局只会有一个打包工具<br><br>② 其次每一个分支都会有一个gruntCfg.json的配置文件，存储相关的打包信息<br><br>③ 每次打包时候便把响应的分支打印到各自的dest目录里面<br><br>为了模拟这一情况我们将grunt打包相关的文件放到D盘的grunt目录里面，并在D盘新建gruntDemo目录<br><br>然后我们在gruntDemo中建立一个项目，并且为这个项目拉一个分支，比如现在项目是地demo01与demo02<br><br>现在文件结构如下：<br></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">D:\GRUNTDEMO</div><div class="line">├─demo01</div><div class="line">│  │  gruntCfg.json</div><div class="line">│  │</div><div class="line">│  └─src</div><div class="line">│          backbone.js</div><div class="line">│          require.js</div><div class="line">│          require.text.js</div><div class="line">│          test01.js</div><div class="line">│          test02.js</div><div class="line">│          underscore.js</div><div class="line">│          zepto.js</div><div class="line">│</div><div class="line">└─demo02</div><div class="line">    │  gruntCfg.json</div><div class="line">    │</div><div class="line">    └─src</div><div class="line">            backbone.js</div><div class="line">            require.js</div><div class="line">            require.text.js</div><div class="line">            test01.js</div><div class="line">            test02.js</div><div class="line">            underscore.js</div><div class="line">            zepto.js</div></pre></td></tr></table></figure>
<p>这个时候，要实现功能最好的方法就是写自定义任务了，其它方案不好使，这个时候起配置文件也需要有一定修改，比如其中的路径需要加入参数信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;requirejs&quot;: &#123;</div><div class="line">    &quot;options&quot;: &#123;</div><div class="line">      &quot;baseUrl&quot;: &quot;&lt;%= config.srcDir %&gt;&quot;,</div><div class="line">      &quot;paths&quot;: &#123;</div><div class="line">        &quot;$&quot;: &quot;src/zepto&quot;,</div><div class="line">        &quot;_&quot;: &quot;src/underscore&quot;,</div><div class="line">        &quot;B&quot;: &quot;src/backbone&quot;,</div><div class="line">        &quot;test&quot;: &quot;src/test01&quot;,</div><div class="line">        &quot;text&quot;: &quot;src/require.text&quot;</div><div class="line"></div><div class="line">      &#125;,</div><div class="line">      &quot;include&quot;: [</div><div class="line">        &quot;$&quot;,</div><div class="line">        &quot;_&quot;,</div><div class="line">        &quot;B&quot;,</div><div class="line">        &quot;test&quot;,</div><div class="line">        &quot;text!src/demo01.html&quot;</div><div class="line">        ],</div><div class="line">        &quot;out&quot;: &quot;&lt;%= config.destDir %&gt;/libs.js&quot;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候initConfig相关信息时候，首先得传入path依赖的文件目录，以及输出的文件目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line"></div><div class="line">  //channel为频道名称，project为项目名称，这里对应gruntDemo，branch为其分支，默认与grunt目录为平行关系，佛则package.json里面应该有配置信息</div><div class="line">  grunt.registerTask(&apos;build&apos;, &apos;require demo&apos;, function (channel, project, branch) &#123;</div><div class="line"></div><div class="line">    var path = &apos;../&apos; + channel + &apos;/&apos; + project + branch;</div><div class="line">    grunt.log.debug(&apos;path: &apos; + path);</div><div class="line"></div><div class="line">    //第一步，读取配置信息</div><div class="line">    var cfg = grunt.file.readJSON(path + &apos;/gruntCfg.json&apos;);</div><div class="line">    cfg = cfg.requirejs;</div><div class="line"></div><div class="line">    grunt.config.set(&apos;config&apos;, &#123;</div><div class="line">      srcDir: path,</div><div class="line">      destDir: path + &apos;/dest&apos;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    grunt.config.set(&apos;requirejs&apos;, &#123; main: cfg &#125;);</div><div class="line"></div><div class="line">    //第二步，设置参数</div><div class="line">    grunt.log.debug(&apos;param: &apos; + JSON.stringify(grunt.config()));</div><div class="line"></div><div class="line">    //第三步跑任务</div><div class="line">    grunt.task.run([&apos;requirejs&apos;]);</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.registerTask(&apos;default&apos;, &apos;test demo&apos;, [&apos;build&apos;, &apos;copy&apos;]);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>于是我们第一步工作成功了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ grunt build:gruntDemo:demo:02 --debug</div><div class="line">Running &quot;build:gruntDemo:demo:02&quot; (build) task</div><div class="line">[D] Task source: d:\grunt\Gruntfile.js</div><div class="line">[D] path: ../gruntDemo/demo02</div><div class="line">[D] param: &#123;&quot;config&quot;:&#123;&quot;srcDir&quot;:&quot;../gruntDemo/demo02&quot;,&quot;destDir&quot;:&quot;../gruntDemo/dem</div><div class="line">o02/dest&quot;&#125;,&quot;requirejs&quot;:&#123;&quot;main&quot;:&#123;&quot;options&quot;:&#123;&quot;baseUrl&quot;:&quot;../gruntDemo/demo02&quot;,&quot;path</div><div class="line">s&quot;:&#123;&quot;$&quot;:&quot;src/zepto&quot;,&quot;_&quot;:&quot;src/underscore&quot;,&quot;B&quot;:&quot;src/backbone&quot;,&quot;test&quot;:&quot;src/test01&quot;,</div><div class="line">&quot;text&quot;:&quot;src/require.text&quot;&#125;,&quot;include&quot;:[&quot;$&quot;,&quot;_&quot;,&quot;B&quot;,&quot;test&quot;,&quot;text!src/demo01.html&quot;]</div><div class="line">,&quot;out&quot;:&quot;../gruntDemo/demo02/dest/libs.js&quot;&#125;&#125;&#125;&#125;</div><div class="line"></div><div class="line">Running &quot;requirejs:main&quot; (requirejs) task</div><div class="line">[D] Task source: d:\grunt\node_modules\grunt-contrib-requirejs\tasks\requirejs.j</div><div class="line">s</div><div class="line">&gt;&gt; Tracing dependencies for: d:/gruntDemo/demo02/dest/libs.js</div><div class="line">&gt;&gt; Uglifying file: d:/gruntDemo/demo02/dest/libs.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo02/dest/libs.js</div><div class="line">&gt;&gt; ----------------</div><div class="line">&gt;&gt; d:/gruntDemo/demo02/src/zepto.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo02/src/underscore.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo02/src/backbone.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo02/src/test01.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo02/src/require.text.js</div><div class="line">&gt;&gt; text!src/demo01.html</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/294743/201403/161444135745409.png" alt=""></p>
<p>如果改变一下任务命令呢：</p>
<pre><code>grunt build:gruntDemo:demo:01 --debug
</code></pre><p>结果证明也是没有问题的，这个地方我就不贴出来了，各位自己去试试，我们分支处理一块暂时到这里</p>
<p>频道处理其实我们这里已经做了，第一个参数是频道，第二个参数是项目，第三个参数为分支，所以频道相关我们暂时就不说了</p>
<p>##native与HTML5打包</p>
<p>最后让我们来看看如何打包native文件，native文件的打包其实与打包HTML5的方式类似，只不过我们这里需要一点点配置，让一个项目可以打包成不同的效果</p>
<p>仍然以上面demo01为例，他的配置文件可能就需要做一定调整：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;requirejs&quot;: &#123;</div><div class="line">        &quot;options&quot;: &#123;</div><div class="line">            &quot;baseUrl&quot;: &quot;&lt;%= config.srcDir %&gt;&quot;, </div><div class="line">            &quot;paths&quot;: &#123;</div><div class="line">                &quot;$&quot;: &quot;src/zepto&quot;, </div><div class="line">                &quot;_&quot;: &quot;src/underscore&quot;, </div><div class="line">                &quot;B&quot;: &quot;src/backbone&quot;, </div><div class="line">                &quot;test&quot;: &quot;src/test01&quot;, </div><div class="line">                &quot;text&quot;: &quot;src/require.text&quot;</div><div class="line">            &#125;, </div><div class="line">            &quot;web&quot;: &#123;</div><div class="line">                &quot;include&quot;: [</div><div class="line">                    &quot;$&quot;, </div><div class="line">                    &quot;_&quot;, </div><div class="line">                    &quot;B&quot;, </div><div class="line">                    &quot;test&quot;</div><div class="line">                ], </div><div class="line">                &quot;out&quot;: &quot;&lt;%= config.destDir %&gt;/libs.js&quot;</div><div class="line">            &#125;, </div><div class="line">            &quot;app&quot;: &#123;</div><div class="line">                &quot;include&quot;: [</div><div class="line">                    &quot;$&quot;, </div><div class="line">                    &quot;_&quot;, </div><div class="line">                    &quot;B&quot;, </div><div class="line">                    &quot;test&quot;, </div><div class="line">                    &quot;text!src/demo01.html&quot;</div><div class="line">                ], </div><div class="line">                &quot;out&quot;: &quot;&lt;%= config.destDir %&gt;/libs_app.js&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里为了表现一点web与native的不同，我特意将web中少包含一个text文件，具体还得各位项目中去实践</p>
<p>如此一来，我们的代码需要做些许调整：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">module.exports = function (grunt) &#123;</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(&apos;grunt-contrib-requirejs&apos;);</div><div class="line"></div><div class="line">  //type 打包app包还是web包，channel为频道名称，project为项目名称，这里对应gruntDemo，branch为其分支，默认与grunt目录为平行关系，佛则package.json里面应该有配置信息</div><div class="line">  grunt.registerTask(&apos;build&apos;, &apos;require demo&apos;, function (type, channel, project, branch) &#123;</div><div class="line"></div><div class="line">    var path = &apos;../&apos; + channel + &apos;/&apos; + project + branch;</div><div class="line">    grunt.log.debug(&apos;path: &apos; + path);</div><div class="line"></div><div class="line">    //第一步，读取配置信息</div><div class="line">    var cfg = grunt.file.readJSON(path + &apos;/gruntCfg.json&apos;);</div><div class="line">    cfg = cfg.requirejs.options;</div><div class="line"></div><div class="line">    grunt.config.set(&apos;config&apos;, &#123;</div><div class="line">      srcDir: path,</div><div class="line">      destDir: path + &apos;/dest&apos;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    grunt.log.debug(&apos;param: &apos; + JSON.stringify(cfg));</div><div class="line">    grunt.log.debug(&apos;param: &apos; + cfg[type][&apos;include&apos;]);</div><div class="line"></div><div class="line"></div><div class="line">    var taskCfg = &#123;&#125;;</div><div class="line">    taskCfg.options = &#123;&#125;;</div><div class="line">    taskCfg.options.baseUrl = cfg.baseUrl;</div><div class="line">    taskCfg.options.paths = cfg.paths;</div><div class="line">    taskCfg.options[&apos;include&apos;] = cfg[type][&apos;include&apos;];</div><div class="line">    taskCfg.options.out = cfg[type].out;</div><div class="line"></div><div class="line"></div><div class="line">    grunt.config.set(&apos;requirejs&apos;, &#123; main: taskCfg &#125;);</div><div class="line"></div><div class="line">    //第二步，设置参数</div><div class="line">    grunt.log.debug(&apos;param: &apos; + JSON.stringify(grunt.config()));</div><div class="line"></div><div class="line">    //第三步跑任务</div><div class="line">    grunt.task.run([&apos;requirejs&apos;]);</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.registerTask(&apos;default&apos;, &apos;test demo&apos;, [&apos;build&apos;, &apos;copy&apos;]);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>于是便可以运行了！！！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$ grunt build:app:gruntDemo:demo:01 --debug</div><div class="line">Running &quot;build:app:gruntDemo:demo:01&quot; (build) task</div><div class="line">[D] Task source: d:\grunt\Gruntfile.js</div><div class="line">[D] path: ../gruntDemo/demo01</div><div class="line">[D] param: &#123;&quot;baseUrl&quot;:&quot;&lt;%= config.srcDir %&gt;&quot;,&quot;paths&quot;:&#123;&quot;$&quot;:&quot;src/zepto&quot;,&quot;_&quot;:&quot;src/u</div><div class="line">nderscore&quot;,&quot;B&quot;:&quot;src/backbone&quot;,&quot;test&quot;:&quot;src/test01&quot;,&quot;text&quot;:&quot;src/require.text&quot;&#125;,&quot;we</div><div class="line">b&quot;:&#123;&quot;include&quot;:[&quot;$&quot;,&quot;_&quot;,&quot;B&quot;,&quot;test&quot;],&quot;out&quot;:&quot;&lt;%= config.destDir %&gt;/libs.js&quot;&#125;,&quot;app&quot;:</div><div class="line">&#123;&quot;include&quot;:[&quot;$&quot;,&quot;_&quot;,&quot;B&quot;,&quot;test&quot;,&quot;text!src/demo01.html&quot;],&quot;out&quot;:&quot;&lt;%= config.destDir</div><div class="line"> %&gt;/libs_app.js&quot;&#125;&#125;</div><div class="line">[D] param: $,_,B,test,text!src/demo01.html</div><div class="line">[D] param: &#123;&quot;config&quot;:&#123;&quot;srcDir&quot;:&quot;../gruntDemo/demo01&quot;,&quot;destDir&quot;:&quot;../gruntDemo/dem</div><div class="line">o01/dest&quot;&#125;,&quot;requirejs&quot;:&#123;&quot;main&quot;:&#123;&quot;options&quot;:&#123;&quot;baseUrl&quot;:&quot;../gruntDemo/demo01&quot;,&quot;path</div><div class="line">s&quot;:&#123;&quot;$&quot;:&quot;src/zepto&quot;,&quot;_&quot;:&quot;src/underscore&quot;,&quot;B&quot;:&quot;src/backbone&quot;,&quot;test&quot;:&quot;src/test01&quot;,</div><div class="line">&quot;text&quot;:&quot;src/require.text&quot;&#125;,&quot;include&quot;:[&quot;$&quot;,&quot;_&quot;,&quot;B&quot;,&quot;test&quot;,&quot;text!src/demo01.html&quot;]</div><div class="line">,	&quot;out&quot;:&quot;../gruntDemo/demo01/dest/libs_app.js&quot;&#125;&#125;&#125;&#125;</div><div class="line"></div><div class="line">Running &quot;requirejs:main&quot; (requirejs) task</div><div class="line">[D] Task source: d:\grunt\node_modules\grunt-contrib-requirejs\tasks\requirejs.j</div><div class="line">s</div><div class="line">&gt;&gt; Tracing dependencies for: d:/gruntDemo/demo01/dest/libs_app.js</div><div class="line">&gt;&gt; Uglifying file: d:/gruntDemo/demo01/dest/libs_app.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo01/dest/libs_app.js</div><div class="line">&gt;&gt; ----------------</div><div class="line">&gt;&gt; d:/gruntDemo/demo01/src/zepto.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo01/src/underscore.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo01/src/backbone.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo01/src/test01.js</div><div class="line">&gt;&gt; d:/gruntDemo/demo01/src/require.text.js</div><div class="line">&gt;&gt; text!src/demo01.html</div></pre></td></tr></table></figure>
<p>##结语</p>
<blockquote>
<p>我们这个星期花了三天时间一起学习了grunt打包相关的知识点，需要这些知识对您有用，搞这个东西还花费了不少心血呢！！！<br><br>若是文中有误请一并提出，后续若是这块有所得我们再一起总结吧<br><br>原来是分成三段，这里将之合一方便各位连贯阅读，篇幅大，记得点赞！<br></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grunt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp]]></title>
      <url>/2015/12/20/2015-12-17-gulp-%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>gulp的用法以及一些插件地址总汇</p>
<table>
<thead>
<tr>
<th>插件</th>
<th>地址</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>gulp</td>
<td><a href="https://www.npmjs.com/package/gulp" target="_blank" rel="external">地址</a></td>
<td>npm install gulp</td>
</tr>
<tr>
<td>del</td>
<td><a href="https://www.npmjs.com/package/del" target="_blank" rel="external">地址</a></td>
<td>npm install –save del</td>
</tr>
<tr>
<td>gulp-autoprefixer</td>
<td><a href="https://www.npmjs.com/package/gulp-autoprefixer" target="_blank" rel="external">地址</a></td>
<td>npm install –save-dev gulp-autoprefixer</td>
</tr>
<tr>
<td>gulp-cache</td>
<td><a href="https://www.npmjs.com/package/gulp-cache" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-cache</td>
</tr>
<tr>
<td>gulp-clean</td>
<td><a href="https://www.npmjs.com/package/gulp-clean" target="_blank" rel="external">地址</a></td>
<td>npm install –save-dev gulp-clean</td>
</tr>
<tr>
<td>gulp-cmd-transit</td>
<td><a href="https://www.npmjs.com/package/gulp-cmd-transit" target="_blank" rel="external">地址</a></td>
<td>npm install –save-dev gulp-cmd-transit</td>
</tr>
<tr>
<td>gulp-concat</td>
<td><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-concat</td>
</tr>
<tr>
<td>gulp-imagemin</td>
<td><a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-imagemin</td>
</tr>
<tr>
<td>gulp-jshint</td>
<td><a href="https://www.npmjs.com/package/gulp-jshint" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-jshint</td>
</tr>
<tr>
<td>gulp-livereload</td>
<td><a href="https://www.npmjs.com/package/gulp-livereload" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-livereload</td>
</tr>
<tr>
<td>gulp-minify-css</td>
<td><a href="https://www.npmjs.com/package/gulp-minify-css" target="_blank" rel="external">地址</a></td>
<td>npm install –save-dev gulp-minify-css</td>
</tr>
<tr>
<td>gulp-notify</td>
<td><a href="https://www.npmjs.com/package/gulp-notify" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-notify</td>
</tr>
<tr>
<td>gulp-seajs</td>
<td><a href="https://www.npmjs.com/package/gulp-seajs" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-seajs</td>
</tr>
<tr>
<td>gulp-seajs-combo</td>
<td><a href="https://www.npmjs.com/package/gulp-seajs-combo" target="_blank" rel="external">地址</a></td>
<td>npm i gulp-seajs-combo</td>
</tr>
<tr>
<td>gulp-seajs-transport</td>
<td><a href="https://www.npmjs.com/package/gulp-seajs-transport" target="_blank" rel="external">地址</a></td>
<td>npm i gulp-seajs-transport</td>
</tr>
<tr>
<td>gulp-sourcemaps</td>
<td><a href="https://www.npmjs.com/package/gulp-sourcemaps" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-sourcemaps</td>
</tr>
<tr>
<td>gulp-uglify</td>
<td><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external">地址</a></td>
<td>npm install gulp-uglify</td>
</tr>
</tbody>
</table>
<h2 id="gulp-是基于nodejs-的一个自动化任务管理工具。相对于grunt更方便、易用，快捷。"><a href="#gulp-是基于nodejs-的一个自动化任务管理工具。相对于grunt更方便、易用，快捷。" class="headerlink" title="gulp 是基于nodejs 的一个自动化任务管理工具。相对于grunt更方便、易用，快捷。"></a>gulp 是基于nodejs 的一个自动化任务管理工具。相对于grunt更方便、易用，快捷。</h2><ul>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">gulp的官网</a></li>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文版</a></li>
<li><a href="http://javascript.ruanyifeng.com/tool/gulp.html" target="_blank" rel="external">gulp优教程</a></li>
</ul>
<p>1.安装     <br><br>2.建        gulpfile.js        文件 <br><br>3.gulp 的核心方法 <br><br>    3.1src();  <br><br>    3.2dest(); <br><br>    3.3     task();  <br><br>    3.4     watch();     <br></p>
<ol>
<li><p>gulp-load-plugins模块     <br></p>
</li>
<li><p>gulp-livereload模块 <br></p>
</li>
</ol>
<p>6.总结<br></p>
<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h1><p>Gulp需要全局安装，然后再在项目的开发目录中安装为本地模块。先进入项目目录，运行下面的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div><div class="line"></div><div class="line">npm install --save-dev gulp</div></pre></td></tr></table></figure>
<p>除了安装gulp以外，不同的任务还需要安装不同的gulp插件模块。举例来说，下面代码安装了gulp-uglify模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp-uglify</div></pre></td></tr></table></figure>
<h1 id="2-gulpfile-js"><a href="#2-gulpfile-js" class="headerlink" title="2.gulpfile.js"></a>2.gulpfile.js</h1><p>项目根目录中的gulpfile.js，是Gulp的配置文件。下面就是一个典型的gulpfile.js文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;minify&apos;, function () &#123;</div><div class="line">gulp.src(&apos;js/app.js&apos;)</div><div class="line">.pipe(uglify())</div><div class="line">  .pipe(gulp.dest(&apos;build&apos;))</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，gulpfile.js加载gulp和gulp-uglify模块之后，使用gulp模块的task方法指定任务minify。task方法有两个参数，第一个是任务名，第二个是任务函数。在任务函数中，使用gulp模块的src方法，指定所要处理的文件，然后使用pipe方法，将上一步的输出转为当前的输入，进行链式处理。<br><br><br>task方法的回调函数使用了两次pipe方法，也就是说做了两种处理。第一种处理是使用gulp-uglify模块，压缩源码；第二种处理是使用gulp模块的dest方法，将上一步的输出写入本地文件，这里是build.js（代码中省略了后缀名js）。<br><br><br>执行minify任务时，就在项目目录中执行下面命令就可以了。</p>
<pre><code>gulp minify
</code></pre><p>从上面的例子中可以看到，gulp充分使用了“管道”思想，就是一个数据流（stream）：src方法读入文件产生数据流，dest方法将数据流写入文件，中间是一些中间步骤，每一步都对数据流进行一些处理。<br><br><br>下面是另一个数据流的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;js&apos;, function () &#123;</div><div class="line">  return gulp.src(&apos;js/*.js&apos;)</div><div class="line">    .pipe(jshint())</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(concat(&apos;app.js&apos;))</div><div class="line">    .pipe(gulp.dest(&apos;build&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码使用pipe命令，分别进行jshint、uglify、concat三步处理。</p>
<h1 id="3-gulp模块的方法"><a href="#3-gulp模块的方法" class="headerlink" title="3.gulp模块的方法"></a>3.gulp模块的方法</h1><h3 id="3-1-src"><a href="#3-1-src" class="headerlink" title="3.1 src()"></a>3.1 src()</h3><p>gulp模块的src方法，用于产生数据流。它的参数表示所要处理的文件，这些指定的文件会转换成数据流。参数的写法一般有以下几种形式。</p>
<blockquote>
<p>js/app.js：指定确切的文件名。 <br><br>js/<em>.js：某个目录所有后缀名为js的文件。<br><br>js/**/</em>.js：某个目录及其所有子目录中的所有后缀名为js的文件。<br><br>!js/app.js：除了js/app.js以外的所有文件。<br><br>*.+(js    |  css)：匹配项目根目录下，所有后缀名为js或css的文件。</p>
</blockquote>
<p>src方法的参数还可以是一个数组，用来指定多个成员。</p>
<pre><code>gulp.src([&apos;js/**/*.js&apos;, &apos;!js/**/*.min.js&apos;])
</code></pre><h3 id="3-2-dest"><a href="#3-2-dest" class="headerlink" title="3.2 dest()"></a>3.2 dest()</h3><p>dest方法将管道的输出写入文件，同时将这些输出继续输出，所以可以依次调用多次dest方法，将输出写入多个目录。如果有目录不存在，将会被新建。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.src(&apos;./client/templates/*.jade&apos;)</div><div class="line">  .pipe(jade())</div><div class="line">  .pipe(gulp.dest(&apos;./build/templates&apos;))</div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(&apos;./build/minified_templates&apos;));</div></pre></td></tr></table></figure>
<p>dest方法还可以接受第二个参数，表示配置对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.dest(&apos;build&apos;, &#123;</div><div class="line">  cwd: &apos;./app&apos;,</div><div class="line">  mode: &apos;0644&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>配置对象有两个字段。cwd字段指定写入路径的基准目录，默认是当前目录；mode字段指定写入文件的权限，默认是0777。</p>
<h3 id="3-3-task"><a href="#3-3-task" class="headerlink" title="3.3 task()"></a>3.3 task()</h3><p>task方法用于定义具体的任务。它的第一个参数是任务名，第二个参数是任务函数。下面是一个非常简单的任务函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;greet&apos;, function () &#123;</div><div class="line">   console.log(&apos;Hello world!&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>task方法还可以指定按顺序运行的一组任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;build&apos;, [&apos;css&apos;, &apos;js&apos;, &apos;imgs&apos;]);</div></pre></td></tr></table></figure>
<p>上面代码先指定build任务，它由css、js、imgs三个任务所组成，task方法会并发执行这三个任务。注意，由于每个任务都是异步调用，所以没有办法保证js任务的开始运行的时间，正是css任务运行结束。<br><br><br>如果希望各个任务严格按次序运行，可以把前一个任务写成后一个任务的依赖模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;css&apos;, [&apos;greet&apos;], function () &#123;</div><div class="line">   // Deal with CSS here</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码表明，css任务依赖greet任务，所以css一定会在greet运行完成后再运行。</p>
<p>task方法的回调函数，还可以接受一个函数作为参数，这对执行异步任务非常有用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 执行shell命令</div><div class="line">var exec = require(&apos;child_process&apos;).exec;</div><div class="line">gulp.task(&apos;jekyll&apos;, function(cb) &#123;</div><div class="line">  // build Jekyll</div><div class="line">  exec(&apos;jekyll build&apos;, function(err) &#123;</div><div class="line">    if (err) return cb(err); // return error</div><div class="line">    cb(); // finished task</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果一个任务的名字为default，就表明它是“默认任务”，在命令行直接输入gulp命令，就会运行该任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;default&apos;, function () &#123;</div><div class="line">  // Your default task</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 或者</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, [&apos;styles&apos;, &apos;jshint&apos;, &apos;watch&apos;]);</div></pre></td></tr></table></figure>
<p>执行的时候，直接使用gulp，就会运行styles、jshint、watch三个任务。</p>
<h3 id="3-4-watch"><a href="#3-4-watch" class="headerlink" title="3.4 watch()"></a>3.4 watch()</h3><p>watch方法用于指定需要监视的文件。一旦这些文件发生变动，就运行指定任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;watch&apos;, function () &#123;</div><div class="line">   gulp.watch(&apos;templates/*.tmpl.html&apos;, [&apos;build&apos;]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码指定，一旦templates目录中的模板文件发生变化，就运行build任务。</p>
<p>watch方法也可以用回调函数，代替指定的任务。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.watch(&apos;templates/*.tmpl.html&apos;, function (event) &#123;</div><div class="line">   console.log(&apos;Event type: &apos; + event.type);</div><div class="line">   console.log(&apos;Event path: &apos; + event.path);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>另一种写法是watch方法所监控的文件发生变化时（修改、增加、删除文件），会触发change事件。可以对change事件指定回调函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var watcher = gulp.watch(&apos;templates/*.tmpl.html&apos;, [&apos;build&apos;]);</div><div class="line">watcher.on(&apos;change&apos;, function (event) &#123;</div><div class="line">   console.log(&apos;Event type: &apos; + event.type);</div><div class="line">   console.log(&apos;Event path: &apos; + event.path);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>除了change事件，watch方法还可能触发以下事件。</p>
<blockquote>
<p>end：回调函数运行完毕时触发。<br><br>error：发生错误时触发。<br><br>ready：当开始监听文件时触发。<br><br>nomatch：没有匹配的监听文件时触发。<br></p>
</blockquote>
<p>watcher对象还包含其他一些方法。</p>
<blockquote>
<p>watcher.end()：停止watcher对象，不会再调用任务或回调函数。<br><br>watcher.files()：返回watcher对象监视的文件。<br><br>watcher.add(glob)：增加所要监视的文件，它还可以附件第二个参数，表示回调函数。<br><br>watcher.remove(filepath)：从watcher对象中移走一个监视的文件。<br></p>
</blockquote>
<h1 id="4-gulp-load-plugins模块"><a href="#4-gulp-load-plugins模块" class="headerlink" title="4. gulp-load-plugins模块"></a>4. gulp-load-plugins模块</h1><p>一般情况下，gulpfile.js中的模块需要一个个加载。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">   jshint = require(&apos;gulp-jshint&apos;),</div><div class="line">   uglify = require(&apos;gulp-uglify&apos;),</div><div class="line">   concat = require(&apos;gulp-concat&apos;);</div><div class="line">gulp.task(&apos;js&apos;, function () &#123;</div><div class="line">return gulp.src(&apos;js/*.js&apos;)</div><div class="line">     .pipe(jshint())</div><div class="line">     .pipe(jshint.reporter(&apos;default&apos;))</div><div class="line">     .pipe(uglify())</div><div class="line">     .pipe(concat(&apos;app.js&apos;))</div><div class="line">     .pipe(gulp.dest(&apos;build&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，除了gulp模块以外，还加载另外三个模块。</p>
<p>这种一一加载的写法，比较麻烦。使用gulp-load-plugins模块，可以加载package.json文件中所有的gulp模块。上面的代码用gulp-load-plugins模块改写，就是下面这样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">   gulpLoadPlugins = require(&apos;gulp-load-plugins&apos;),</div><div class="line">   plugins = gulpLoadPlugins();</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(&apos;js&apos;, function () &#123;</div><div class="line">	return gulp.src(&apos;js/*.js&apos;)</div><div class="line">     .pipe(plugins.jshint())</div><div class="line">     .pipe(plugins.jshint.reporter(&apos;default&apos;))</div><div class="line">     .pipe(plugins.uglify())</div><div class="line">     .pipe(plugins.concat(&apos;app.js&apos;))</div><div class="line">     .pipe(gulp.dest(&apos;build&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码假设package.json文件包含以下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;devDependencies&quot;: &#123;</div><div class="line">      &quot;gulp-concat&quot;: &quot;~2.2.0&quot;,</div><div class="line">      &quot;gulp-uglify&quot;: &quot;~0.2.1&quot;,</div><div class="line">      &quot;gulp-jshint&quot;: &quot;~1.5.1&quot;,</div><div class="line">      &quot;gulp&quot;: &quot;~3.5.6&quot;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-gulp-livereload模块"><a href="#5-gulp-livereload模块" class="headerlink" title="5.gulp-livereload模块"></a>5.gulp-livereload模块</h1><p>gulp-livereload模块用于自动刷新浏览器，反映出源码的最新变化。它除了模块以外，还需要在浏览器中安装插件，用来配合源码变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">   less = require(&apos;gulp-less&apos;),</div><div class="line">   livereload = require(&apos;gulp-livereload&apos;),</div><div class="line">   watch = require(&apos;gulp-watch&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;less&apos;, function() &#123;</div><div class="line">   gulp.src(&apos;less/*.less&apos;)</div><div class="line">     .pipe(watch())</div><div class="line">     .pipe(less())</div><div class="line">     .pipe(gulp.dest(&apos;css&apos;))</div><div class="line">     .pipe(livereload());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面代码监视less文件，一旦编译完成，就自动刷新浏览器。</p>
<h1 id="6-gulp排除文件的用法"><a href="#6-gulp排除文件的用法" class="headerlink" title="6.gulp排除文件的用法"></a>6.gulp排除文件的用法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var del = require(&apos;del&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">var gutil = require(&apos;gulp-util&apos;);</div><div class="line">var colors = require(&apos;colors/safe&apos;);</div><div class="line">var gulpif = require(&apos;gulp-if&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;build&apos;, function () &#123;</div><div class="line">    gutil.log(colors.red(&apos;开始压缩js...&apos;));</div><div class="line"></div><div class="line"></div><div class="line">    gulp.src([&apos;*.js&apos;, &apos;!gulpfile.js&apos;])</div><div class="line">        .pipe(gulpif(&apos;!lang-*.js&apos;, uglify()))</div><div class="line">        .pipe(gulp.dest(&apos;dist&apos;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;clean&apos;, function () &#123;</div><div class="line">    gutil.log(colors.red(&apos;开始清空文件&apos;));</div><div class="line">    del([</div><div class="line">        &apos;dist&apos;</div><div class="line">    ])</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>本意是想压缩当前目录下的文件夹,但是要排除掉以lang开头的js文件,但是我查看了一下结果,发现lang开头的js文件也被压缩了,这是为啥呢?<br>在gulp.src数组参数用 ！lang-*.js</p>
<p>#7.总结</p>
<table>
<thead>
<tr>
<th>插件</th>
<th style="text-align:center">地址</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>gulp-ruby-sass</td>
<td style="text-align:center"><a href="https://github.com/sindresorhus/gulp-ruby-sass" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">基于ruby和sass的Sass文件编译，可将Sass文件为CSS文件</td>
</tr>
<tr>
<td>gulp-autoprefixer</td>
<td style="text-align:center"><a href="https://github.com/Metrime/gulp-autoprefixer" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">Autoprefixer，可以解析CSS文件，并且添加浏览器前缀到CSS规则里</td>
</tr>
<tr>
<td>gulp-minify-css</td>
<td style="text-align:center"><a href="https://github.com/murphydanger/gulp-minify-css" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">CSS文件压缩工具</td>
</tr>
<tr>
<td>gulp-jshint</td>
<td style="text-align:center"><a href="https://github.com/wearefractal/gulp-jshint" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">JSHint，一个JS代码检查工具，可以检测JavaScript中错误和潜在问题</td>
</tr>
<tr>
<td>gulp-uglify</td>
<td style="text-align:center"><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">JS代码优化工具，可用于压缩和美化（或者叫“丑化”）JavaScript代码</td>
</tr>
<tr>
<td>gulp-concat</td>
<td style="text-align:center"><a href="https://github.com/contra/gulp-concat" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">文件拼接工具，可用于多个CSS文件或多个JS文件的合并</td>
</tr>
<tr>
<td>gulp-imagemin</td>
<td style="text-align:center"><a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">图片压缩工具</td>
</tr>
<tr>
<td>gulp-clean</td>
<td style="text-align:center"><a href="https://github.com/peter-vilja/gulp-clean" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">目标目录清理，在用于gulp任务执行前清空目标目录</td>
</tr>
<tr>
<td>gulp-cache</td>
<td style="text-align:center"><a href="https://github.com/jgable/gulp-cache/" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">资源缓存处理，可用于缓存已压缩过的资源，如：图片</td>
</tr>
<tr>
<td>gulp-notify</td>
<td style="text-align:center"><a href="https://github.com/mikaelbr/gulp-notify" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">任务通知工具，可用于某项任务执行完成的在控制台输出通知</td>
</tr>
<tr>
<td>gulp-livereload</td>
<td style="text-align:center"><a href="https://github.com/vohof/gulp-livereload" target="_blank" rel="external">地址</a></td>
<td style="text-align:left">服务器资源监控，当服务端资源变化时对页面进行刷新。需要要配合浏览器插件使用或在页面这样处理，使用比较复杂，非必要时不推荐使用</td>
</tr>
</tbody>
</table>
<ul>
<li>gulpfile.js</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var transport = require(&quot;gulp-seajs-transport&quot;);</div><div class="line">var gulp = require(&quot;gulp&quot;);</div><div class="line">var concat = require(&apos;gulp-concat&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line">var paths = &#123;</div><div class="line">  scripts: [&apos;./dist/*.js&apos;]</div><div class="line">&#125;;</div><div class="line">gulp.task(&apos;scripts&apos;, function() &#123;</div><div class="line">  return gulp.src(paths.scripts)</div><div class="line"> 		.pipe(transport())</div><div class="line">     	.pipe(concat(&apos;all.min.js&apos;))</div><div class="line">     	.pipe(uglify())</div><div class="line">     	.pipe(sourcemaps.write())</div><div class="line">   	 	.pipe(gulp.dest(&apos;build/js&apos;));</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;watch&apos;, function() &#123;</div><div class="line">  gulp.watch(paths.scripts, [&apos;scripts&apos;]);</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;default&apos;, [&apos;watch&apos;, &apos;scripts&apos;]);</div></pre></td></tr></table></figure>
<h1 id="8-关于访问国外npm慢的解决方法"><a href="#8-关于访问国外npm慢的解决方法" class="headerlink" title="8.关于访问国外npm慢的解决方法"></a>8.关于访问国外npm慢的解决方法</h1><blockquote>
<p>国内访问外网都很慢，甚至不能访问！大家都懂，都很无奈！<br>安装Node时自带的npm地址默认是：<a href="http://registry.npmjs.org" target="_blank" rel="external">http://registry.npmjs.org</a> ，访问很慢！ 没事，咋们换成国内的！怎么换？</p>
</blockquote>
<p>8.1 通过config命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set registry http://registry.cnpmjs.org  npm info underscore</div></pre></td></tr></table></figure>
<p>（如果上面配置正确这个命令会有字符串response）</p>
<p>8.2.命令行指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --registry http://registry.cnpmjs.org info underscore</div></pre></td></tr></table></figure>
<p>8.3.编辑node_modules\npm.npmrc加入下面内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">registry = http://registry.cnpmjs.org</div></pre></td></tr></table></figure>
<p>如果上面的npm地址不行的话，大家可以试试淘宝的npm，非常稳定:</p>
<p><a href="https://registry.npm.taobao.org" target="_blank" rel="external">地址是：https://registry.npm.taobao.org</a></p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web-mobile]]></title>
      <url>/2015/12/20/2015-10-19-web-mobile%E5%BC%80%E5%8F%91%E6%80%BB%E6%B1%87/</url>
      <content type="html"><![CDATA[<ul>
<li><a href="http://uecss.com/mobile-platform-web-front-end-development-skills-summary.html" target="_blank" rel="external">摘自- 移动平台WEB前端开发技巧汇总 </a></li>
<li>－－－－－－－－－－－华丽的分割线－－－－－－－－－－－－－</li>
</ul>
<a id="more"></a>
<blockquote>
<p>原名《移动平台3G手机网站前端开发布局技巧汇总》，由武方博整理的，让我们了解下移动设备上的WEB站点开发的基础知识，多些时间和精力去优化其他细节，我这里对原文的标签格式做了细微的调整，阅读查看起来明晰些，原文如下：</p>
<p>您或许正在或准备参与一个WepApp项目，您或许正在Google搜索mobile development相关的文章，您或许是一名专业的WEB前端工程师，您或许想学习Mobile前端开发方面的技术，如果您被我说中了，呵呵那么这篇文章将为您带来意想不到的惊喜！当您看到这篇文章时，哥已经默认认为您是一名资深的WEB前端工程师，如果您不是，可能您会遇见许多不理解或听不懂的专业术语或前端技术（包括WEB、Mobile）。但是这没有关系，给自己一点信心吧，用心的阅读下去……</p>
<p>自Iphone和Android这两个牛逼的手机操作系统发布以来，在互联网界从此就多了一个新的名词-WebApp(意为基于WEB形式的应用程序，运行在高端的移动终端设备)。</p>
<p>开发者们都知道在高端智能手机系统中有两种应用程序：一种是基于本地（操作系统）运行的APP；一种是基于高端机的浏览器运行的WebApp，本文将主要讲解后者。</p>
<p>WebApp与Native App有何区别呢？<br>Native App：</p>
<p>开发成本非常大<br>一般使用的开发语言为JAVA、C++、Objective-C<br>更新体验较差、同时也比较麻烦<br>每一次发布新的版本，都需要做版本打包，且需要用户手动更新（有些应用程序即使不需要用户手动更新，但是也需要有一个恶心的提示）。<br>非常酷<br>因为native app可以调用IOS中的UI控件以UI方法，它可以实现WebApp无法实现的一些非常酷的交互效果<br>Native app是被Apple认可的<br>Native app可以被Apple认可为一款可信任的独立软件，可以放在Apple Stroe出售，但是Web app却不行。<br>Web App：</p>
<p>开发成本较低<br>使用web开发技术就可以轻松的完成web app的开发<br>升级较简单<br>升级不需要通知用户，在服务端更新文件即可，用户完全没有感觉<br>维护比较轻松<br>和一般的web一样，维护比较简单，它其实就是一个站点</p>
<p>Webapp说白了就是一个针对Iphone、Android优化后的web站点，它使用的技术无非就是HTML或HTML5、CSS3、JavaScript，服务端技术JAVA、PHP、ASP。</p>
<p>当然，因为这些高端智能手机（Iphone、Android）的内置浏览器都是基于webkit内核的，所以在开发WEBAPP时，多数都是使用HTML5和CSS3技术做UI布局。当使用HTML5和CSS3l做UI时，若还是遵循着一般web开发中使用HTML4和CSS2那样的开发方式的话，这也就失去了WEBAPP的本质意义了，且有些效果也无法实现的，所以在此又回到了我们的主题–webapp的布局方式和技术。</p>
<p>在此说明一下，在此所说的移动平台前端开发是指针对高端智能手机（如Iphone、Android）做站点适配也就是WebApp，并非是针对普通手机开发Wap 2.0，所以在阅读本篇文章以前，你需要对webkit内核的浏览器有一定的了解，你需要对HTML5和CSS3有一定的了解。如果你已经对此有所了解，那现在就开始往下阅读吧……</p>
</blockquote>
<p>##1、首先我们来看看webkit内核中的一些私有的meta标签，这些meta标签在开发webapp时起到非常重要的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;meta content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;&quot; name=&quot;viewport&quot; /&gt;</div><div class="line">&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot; /&gt;</div><div class="line">&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot; /&gt;</div><div class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；</li>
<li>第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；</li>
<li>第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；</li>
<li>第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码；</li>
</ul>
<p>##2、HTML5标签的使用</p>
<blockquote>
<p>在开始编写webapp时，哥建议前端工程师使用HTML5，而放弃HTML4，因为HTML5可以实现一些HTML4中无法实现的丰富的WEB应用程序的体验，可以减少开发者很多的工作量，当然了你决定使用HTML5前，一定要对此非常熟悉，要知道HTML5的新标签的作用。比如定义一块内容或文章区域可使用section标签，定义导航条或选项卡可以直接使用nav标签等等。</p>
</blockquote>
<p>##3、放弃CSS float属性</p>
<blockquote>
<p>在项目开发过程中可以会遇到内容排列排列显示的布局，假如你遇见这样的视觉稿，哥建议你放弃</p>
</blockquote>
<p>float<br>，可以直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display:block;</div></pre></td></tr></table></figure></p>
<p>##4、利用CSS3边框背景属性</p>
<blockquote>
<p>这个按钮有圆角效果，有内发光效果还有高光效果，这样的按钮使用CSS3写是无法写出来的，当然圆角可以使用CSS3来写，但高光和内发光却无法使用CSS3编写，这个时候你不妨使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-border-image</div></pre></td></tr></table></figure></p>
</blockquote>
<p>来定义这个按钮的样式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-border-image</div></pre></td></tr></table></figure></p>
<p>就个很复杂的样式属性。</p>
<p>##5、块级化a标签</p>
<blockquote>
<p>请保证将每条数据都放在一个a标签中，为何这样做？因为在触控手机上，为提升用户体验，尽可能的保证用户的可点击区域较大。</p>
</blockquote>
<p>##6、自适应布局模式</p>
<blockquote>
<p>在编写CSS时，我不建议前端工程师把容器（不管是外层容器还是内层）的宽度定死。为达到适配各种手持设备，我建议前端工程师使用自适应布局模式（支付宝采用了自适应布局模式），因为这样做可以让你的页面在ipad、itouch、ipod、iphone、android、web safarik、chrome都能够正常的显示，你无需再次考虑设备的分辨率。</p>
</blockquote>
<p>##7、学会使用webkit-box</p>
<blockquote>
<p>上一节，我们说过自适应布局模式，有些同学可能会问：如何在移动设备上做到完全自适应呢？很感谢webkit为display属性提供了一个</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webkit-box</div></pre></td></tr></table></figure>
<blockquote>
<p>的值，它可以帮助前端工程师做到盒子模型灵活控制。</p>
</blockquote>
<p>##8、如何去除Android平台中对邮箱地址的识别</p>
<blockquote>
<p>看过iOS webapp API的同学都知道iOS提供了一个meta标签:用于禁用iOS对页面中电话号码的自动识别。在iOS中是不自动识别邮件地址的，但在Android平台，它会自动检测邮件地址，当用户touch到这个邮件地址时，Android会弹出一个框提示用户发送邮件，如果你不想Android自动识别页面中的邮件地址，你不妨加上这样一句meta标签在head中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>##9、如何去除iOS和Android中的输入URL的控件条</p>
<blockquote>
<p>你的老板或者PD或者交互设计师可能会要求你：能否让我们的webapp更加像nativeapp，我不想让用户看见那个输入url的控件条？<br>答案是可以做到的。我们可以利用一句简单的javascript代码来实现这个效果</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setTimeout(scrollTo,0,0,0);</div></pre></td></tr></table></figure>
<p>请注意，这句代码必须放在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.onload</div></pre></td></tr></table></figure></p>
<blockquote>
<p>里才能够正常的工作，而且你的当前文档的内容高度必须是高于窗口的高度时，这句代码才能有效的执行。</p>
</blockquote>
<p>##10、如何禁止用户旋转设备</p>
<blockquote>
<p>我曾经也想禁止用户旋转设备，也想实现像某些客户端那样：只能在肖像模式或景观模式下才能正常运行。但现在我可以很负责任的告诉你：别想了!在移动版的webkit中做不到！</p>
<p>至少Apple webapp API已经说到了：我们为了让用户在safari中正常的浏览网页，我们必须保证用户的设备处于任何一个方位时，safari都能够正常的显示网页内容（也就是自适应），所以我们禁止开发者阻止浏览器的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orientationchange</div></pre></td></tr></table></figure></p>
</blockquote>
<p>事件，看来苹果公司的出发点是正确的，苹果确实不是一般的苹果。</p>
<p>iOS已经禁止开发者阻止<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orientationchange</div></pre></td></tr></table></figure></p>
<p>事件，那Android呢？对不起，我没有找到任何资料说Android禁止开发者阻止浏览器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">orientationchange</div></pre></td></tr></table></figure></p>
<p>事件，但是在Android平台，确实也是阻止不了的。</p>
<p>##11、如何检测用户是通过主屏启动你的webapp</p>
<blockquote>
<p>　看过Apple webapp API的同学都知道iOS为safari提供了一个将当前页面添加主屏的功能，按下iphone ipod ipod touch底部工具中的小加号，或者ipad顶部左侧的小加号，就可以将当前的页面添加到设备的主屏，在设备的主屏会自动增加一个当前页面的启动图标，点击该启动图标就可以快速、便捷的启动你的webapp。</p>
<p>从主屏启动的webapp和浏览器访问你的webapp最大的区别是它清除了浏览器上方和下方的工具条，这样你的webapp就更加像是nativeapp了，还有一个区别是window对像中的navigator子对象的一个</p>
</blockquote>
<p>standalone<br>属性。</p>
<p>iOS中浏览器直接访问站点时，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">navigator.standalone</div></pre></td></tr></table></figure>
<p>为false,从主屏启动webapp时，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">navigator.standalone为true</div></pre></td></tr></table></figure>
<blockquote>
<p>，我们可以通过navigator.standalone这个属性获知用户当前是否是从主屏访问我们的webapp的。<br>在Android中从来没有添加到主屏这回事！</p>
</blockquote>
<p>##12、如何关闭iOS中键盘自动大写</p>
<blockquote>
<p>我们知道在iOS中，当虚拟键盘弹出时，默认情况下键盘是开启首字母大写的功能的，根据某些业务场景，可能我们需要关闭这个功能，移动版本webkit为input元素提供了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autocapitalize</div></pre></td></tr></table></figure>
<p>，通过指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autocapitalize=&quot;off&quot;</div></pre></td></tr></table></figure>
<p>来关闭键盘默认首字母大写。</p>
<p>##13、iOS中如何彻底禁止用户在新窗口打开页面<br>有时我们可能需要禁止用户在新窗口打开页面，我们可以使用a标签的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">target=&quot;_self&quot;</div></pre></td></tr></table></figure>
<p>来指定用户在新窗口打开，或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">target</div></pre></td></tr></table></figure></p>
<blockquote>
<p>属性保持空，但是你会发现iOS的用户在这个链接的上方长按3秒钟后，iOS会弹出一个列表按钮，用户通过这些按钮仍然可以在新窗口打开页面，这样的话，开发者指定的target属性就失效了，但是可以通过指定当前元素的</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-touch-callout</div></pre></td></tr></table></figure>
<blockquote>
<p>样式属性为none来禁止iOS弹出这些按钮。这个技巧仅适用iOS对于Android平台则无效。</p>
</blockquote>
<p>##14、iOS中如何禁止用户保存图片＼复制图片<br>我们在第13条技巧中提到元素的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-touch-callout</div></pre></td></tr></table></figure>
<p>属性，同样为一个img标签指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-touch-callout:none</div></pre></td></tr></table></figure>
<p>，这样用户就无法保存＼复制你的图片了。</p>
<p>##15、iOS中如何禁止用户选中文字<br>我们通过指定文字标签的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-user-select:none</div></pre></td></tr></table></figure></p>
<p>便可以禁止iOS用户选中文字。</p>
<p>##16、iOS中如何获取滚动条的值<br>桌面浏览器中想要获取滚动条的值是通过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.scrollTop</div></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.scrollLeft</div></pre></td></tr></table></figure>
<blockquote>
<p>得到的，但在iOS中你会发现这两个属性是未定义的，为什么呢？因为在iOS中没有滚动条的概念，在Android中通过这两个属性可以正常获取到滚动条的值，那么在iOS中我们该如何获取滚动条的值呢？<br>通过window.scrollY和window.scrollX我们可以得到当前窗口的y轴和x轴滚动条的值。</p>
</blockquote>
<p>##17、如何解决盒子边框溢出<br>当你指定了一个块级元素时，并且为其定义了边框，设置了其宽度为100％。在移动设备开发过程中我们通常会对文本框定义为宽度100％，将其定义为块级元素以实现全屏自适应的样式，但此时你会发现，该元素的边框(左右)各1个像素会溢了文档，导致出现横向滚动条，为解决这一问题，我们可以为其添加一个特殊的样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-box-sizing:border-box;</div></pre></td></tr></table></figure></p>
<p>用来指定该盒子的大小包括边框的宽度。</p>
<p>##18、如何解决Android 2.0以下平台中圆角的问题</p>
<blockquote>
<p>如果大家够细心的话，在做wap站点开发时，大家应该会发现android 2.0以下的平台中问题特别的多，比如说边框圆角这个问题吧。</p>
<p>在对一个元素定义圆角时，为完全兼容android 2.0以下的平台，我们必须要按照以下技巧来定义边框圆角：</p>
</blockquote>
<pre><code>-webkit
</code></pre><blockquote>
<p>这个前缀必须要加上（在iOS中，你可以不加，但android中一定要加）；</p>
<p>如果对针对边框做样式定义，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">border:1px solid #000;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>那么<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-border-radius</div></pre></td></tr></table></figure></p>
<p>这属性必须要出现在</p>
<pre><code>border
</code></pre><p>属性后。</p>
<blockquote>
<p>假如我们有这样的视觉元素，左上角和右上角是圆角时，我们必须要先定义全局的(4个角的圆角值)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-border-radius:5px;</div></pre></td></tr></table></figure>
<p>然后再依次的覆盖左下角和右下角，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-border-bottom-left-radius:0;-webkit-border-bottom-right-border:0;</div></pre></td></tr></table></figure>
<blockquote>
<p>否则在android 2.0以下的平台中将全部显示直角，还有记住！</p>
</blockquote>
<pre><code>-webkit
</code></pre><p>这个前缀一定要加上！</p>
<p>##19、如何解决android平台中页面无法自适应<br>虽然你的html和css都是完全自适应的，但有一天如果你发现你的页面在android中显示的并不是自适应的时候，首先请你确认你的head标签中是否包含以下meta标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0;&quot; /&gt;</div></pre></td></tr></table></figure>
<p>如果有的话，那请你再仔细的看清楚有没有这个属性的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">width=device-width</div></pre></td></tr></table></figure></p>
<p>，如果没有请立即加上吧！</p>
<p>##20、如何解决iOS 4.3版本中safari对页面中5位数字的自动识别和自动添加样式</p>
<blockquote>
<p>新的iOS系统也就是4.3版本，升级后对safari造成了一个bug：即使你添加了如下的meta标签，safari仍然会对页面中的5位连续的数字进行自动识别，并且将其重新渲染样式，也就是说你的css对该标签是无效的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no&quot; /&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>我们可以用一个比较龌龊的办法来解决。比如说支付宝wap站点中显示金额的标签，我们都做了如下改写：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;button class=&quot;t-balance&quot; style=&quot;background:none;padding:0;border:0;&quot;&gt;95009.00&lt;/button&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm功能一览]]></title>
      <url>/2015/12/20/2015-10-19-npm%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%B8%80%E8%A7%88/</url>
      <content type="html"><![CDATA[<p>npm 常用功能归纳</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line">&lt;table&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;b&gt;模块名&lt;/b&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;&lt;b&gt;作者&lt;/b&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;&lt;b&gt;简介&lt;/b&gt;&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;async&quot; href=&quot;https://www.npmjs.com/package/async&quot; target=&quot;_blank&quot;&gt;async&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;caolan&lt;/td&gt;</div><div class="line">&lt;td&gt;异步操作管理&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;bl&quot; href=&quot;https://www.npmjs.com/package/bl&quot; target=&quot;_blank&quot;&gt;bl&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;rvagg&lt;/td&gt;</div><div class="line">&lt;td&gt;二进制数据解析&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;bluebird&quot; href=&quot;https://www.npmjs.com/package/bluebird&quot; target=&quot;_blank&quot;&gt;bluebird&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;petkaantonov&lt;/td&gt;</div><div class="line">&lt;td&gt;异步操作管理&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;browserify&quot; href=&quot;https://www.npmjs.com/package/browserify&quot; target=&quot;_blank&quot;&gt;browserify&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;substack&lt;/td&gt;</div><div class="line">&lt;td&gt;发布浏览器可用的包&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;bunyan&quot; href=&quot;https://www.npmjs.com/package/bunyan&quot; target=&quot;_blank&quot;&gt;bunyan&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;trentm&lt;/td&gt;</div><div class="line">&lt;td&gt;日志（logging）管理&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;chai&quot; href=&quot;https://www.npmjs.com/package/chai&quot; target=&quot;_blank&quot;&gt;chai&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;jakeluer&lt;/td&gt;</div><div class="line">&lt;td&gt;断言&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;chalk&quot; href=&quot;https://www.npmjs.com/package/chalk&quot; target=&quot;_blank&quot;&gt;chalk&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;sindresorhus&lt;/td&gt;</div><div class="line">&lt;td&gt;命令行彩色输出&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;co&quot; href=&quot;https://www.npmjs.com/package/co&quot; target=&quot;_blank&quot;&gt;co&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;tjholowaychuk&lt;/td&gt;</div><div class="line">&lt;td&gt;异步流程管理&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;colors&quot; href=&quot;https://www.npmjs.com/package/colors&quot; target=&quot;_blank&quot;&gt;colors&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;marak&lt;/td&gt;</div><div class="line">&lt;td&gt;命令行彩色输出&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;commander&quot; href=&quot;https://www.npmjs.com/package/commander&quot; target=&quot;_blank&quot;&gt;commander&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;tjholowaychuk&lt;/td&gt;</div><div class="line">&lt;td&gt;命令行工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;debug&quot; href=&quot;https://www.npmjs.com/package/debug&quot; target=&quot;_blank&quot;&gt;debug&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;tjholowaychuk&lt;/td&gt;</div><div class="line">&lt;td&gt;Debug输出器&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;dockerode&quot; href=&quot;https://www.npmjs.com/package/dockerode&quot; target=&quot;_blank&quot;&gt;dockerode&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;apocas&lt;/td&gt;</div><div class="line">&lt;td&gt;Docker管理&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;duplexify&quot; href=&quot;https://www.npmjs.com/package/duplexify&quot; target=&quot;_blank&quot;&gt;duplexify&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;mafintosh&lt;/td&gt;</div><div class="line">&lt;td&gt;Stream流操作工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;event-stream&quot; href=&quot;https://www.npmjs.com/package/event-stream&quot; target=&quot;_blank&quot;&gt;event-stream&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;dominictarr&lt;/td&gt;</div><div class="line">&lt;td&gt;Stream流操作工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;express&quot; href=&quot;https://www.npmjs.com/package/express&quot; target=&quot;_blank&quot;&gt;express&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;tjholowaychuk&lt;/td&gt;</div><div class="line">&lt;td&gt;Server服务器框架&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;glob&quot; href=&quot;https://www.npmjs.com/package/glob&quot; target=&quot;_blank&quot;&gt;glob&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;isaacs&lt;/td&gt;</div><div class="line">&lt;td&gt;文件名匹配&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;grunt&quot; href=&quot;https://www.npmjs.com/package/grunt&quot; target=&quot;_blank&quot;&gt;grunt&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;cowboy&lt;/td&gt;</div><div class="line">&lt;td&gt;构建工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;gulp&quot; href=&quot;https://www.npmjs.com/package/gulp&quot; target=&quot;_blank&quot;&gt;gulp&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;contra&lt;/td&gt;</div><div class="line">&lt;td&gt;构建工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;hapi&quot; href=&quot;https://www.npmjs.com/package/hapi&quot; target=&quot;_blank&quot;&gt;hapi&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;hueniverse&lt;/td&gt;</div><div class="line">&lt;td&gt;Server服务器框架&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;hyperquest&quot; href=&quot;https://www.npmjs.com/package/hyperquest&quot; target=&quot;_blank&quot;&gt;hyperquest&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;substack&lt;/td&gt;</div><div class="line">&lt;td&gt;轻量级HTTP客户端&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;istanbul&quot; href=&quot;https://www.npmjs.com/package/istanbul&quot; target=&quot;_blank&quot;&gt;istanbul&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;gotwarlost&lt;/td&gt;</div><div class="line">&lt;td&gt;测试用例覆盖率分析&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;JSONStream&quot; href=&quot;https://www.npmjs.com/package/JSONStream&quot; target=&quot;_blank&quot;&gt;JSONStream&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;dominictarr&lt;/td&gt;</div><div class="line">&lt;td&gt;Stream流管理工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;koa&quot; href=&quot;https://www.npmjs.com/package/koa&quot; target=&quot;_blank&quot;&gt;koa&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;tjholowaychuk&lt;/td&gt;</div><div class="line">&lt;td&gt;Server服务器框架&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;levelup&quot; href=&quot;https://www.npmjs.com/package/levelup&quot; target=&quot;_blank&quot;&gt;levelup&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;rvagg&lt;/td&gt;</div><div class="line">&lt;td&gt;LevelDB&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;lodash&quot; href=&quot;https://www.npmjs.com/package/lodash&quot; target=&quot;_blank&quot;&gt;lodash&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;jdalton&lt;/td&gt;</div><div class="line">&lt;td&gt;函数式编程工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;log4js&quot; href=&quot;https://www.npmjs.com/package/log4js&quot; target=&quot;_blank&quot;&gt;log4js&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;nomiddlename&lt;/td&gt;</div><div class="line">&lt;td&gt;日志（logging）管理工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;minimatch&quot; href=&quot;https://www.npmjs.com/package/minimatch&quot; target=&quot;_blank&quot;&gt;minimatch&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;isaacs&lt;/td&gt;</div><div class="line">&lt;td&gt;文件名匹配&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;minimist&quot; href=&quot;https://www.npmjs.com/package/minimist&quot; target=&quot;_blank&quot;&gt;minimist&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;substack&lt;/td&gt;</div><div class="line">&lt;td&gt;命令行操作&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;mocha&quot; href=&quot;https://www.npmjs.com/package/mocha&quot; target=&quot;_blank&quot;&gt;mocha&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;tjholowaychuk&lt;/td&gt;</div><div class="line">&lt;td&gt;单元测试&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;moment&quot; href=&quot;https://www.npmjs.com/package/moment&quot; target=&quot;_blank&quot;&gt;moment&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;timrwood&lt;/td&gt;</div><div class="line">&lt;td&gt;日期时间输出&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;mongodb&quot; href=&quot;https://www.npmjs.com/package/mongodb&quot; target=&quot;_blank&quot;&gt;mongodb&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;christkv&lt;/td&gt;</div><div class="line">&lt;td&gt;MongoDB&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;mysql&quot; href=&quot;https://www.npmjs.com/package/mysql&quot; target=&quot;_blank&quot;&gt;mysql&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;felixge&lt;/td&gt;</div><div class="line">&lt;td&gt;MySQL&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;nconf&quot; href=&quot;https://www.npmjs.com/package/nconf&quot; target=&quot;_blank&quot;&gt;nconf&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;indexzero&lt;/td&gt;</div><div class="line">&lt;td&gt;配置工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;needle&quot; href=&quot;https://www.npmjs.com/package/needle&quot; target=&quot;_blank&quot;&gt;needle&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;tomas&lt;/td&gt;</div><div class="line">&lt;td&gt;轻量级HTTP客户端&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;node-fetch&quot; href=&quot;https://www.npmjs.com/package/node-fetch&quot; target=&quot;_blank&quot;&gt;node-fetch&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;bitinn&lt;/td&gt;</div><div class="line">&lt;td&gt;Fetch API&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;nodemailer&quot; href=&quot;https://www.npmjs.com/package/nodemailer&quot; target=&quot;_blank&quot;&gt;nodemailer&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;andris9&lt;/td&gt;</div><div class="line">&lt;td&gt;Email客户端&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;passport&quot; href=&quot;https://www.npmjs.com/package/passport&quot; target=&quot;_blank&quot;&gt;passport&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;jaredhanson&lt;/td&gt;</div><div class="line">&lt;td&gt;登录和认证&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;pg&quot; href=&quot;https://www.npmjs.com/package/pg&quot; target=&quot;_blank&quot;&gt;pg&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;brianc&lt;/td&gt;</div><div class="line">&lt;td&gt;Postgres&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;pump&quot; href=&quot;https://www.npmjs.com/package/pump&quot; target=&quot;_blank&quot;&gt;pump&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;mafintosh&lt;/td&gt;</div><div class="line">&lt;td&gt;Stream流管理工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;redis&quot; href=&quot;https://www.npmjs.com/package/redis&quot; target=&quot;_blank&quot;&gt;redis&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;mjr&lt;/td&gt;</div><div class="line">&lt;td&gt;Redis&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;request&quot; href=&quot;https://www.npmjs.com/package/request&quot; target=&quot;_blank&quot;&gt;request&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;mikeal&lt;/td&gt;</div><div class="line">&lt;td&gt;HTTP客户端&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;restify&quot; href=&quot;https://www.npmjs.com/package/restify&quot; target=&quot;_blank&quot;&gt;restify&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;mcavage&lt;/td&gt;</div><div class="line">&lt;td&gt;REST API搭建&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;socket.io&quot; href=&quot;https://www.npmjs.com/package/socket.io&quot; target=&quot;_blank&quot;&gt;socket.io&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;rauchg&lt;/td&gt;</div><div class="line">&lt;td&gt;WebSocket实时通信&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;split2&quot; href=&quot;https://www.npmjs.com/package/split2&quot; target=&quot;_blank&quot;&gt;split2&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;matteo.collina&lt;/td&gt;</div><div class="line">&lt;td&gt;Stream流管理工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;tape&quot; href=&quot;https://www.npmjs.com/package/tape&quot; target=&quot;_blank&quot;&gt;tape&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;substack&lt;/td&gt;</div><div class="line">&lt;td&gt;单元测试&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;through2&quot; href=&quot;https://www.npmjs.com/package/through2&quot; target=&quot;_blank&quot;&gt;through2&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;rvagg&lt;/td&gt;</div><div class="line">&lt;td&gt;Stream流管理工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;underscore&quot; href=&quot;https://www.npmjs.com/package/underscore&quot; target=&quot;_blank&quot;&gt;underscore&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;jashkenas&lt;/td&gt;</div><div class="line">&lt;td&gt;函数式编程工具&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;ws&quot; href=&quot;https://www.npmjs.com/package/ws&quot; target=&quot;_blank&quot;&gt;ws&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;einaros&lt;/td&gt;</div><div class="line">&lt;td&gt;Websockets&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td&gt;&lt;a title=&quot;xml2js&quot; href=&quot;https://www.npmjs.com/package/xml2js&quot; target=&quot;_blank&quot;&gt;xml2js&lt;/a&gt;&lt;/td&gt;</div><div class="line">&lt;td&gt;leonidas&lt;/td&gt;</div><div class="line">&lt;td&gt;XML转换为JavaScript&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js计算闰年平年]]></title>
      <url>/2015/12/20/2015-11-20-%E7%94%A8js%E5%88%A4%E6%96%AD%E9%97%B0%E5%B9%B4%E5%B9%B3%E5%B9%B4/</url>
      <content type="html"><![CDATA[<p>js计算闰年平年</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;script language=&quot;JavaScript&quot;&gt;</div><div class="line">var isSmoothYear = function(year)</div><div class="line">&#123;</div><div class="line">     return (new Date(year , 2 , 0).getDate() == 29?&quot;闰年&quot;:&quot;平年&quot;);</div><div class="line">&#125;</div><div class="line">console.log(&quot;2015年 是润年吗? \t&quot; + isSmoothYear(2015));</div><div class="line">console.log(&quot;2016年 是润年吗? \t&quot; + isSmoothYear(2016));</div><div class="line">console.log(&quot;2017年 是润年吗? \t&quot; + isSmoothYear(2017));</div><div class="line">console.log(&quot;2018年 是润年吗? \t&quot; + isSmoothYear(2018));</div><div class="line">console.log(&quot;2019年 是润年吗? \t&quot; + isSmoothYear(2019));</div><div class="line">console.log(&quot;2020年 是润年吗? \t&quot; + isSmoothYear(2020));</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery]]></title>
      <url>/2015/12/20/2015-11-16-jquery%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<p>jquery 注册 组件（自用）</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  time：2015-11-16 10:57:09</div><div class="line"> * 	user：zhongciyisheng@live.com</div><div class="line"> * 	tips：注册组件。</div><div class="line"> */</div><div class="line">define(function(require, exports, module) &#123;</div><div class="line">	require(&apos;jquery&apos;);</div><div class="line">	require(&apos;/js/jquery_md5&apos;); //md5</div><div class="line">	var oErrTextSpeed = 3000;</div><div class="line">	var oErrTextTimer = null;</div><div class="line">	var telReg = /1[3|5|7|8|][0-9]&#123;9&#125;/; //手机号码正则</div><div class="line"></div><div class="line">	var oTel = $(&apos;.ws_reg_tel&apos;).val();</div><div class="line">	var oPsd = $(&apos;.ws_reg_psd&apos;).val();</div><div class="line">	var oImgCode = $(&apos;.ws_reg_imgCode&apos;).val();</div><div class="line">	var oMsgCode = $(&apos;.ws_reg_msgCode&apos;).val();</div><div class="line"></div><div class="line">	var oImg = $(&apos;.ws_reg_img&apos;);</div><div class="line">	var oSendBtn = $(&apos;.ws_reg_sendBtn&apos;);</div><div class="line">	var oConfirmBtn = $(&apos;.ws_reg_confirmBtn&apos;);</div><div class="line"></div><div class="line">	var oErrText = $(&apos;.ws_reg_errText&apos;);</div><div class="line">	var aErrText = &#123;</div><div class="line">		&quot;noTel&quot;: &quot;请输入手机号码&quot;,</div><div class="line">		&quot;noImgCode&quot;: &quot;请输入图片验证码&quot;,</div><div class="line">		&quot;errImgCode&quot;: &quot;图片验证码错误，点击刷新重新输入。&quot;,</div><div class="line">		&quot;errTel&quot;: &quot;请输入正确的手机号码&quot;,</div><div class="line">		&quot;isRegTel&quot;: &quot;该手机号码已经注册&quot;,</div><div class="line">		&quot;noMsgCode&quot;: &quot;请输入短信验证码&quot;,</div><div class="line">		&quot;errMsgCode&quot;: &quot;请输入正确的短信验证码&quot;,</div><div class="line">		&quot;noPsd&quot;: &quot;请输入6～16位密码&quot;,</div><div class="line">		&quot;errPsd&quot;: &quot;请输入6～16位密码&quot;</div><div class="line">	&#125;;</div><div class="line">	$(document).ready(function() &#123;</div><div class="line">		init();</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	function init() &#123;</div><div class="line">		getImgFn();</div><div class="line">		imgClickFn();</div><div class="line">		sendBtnClickFn();</div><div class="line">		confirmBtnClickFn();</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	function getImgFn() &#123;</div><div class="line">		oDate = new Date(); //时间</div><div class="line">		oTimeStamp = oDate.getTime(); //时间戳</div><div class="line">		oRandom = (Math.random() * 100).toString(); //随机数</div><div class="line">		oKey = $.md5(oTimeStamp.toString() + oRandom);</div><div class="line">		oImg.attr(&apos;src&apos;, API_HOST + &apos;/api/captcha/getImage&apos; + &apos;?key=&apos; + oKey);</div><div class="line">	&#125;;</div><div class="line">	//图片加载</div><div class="line">	function imgClickFn() &#123;</div><div class="line">		oImg.click(function() &#123; //点击加载图片</div><div class="line">			getImgFn();</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line">	//验证码发送</div><div class="line">	function sendBtnClickFn() &#123;</div><div class="line">		oSendBtn.click(function() &#123;</div><div class="line">			var telReg = /1[3|5|7|8|][0-9]&#123;9&#125;/; //手机号码正则</div><div class="line">			var oTel = $(&apos;.ws_reg_tel&apos;).val();</div><div class="line">			var oImgCode = $(&apos;.ws_reg_imgCode&apos;).val();</div><div class="line">			if (oTel &amp;&amp; telReg.test(oTel)) &#123;</div><div class="line">				if (oImgCode) &#123;</div><div class="line">					if (oImgCode.length &lt; 4) &#123;</div><div class="line">						errText(aErrText.errImgCode);</div><div class="line">					&#125; else &#123;</div><div class="line">						verifyFn();</div><div class="line">					&#125;;</div><div class="line">				&#125; else &#123;</div><div class="line">					errText(aErrText.noImgCode);</div><div class="line">				&#125;</div><div class="line">			&#125; else &#123;</div><div class="line">				if (!oTel || oTel.length &lt; 1 || oTel == &apos;&apos;) &#123;</div><div class="line">					errText(aErrText.noTel);</div><div class="line">				&#125; else &#123;</div><div class="line">					errText(aErrText.errTel);</div><div class="line">				&#125;;</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	&#125;;</div><div class="line">	//点击注册按钮</div><div class="line">	function confirmBtnClickFn() &#123;</div><div class="line">		oConfirmBtn.click(function() &#123;</div><div class="line">			var telReg = /1[3|5|7|8|][0-9]&#123;9&#125;/; //手机号码正则</div><div class="line">			var oTel = $(&apos;.ws_reg_tel&apos;).val();</div><div class="line">			var oPsd = $(&apos;.ws_reg_psd&apos;).val();</div><div class="line">			var oMsgCode = $(&apos;.ws_reg_msgCode&apos;).val();</div><div class="line">			var oImgCode = $(&apos;.ws_reg_imgCode&apos;).val();</div><div class="line">			if (!oTel) &#123;</div><div class="line">				errText(aErrText.noTel);</div><div class="line">			&#125; else if (!telReg.test(oTel)) &#123;</div><div class="line">				errText(aErrText.errTel);</div><div class="line">			&#125; else &#123;</div><div class="line">				if (!oImgCode) &#123;</div><div class="line">					errText(aErrText.noImgCode);</div><div class="line">				&#125; else if (oImgCode.length &lt; 4) &#123;</div><div class="line">					errText(aErrText.errImgCode);</div><div class="line">				&#125; else &#123;</div><div class="line">					if (!oMsgCode) &#123;</div><div class="line">						errText(aErrText.noMsgCode);</div><div class="line">					&#125; else if (oMsgCode.length &lt; 6) &#123;</div><div class="line">						errText(aErrText.errMsgCode);</div><div class="line">					&#125; else &#123;</div><div class="line">						/**---------   校验短信验证码    ------------**/</div><div class="line">						$.ajax(&#123;</div><div class="line">							type: &quot;post&quot;,</div><div class="line">							url: API_HOST + &quot;/api/msg/code/verify&quot;,</div><div class="line">							dataType: &apos;jsonp&apos;,</div><div class="line">							data: &#123;</div><div class="line">								telephone: oTel,</div><div class="line">								code: oMsgCode</div><div class="line">							&#125;,</div><div class="line">							success: function(v) &#123;</div><div class="line">								if (v.err_code == &apos;0&apos;) &#123;</div><div class="line">									/**---------   成功时处理    ------------**/</div><div class="line">									if (!oPsd) &#123;</div><div class="line">										errText(aErrText.noPsd);</div><div class="line">									&#125; else if (oPsd.length &lt; 6) &#123;</div><div class="line">										errText(aErrText.errPsd);</div><div class="line">									&#125; else &#123;</div><div class="line">										//最后一步，当以上全满足了，则允许表单提交</div><div class="line">									&#125;</div><div class="line">								&#125; else &#123;</div><div class="line">									/**---------   失败时返回失败信息    ------------**/</div><div class="line">									errText(v.err_msg);</div><div class="line">								&#125;;</div><div class="line">							&#125;,</div><div class="line">							async: true</div><div class="line">						&#125;);</div><div class="line">					&#125;;</div><div class="line">				&#125;;</div><div class="line">			&#125;;</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	//检测是否已注册</div><div class="line">	function verifyFn() &#123;</div><div class="line">		var oTel = $(&apos;.ws_reg_tel&apos;).val();</div><div class="line">		$.ajax(&#123;</div><div class="line">			type: &quot;post&quot;,</div><div class="line">			url: API_HOST + &quot;/api/validateTelephone&quot;,</div><div class="line">			dataType: &apos;jsonp&apos;,</div><div class="line">			data: &#123;</div><div class="line">				telephone: oTel</div><div class="line">			&#125;,</div><div class="line">			success: function(v) &#123;</div><div class="line">				if (v.err_code == &apos;0&apos;) &#123;</div><div class="line">					if (v.data.isExist == true) &#123;</div><div class="line">						errText(&apos;该手机号码已经注册&apos;);</div><div class="line">					&#125; else &#123;</div><div class="line">						sendCodeFn();</div><div class="line">					&#125;;</div><div class="line">				&#125;;</div><div class="line">			&#125;,</div><div class="line">			async: true</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line">	//发送验证码方法</div><div class="line">	function sendCodeFn() &#123;</div><div class="line">		var oTel = $(&apos;.ws_reg_tel&apos;).val(); //电话号码</div><div class="line">		var oImgCode = $(&apos;.ws_reg_imgCode&apos;).val();</div><div class="line">		$.ajax(&#123;</div><div class="line">			type: &quot;post&quot;,</div><div class="line">			url: API_HOST + &quot;/api/msg/generateCode&quot;,</div><div class="line">			dataType: &apos;jsonp&apos;,</div><div class="line">			data: &#123;</div><div class="line">				telephone: oTel,</div><div class="line">				key: oKey,</div><div class="line">				imgCode: oImgCode</div><div class="line">			&#125;,</div><div class="line">			success: function(v) &#123;</div><div class="line">				if (v.err_code == &apos;0&apos;) &#123;</div><div class="line">					errText(&apos;验证码已发送&apos;)</div><div class="line">						//					sendCodeTime();</div><div class="line">				&#125; else if (v.err_code != &apos;0&apos;) &#123;</div><div class="line">					errText(v.err_msg);</div><div class="line">				&#125;;</div><div class="line">			&#125;,</div><div class="line">			async: true</div><div class="line">		&#125;);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	function errText(a) &#123;</div><div class="line">		$(&apos;.ws_reg_errText&apos;).text(&apos;&apos;);</div><div class="line">		$(&apos;.ws_reg_errText&apos;).text(a);</div><div class="line">		clearTimeout(oErrTextTimer);</div><div class="line">		oErrTextTimer = setTimeout(function() &#123;</div><div class="line">			$(&apos;.ws_reg_errText&apos;).text(&apos;&apos;);</div><div class="line">		&#125;, oErrTextSpeed)</div><div class="line">	&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tab]]></title>
      <url>/2015/12/20/2015-10-19-tab%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h4 id="jquery代码如下："><a href="#jquery代码如下：" class="headerlink" title="jquery代码如下："></a>jquery代码如下：</h4><h4 id="html代码："><a href="#html代码：" class="headerlink" title="html代码："></a>html代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;tabs&quot; id=&quot;tabs01&quot;&gt;</div><div class="line">	&lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot; class=&quot;current&quot;&gt;tab切换一&lt;/a&gt;&lt;/li&gt;</div><div class="line">	&lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;tab切换二&lt;/a&gt;&lt;/li&gt;</div><div class="line">	&lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;tab切换三&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;div class=&quot;container&quot; id=&quot;container01&quot;&gt;</div><div class="line">	&lt;div class=&quot;con&quot;&gt;显示内容一&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;con&quot;&gt;显示内容二&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;con&quot;&gt;显示内容三&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="jquery代码如下：-1"><a href="#jquery代码如下：-1" class="headerlink" title="jquery代码如下："></a>jquery代码如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(function()&#123; tabs($(&quot;#tabs01 a&quot;), $(&apos;#container01 .con&apos;)); &#125;)</div></pre></td></tr></table></figure>
<h4 id="下面的代码就是具体实现tabs的函数："><a href="#下面的代码就是具体实现tabs的函数：" class="headerlink" title="下面的代码就是具体实现tabs的函数："></a>下面的代码就是具体实现tabs的函数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var tabs = function(tab, con)&#123;</div><div class="line">   tab.click(function()&#123;</div><div class="line">       var indx = tab.index(this);</div><div class="line">       tab.removeClass(&apos;current&apos;);</div><div class="line">       $(this).addClass(&apos;current&apos;);</div><div class="line">       con.hide();</div><div class="line">       con.eq(indx).show();</div><div class="line">   &#125;)    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="下面js方法：css代码：-公用"><a href="#下面js方法：css代码：-公用" class="headerlink" title="下面js方法：css代码：(公用)"></a>下面js方法：css代码：(公用)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt; .wrapper &#123;</div><div class="line">	width: 600px;</div><div class="line">	height: auto;</div><div class="line">	margin: 0 auto;</div><div class="line">&#125;</div><div class="line">p &#123;</div><div class="line">	margin: 0;</div><div class="line">	padding: 0;</div><div class="line">	color: #333333;</div><div class="line">	font-family: 宋体;</div><div class="line">	font-size: 12px;</div><div class="line">&#125;</div><div class="line">ul &#123;</div><div class="line">	margin: 0;</div><div class="line">	padding: 0;</div><div class="line">	list-style-type: none;</div><div class="line">	width: 500px;</div><div class="line">	height: 16px;</div><div class="line">	border-bottom: #DDDDDD solid 1px;</div><div class="line">&#125;</div><div class="line">li &#123;</div><div class="line">	margin: 0;</div><div class="line">	padding: 0;</div><div class="line">	height: 16px;</div><div class="line">	padding-left: 5px;</div><div class="line">	padding-right: 10px;</div><div class="line">	float: left;</div><div class="line">	border-left: #FFFFFF solid 1px;</div><div class="line">	border-right: #808080 solid 1px;</div><div class="line">	font-family: Verdana, Geneva, sans-serif;</div><div class="line">	font-size: 12px;</div><div class="line">	color: #000000;</div><div class="line">	background-color: #F4F4F4;</div><div class="line">	cursor: pointer;</div><div class="line">&#125;</div><div class="line">.one &#123;</div><div class="line">	width: 500px;</div><div class="line">	padding-top: 20px;</div><div class="line">	display: none;</div><div class="line">&#125;</div><div class="line">.blue &#123;</div><div class="line">	color: #58A200;</div><div class="line">	background-color: #8C5C5C;</div><div class="line">&#125;</div><div class="line">.white &#123;</div><div class="line">	color: #000000;</div><div class="line">	background-color: #F4F4F4;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h4 id="js方法："><a href="#js方法：" class="headerlink" title="js方法："></a>js方法：</h4><h4 id="JS-方法一："><a href="#JS-方法一：" class="headerlink" title="JS:方法一："></a>JS:方法一：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">function showTab(num) &#123;</div><div class="line">	for (i = 0; i &lt; 3; i++) &#123;</div><div class="line">		document.getElementById(&quot;tab&quot; + i).style.display = &quot;none&quot;;</div><div class="line">		document.getElementById(&quot;id&quot; + i).className = &quot;white&quot;;</div><div class="line">	&#125;</div><div class="line">	document.getElementById(&quot;tab&quot; + num).style.display = &quot;block&quot;;</div><div class="line">	document.getElementById(&quot;id&quot; + num).className = &quot;blue&quot;;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="在这里先把tab0-tab1-tab2都设置成display-none-class属性为white-然后再根据所传参数来设置成display-block-class为blue方法一的HTML"><a href="#在这里先把tab0-tab1-tab2都设置成display-none-class属性为white-然后再根据所传参数来设置成display-block-class为blue方法一的HTML" class="headerlink" title="在这里先把tab0, tab1, tab2都设置成display:none, class属性为white, 然后再根据所传参数来设置成display:block, class为blue方法一的HTML:"></a>在这里先把tab0, tab1, tab2都设置成display:none, class属性为white, 然后再根据所传参数来设置成display:block, class为blue方法一的HTML:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;wrapper&quot;&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">	&lt;li id=&quot;id0&quot; onclick=&quot;showTab(0)&quot; class=&quot;blue&quot;&gt;Javascript&lt;/li&gt;</div><div class="line">	&lt;li id=&quot;id1&quot; onclick=&quot;showTab(1)&quot;&gt;Action Script&lt;/li&gt;</div><div class="line">	&lt;li id=&quot;id2&quot; onclick=&quot;showTab(2)&quot;&gt;Photoshop&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&lt;div class=&quot;one&quot; id=&quot;tab0&quot; style=&quot;display:block&quot;&gt;</div><div class="line">	&lt;p&gt; &lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;one&quot; id=&quot;tab1&quot;&gt;</div><div class="line">	&lt;p&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;one&quot; id=&quot;tab2&quot;&gt;</div><div class="line">	&lt;p&gt;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="JS-方法二："><a href="#JS-方法二：" class="headerlink" title="JS:方法二："></a>JS:方法二：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">function showTab(i, j) &#123;</div><div class="line">	var x;</div><div class="line">	var y;</div><div class="line">	var l, m;</div><div class="line">	for (l = 0; l &lt; 3; l++) &#123;</div><div class="line">		x = document.getElementById(&quot;id&quot; + l);</div><div class="line">		if (i == l) &#123;</div><div class="line">			x.className = &quot;blue&quot;;</div><div class="line">		&#125; else &#123;</div><div class="line">			x.className = &quot;white&quot;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	for (m = 0; m &lt; 3; m++) &#123;</div><div class="line">		y = document.getElementById(&quot;tab&quot; + m);</div><div class="line">		if (j == m) &#123;</div><div class="line">			y.style.display = &quot;block&quot;;</div><div class="line">		&#125; else &#123;</div><div class="line">			y.style.display = &quot;none&quot;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="方法二的HTML代码："><a href="#方法二的HTML代码：" class="headerlink" title="方法二的HTML代码："></a>方法二的HTML代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;wrapper&quot;&gt;</div><div class="line">	&lt;ul&gt;</div><div class="line">		&lt;li id=&quot;id0&quot; onclick=&quot;showTab(0,0)&quot; class=&quot;blue&quot;&gt;Javascript&lt;/li&gt;</div><div class="line">		&lt;li id=&quot;id1&quot; onclick=&quot;showTab(1,1)&quot;&gt;Action Script&lt;/li&gt;</div><div class="line">		&lt;li id=&quot;id2&quot; onclick=&quot;showTab(2,2)&quot;&gt;Photoshop&lt;/li&gt;</div><div class="line">	&lt;/ul&gt;</div><div class="line">	&lt;div class=&quot;one&quot; id=&quot;tab0&quot; style=&quot;display:block&quot;&gt;</div><div class="line">		&lt;p&gt;&lt;/p&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;two&quot; id=&quot;tab1&quot; style=&quot;display:none&quot;&gt;</div><div class="line">		&lt;p&gt;&lt;/p&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;three&quot; id=&quot;tab2&quot; style=&quot;display:none&quot;&gt;</div><div class="line">		&lt;p&gt;&lt;/p&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li><strong>注意</strong>这种方法不能去掉l,m, 直接写成for (i=0; i&lt;3; i++), for (j=0; j&lt;3; j++)因为i原本是函数的参数，它的值是外面传进来的，如果将for (l=0; l&lt;3; l++)换成for (i=0; i&lt;3; i++)的话，i就被重新赋值了，showTab(0,0)、showTab(1,1)、showTab(1,2)括号里无论传任何值都没有区别了</li>
</ul>
<p>####方法三：html代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;wrap&quot;&gt;</div><div class="line">	&lt;ul id=&quot;tag&quot;&gt;</div><div class="line">		&lt;li class=&quot;current&quot;&gt;标签一&lt;/li&gt;</div><div class="line">		&lt;li&gt;标签二&lt;/li&gt;</div><div class="line">		&lt;li&gt;标签三&lt;/li&gt;</div><div class="line">	&lt;/ul&gt;</div><div class="line">	&lt;div id=&quot;tagContent&quot;&gt;</div><div class="line">		&lt;div&gt; 内容一</div><div class="line">			&lt;br&gt;内容一 &lt;/div&gt;</div><div class="line">		&lt;div&gt; 内容二</div><div class="line">			&lt;br&gt;内容二 &lt;/div&gt;</div><div class="line">		&lt;div&gt; 内容三</div><div class="line">			&lt;br&gt;内容三 &lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h5 id="css代码："><a href="#css代码：" class="headerlink" title="css代码："></a>css代码：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">     *&#123;margin:0;padding:0;&#125;</div><div class="line">     .wrap&#123;width:500px; margin:10px auto; &#125;</div><div class="line">     #tag&#123; width:498px; overflow:hidden; background:#000; border:1px solid #000; &#125;</div><div class="line">     #tag li&#123;list-style:none; float:left; margin-right:0px; color:white; padding:5px 20px; cursor:pointer;&#125;</div><div class="line">     #tag .current&#123; color:#000; background:#ccc; &#125;</div><div class="line">     #tagContent div&#123; width:498px; border:1px solid #000; border-top:none; height:300px; display:none; &#125;</div><div class="line">    function tabs(title,content)&#123;</div><div class="line">      var tag=document.getElementById(title).children; //获取Tag下的li，即Tag标签 </div><div class="line">      var content=document.getElementById(content).children; //获取Tag标签对应的内容 </div><div class="line">      content[0].style.display = &quot;block&quot;; //默认显示第一个标签的内容 </div><div class="line">      var len= tag.length; </div><div class="line">    for(var i=0; i&lt;len; i++)   //无论点击谁都能实现当前显示，其余隐藏</div><div class="line">      &#123; </div><div class="line">      tag[i].number=i;</div><div class="line"></div><div class="line">      tag[i].onclick = function()     //0级DOM的事件句柄注册</div><div class="line"></div><div class="line">          &#123;     </div><div class="line"></div><div class="line">             for(var n=0; n&lt;len; n++)</div><div class="line"></div><div class="line">             &#123;</div><div class="line">                tag[n].className=&quot;&quot;;</div><div class="line">                content[n].style.display=&quot;none&quot;; </div><div class="line">              &#125;   //首先将全部的div隐藏</div><div class="line"></div><div class="line">          tag[this.number].className = &quot;current&quot;; </div><div class="line">          content[this.number].style.display = &quot;block&quot;; </div><div class="line">        &#125; </div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    tabs(&quot;tag&quot;,&quot;tagContent&quot;);//你想实现tab切换的某一个实例。</div><div class="line">上面用到了chidren，可以用childNodes来实现该方法，但是要去除里面空白节点。代码如下：（加黑处就是去除空白节点）</div><div class="line"></div><div class="line">function tabs(title,content)&#123;</div><div class="line">        var tag=document.getElementById(title).childNodes; </div><div class="line">         console.log(tag.length);// 打印结果为7 </div><div class="line">         for(var i=0;i&lt;tag.length;i++)&#123;</div><div class="line">            if(tag[i].nodeType==3&amp;&amp;/\s/.test(tag[i].nodeValue))&#123;</div><div class="line">                tag[i].parentNode.removeChild(tag[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        console.log(tag.length);// 打印结果为3</div><div class="line"></div><div class="line">      var content=document.getElementById(content).childNodes; </div><div class="line">      console.log(content.length);// 打印结果为7</div><div class="line">      for(var i=0;i&lt;content.length;i++)&#123;</div><div class="line">          if(content[i].nodeType==3&amp;&amp;/\s/.test(content[i].nodeValue))&#123;</div><div class="line">              content[i].parentNode.removeChild(content[i]);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      console.log(content.length);// 打印结果为3</div><div class="line"></div><div class="line">      content[0].style.display = &quot;block&quot;; //默认显示第一个标签的内容 </div><div class="line">      var len= tag.length; </div><div class="line">    for(var i=0; i&lt;len; i++)   //无论点击谁都能实现当前显示，其余隐藏</div><div class="line">      &#123;  </div><div class="line"></div><div class="line">      tag[i].number=i;</div><div class="line"></div><div class="line">      tag[i].onclick = function()     //0级DOM的事件句柄注册</div><div class="line"></div><div class="line">          &#123;     </div><div class="line"></div><div class="line">             for(var n=0; n&lt;len; n++)</div><div class="line"></div><div class="line">             &#123;</div><div class="line">                tag[n].className=&quot;&quot;;</div><div class="line">                content[n].style.display=&quot;none&quot;; </div><div class="line">              &#125;   //首先将全部的div隐藏</div><div class="line"></div><div class="line">          //console.log(this.number);</div><div class="line">          tag[this.number].className = &quot;current&quot;; </div><div class="line">          content[this.number].style.display = &quot;block&quot;; </div><div class="line">        &#125; </div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    tabs(&quot;tag&quot;,&quot;tagContent&quot;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异步]]></title>
      <url>/2015/12/20/2015-11-18-async%5Bnodejs%20%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%5D/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.fens.me/nodejs-async/" target="_blank" rel="external">出处</a></p>
<h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ol>
<li>Async介绍</li>
<li>Async安装<br>…….<br><a href="https://github.com/caolan/async" target="_blank" rel="external">项目地址</a>.</li>
</ol>
<a id="more"></a>
<p><a href="http://blog.fens.me/nodejs-async/" target="_blank" rel="external">出处</a></p>
<h3 id="目录：-1"><a href="#目录：-1" class="headerlink" title="目录："></a>目录：</h3><ol>
<li>Async介绍</li>
<li>Async安装</li>
<li>Async函数介绍</li>
<li>async_demo使用介绍</li>
<li>场景：对数据库的连续操作</li>
<li>async_demo我的分支</li>
</ol>
<h3 id="1-Async介绍"><a href="#1-Async介绍" class="headerlink" title="1. Async介绍"></a>1. Async介绍</h3><blockquote>
<p>Async是一个流程控制工具包，提供了直接而强大的异步功能。基于Javascript为Node.js设计，同时也可以直接在浏览器中使用。Async提供了大约20个函数，包括常用的 map, reduce, filter, forEach 等，异步流程控制模式包括，串行(series)，并行(parallel)，瀑布(waterfall)等。</p>
</blockquote>
<p><a href="https://github.com/caolan/async" target="_blank" rel="external">项目地址</a>.</p>
<h3 id="2-Async安装"><a href="#2-Async安装" class="headerlink" title="2. Async安装"></a>2. Async安装</h3><p><strong> 我们做实验时，安装async有两个方式: </strong></p>
<ol>
<li>独立安装async</li>
<li>下载async demo代码安装</li>
</ol>
<ul>
<li><p>我建议大家用第二种方式安装，这样子实例的代码就都有了。</p>
</li>
<li><p>独立安装async(1)</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~ D:\workspace\javascript&gt;mkdir nodejs-async &amp;&amp; cd nodejs-async</div><div class="line">~ D:\workspace\javascript\nodejs-async&gt;npm install async</div><div class="line">npm http GET https://registry.npmjs.org/async</div><div class="line">npm http 304 https://registry.npmjs.org/async</div><div class="line">async@0.2.9 node_modules\async</div></pre></td></tr></table></figure>
<p><a href="https://github.com/bsspirit/async_demo" target="_blank" rel="external">打开网页,参照示例学习</a></p>
<ul>
<li>下载async demo代码安装(2)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">~ D:\workspace\javascript&gt;git clone git@github.com:bsspirit/async_demo.git nodejs-async</div><div class="line">~ D:\workspace\javascript&gt;cd nodejs-async</div><div class="line">~ D:\workspace\javascript\nodejs-async&gt;npm install</div><div class="line">npm http GET https://registry.npmjs.org/moment</div><div class="line">npm http GET https://registry.npmjs.org/async</div><div class="line">npm http 304 https://registry.npmjs.org/moment</div><div class="line">npm http 304 https://registry.npmjs.org/async</div><div class="line">async@0.2.9 node_modules\async</div><div class="line">moment@2.1.0 node_modules\moment</div></pre></td></tr></table></figure>
<ul>
<li>这套demo示例，比较全面的介绍了async的使用，有中文注释。 感谢github社区原创作者freewind，代码更新的贡献者alsotang。当然，我的分支中也修改了一部分代码。在本文最后，我会写到changelog中！*</li>
</ul>
<h3 id="3-Async函数介绍"><a href="#3-Async函数介绍" class="headerlink" title="3. Async函数介绍"></a>3. Async函数介绍</h3><p>基于async的0.2.9版本。</p>
<ul>
<li><p>async主要实现了三个部分的流程控制功能： *</p>
</li>
<li><p>集合: Collections</p>
</li>
<li>流程控制: Control Flow</li>
<li><p>工具类: Utils</p>
</li>
<li><p>1). 集合: Collections  *</p>
</li>
<li><p>each: 如果想对同一个集合中的所有元素都执行同一个异步操作。</p>
</li>
<li>map: 对集合中的每一个元素，执行某个异步操作，得到结果。所有的结果将汇总到最终的callback里。与each的区别是，each只关心操作不管最后的值，而map关心的最后产生的值。</li>
<li>filter: 使用异步操作对集合中的元素进行筛选, 需要注意的是，iterator的callback只有一个参数，只能接收true或false。</li>
<li>reject: reject跟filter正好相反，当测试为true时则抛弃</li>
<li>reduce: 可以让我们给定一个初始值，用它与集合中的每一个元素做运算，最后得到一个值。reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。</li>
<li>detect: 用于取得集合中满足条件的第一个元素。</li>
<li>sortBy: 对集合内的元素进行排序，依据每个元素进行某异步操作后产生的值，从小到大排序。</li>
<li>some: 当集合中是否有至少一个元素满足条件时，最终callback得到的值为true，否则为false.</li>
<li>every: 如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false</li>
<li><p>concat: 将多个异步操作的结果合并为一个数组。</p>
</li>
<li><p>2). 流程控制: Control Flow *</p>
</li>
<li><p>series: 串行执行，一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。</p>
</li>
<li>parallel: 并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。</li>
<li>whilst: 相当于while，但其中的异步调用将在完成后才会进行下一次循环。</li>
<li>doWhilst: 相当于do…while, doWhilst交换了fn,test的参数位置，先执行一次循环，再做test判断。</li>
<li>until: until与whilst正好相反，当test为false时循环，与true时跳出。其它特性一致。</li>
<li>doUntil: doUntil与doWhilst正好相反，当test为false时循环，与true时跳出。其它特性一致。</li>
<li>forever: 无论条件循环执行，如果不出错，callback永远不被执行。</li>
<li>waterfall: 按顺序依次执行一组函数。每个函数产生的值，都将传给下一个。</li>
<li>compose: 创建一个包括一组异步函数的函数集合，每个函数会消费上一次函数的返回值。把f(),g(),h()异步函数，组合成f(g(h()))的形式，通过callback得到返回值。</li>
<li>applyEach: 实现给一数组中每个函数传相同参数，通过callback返回。如果只传第一个参数，将返回一个函数对象，我可以传参调用。</li>
<li>queue: 是一个串行的消息队列，通过限制了worker数量，不再一次性全部执行。当worker数量不够用时，新加入的任务将会排队等候，直到有新的worker可用。</li>
<li>cargo: 一个串行的消息队列，类似于queue，通过限制了worker数量，不再一次性全部执行。不同之处在于，cargo每次会加载满额的任务做为任务单元，只有任务单元中全部执行完成后，才会加载新的任务单元。</li>
<li>auto: 用来处理有依赖关系的多个任务的执行。</li>
<li>iterator: 将一组函数包装成为一个iterator，初次调用此iterator时，会执行定义中的第一个函数并返回第二个函数以供调用。</li>
<li>apply: 可以让我们给一个函数预绑定多个参数并生成一个可直接调用的新函数，简化代码。</li>
<li>nextTick: 与nodejs的nextTick一样，再最后调用函数。</li>
<li>times: 异步运行,times可以指定调用几次，并把结果合并到数组中返回</li>
<li>timesSeries: 与time类似，唯一不同的是同步执行</li>
<li><p>3). 工具类: Utils *</p>
</li>
<li><p>memoize: 让某一个函数在内存中缓存它的计算结果。对于相同的参数，只计算一次，下次就直接拿到之前算好的结果。</p>
</li>
<li>unmemoize: 让已经被缓存的函数，返回不缓存的函数引用。</li>
<li>log: 执行某异步函数，并记录它的返回值，日志输出。</li>
<li>dir: 与log类似，不同之处在于，会调用浏览器的console.dir()函数，显示为DOM视图。</li>
<li>noConflict: 如果之前已经在全局域中定义了async变量，当导入本async.js时，会先把之前的async变量保存起来，然后覆盖它。仅仅用于浏览器端，在nodejs中没用，这里无法演示。</li>
</ul>
<h3 id="4-async-demo使用介绍"><a href="#4-async-demo使用介绍" class="headerlink" title="4. async_demo使用介绍"></a>4. async_demo使用介绍</h3><p><a href="https://github.com/bsspirit/async_demo" target="_blank" rel="external">详细使用请参考github源代码：</a></p>
<ul>
<li>每个函数的用法，有非常详细的实例！！ *</li>
</ul>
<h3 id="5-场景：对数据库的连续操作"><a href="#5-场景：对数据库的连续操作" class="headerlink" title="5. 场景：对数据库的连续操作"></a>5. 场景：对数据库的连续操作</h3><ul>
<li><p>这个场景进背景情况，请参考文章：用Nodejs连接MySQL  </p>
</li>
<li><p>原场景中，对数据串行操作，增删改查(CRUD)，代码如下： </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">var mysql = require(&apos;mysql&apos;);</div><div class="line">var conn = mysql.createConnection(&#123;</div><div class="line">    host: &apos;localhost&apos;,</div><div class="line">    user: &apos;nodejs&apos;,</div><div class="line">    password: &apos;nodejs&apos;,</div><div class="line">    database: &apos;nodejs&apos;,</div><div class="line">    port: 3306</div><div class="line">&#125;);</div><div class="line">conn.connect();</div><div class="line">var insertSQL = &apos;insert into t_user(name) values(&quot;conan&quot;),(&quot;fens.me&quot;)&apos;;</div><div class="line">var selectSQL = &apos;select * from t_user limit 10&apos;;</div><div class="line">var deleteSQL = &apos;delete from t_user&apos;;</div><div class="line">var updateSQL = &apos;update t_user set name=&quot;conan update&quot;  where name=&quot;conan&quot;&apos;;</div><div class="line">//delete</div><div class="line">conn.query(deleteSQL, function (err0, res0) &#123;</div><div class="line">    if (err0) console.log(err0);</div><div class="line">    console.log(&quot;DELETE Return ==&gt; &quot;);</div><div class="line">    console.log(res0);</div><div class="line">    //insert</div><div class="line">    conn.query(insertSQL, function (err1, res1) &#123;</div><div class="line">        if (err1) console.log(err1);</div><div class="line">        console.log(&quot;INSERT Return ==&gt; &quot;);</div><div class="line">        console.log(res1);</div><div class="line">        //query</div><div class="line">        conn.query(selectSQL, function (err2, rows) &#123;</div><div class="line">            if (err2) console.log(err2);</div><div class="line"></div><div class="line">            console.log(&quot;SELECT ==&gt; &quot;);</div><div class="line">            for (var i in rows) &#123;</div><div class="line">                console.log(rows[i]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //update</div><div class="line">            conn.query(updateSQL, function (err3, res3) &#123;</div><div class="line">                if (err3) console.log(err3);</div><div class="line">                console.log(&quot;UPDATE Return ==&gt; &quot;);</div><div class="line">                console.log(res3);</div><div class="line"></div><div class="line">                //query</div><div class="line">                conn.query(selectSQL, function (err4, rows2) &#123;</div><div class="line">                    if (err4) console.log(err4);</div><div class="line"></div><div class="line">                    console.log(&quot;SELECT ==&gt; &quot;);</div><div class="line">                    for (var i in rows2) &#123;</div><div class="line">                        console.log(rows2[i]);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">//conn.end();</div></pre></td></tr></table></figure>
<blockquote>
<p>为了实现了串行操作，所有的调用都是在callback中实现的，5层嵌套结构。这种代码已经变得不可以维护了。所以，需要用async库，对上面的代码结构进行重写！修改后的代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">var mysql = require(&apos;mysql&apos;);</div><div class="line">var async = require(&apos;async&apos;);</div><div class="line"></div><div class="line">var conn = mysql.createConnection(&#123;</div><div class="line">    host: &apos;localhost&apos;,</div><div class="line">    user: &apos;nodejs&apos;,</div><div class="line">    password: &apos;nodejs&apos;,</div><div class="line">    database: &apos;nodejs&apos;,</div><div class="line">    port: 3306</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var sqls = &#123;</div><div class="line">    &apos;insertSQL&apos;: &apos;insert into t_user(name) values(&quot;conan&quot;),(&quot;fens.me&quot;)&apos;,</div><div class="line">    &apos;selectSQL&apos;: &apos;select * from t_user limit 10&apos;,</div><div class="line">    &apos;deleteSQL&apos;: &apos;delete from t_user&apos;,</div><div class="line">    &apos;updateSQL&apos;: &apos;update t_user set name=&quot;conan update&quot;  where name=&quot;conan&quot;&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var tasks = [&apos;deleteSQL&apos;, &apos;insertSQL&apos;, &apos;selectSQL&apos;, &apos;updateSQL&apos;, &apos;selectSQL&apos;];</div><div class="line">async.eachSeries(tasks, function (item, callback) &#123;</div><div class="line">    console.log(item + &quot; ==&gt; &quot; + sqls[item]);</div><div class="line">    conn.query(sqls[item], function (err, res) &#123;</div><div class="line">        console.log(res);</div><div class="line">        callback(err, res);</div><div class="line">    &#125;);</div><div class="line">&#125;, function (err) &#123;</div><div class="line">    console.log(&quot;err: &quot; + err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>控制台输出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">deleteSQL ==&gt; delete from t_user</div><div class="line">&#123; fieldCount: 0,</div><div class="line">  affectedRows: 0,</div><div class="line">  insertId: 0,</div><div class="line">  serverStatus: 34,</div><div class="line">  warningCount: 0,</div><div class="line">  message: &apos;&apos;,</div><div class="line">  protocol41: true,</div><div class="line">  changedRows: 0 &#125;</div><div class="line">insertSQL ==&gt; insert into t_user(name) values(&quot;conan&quot;),(&quot;fens.me&quot;)</div><div class="line">&#123; fieldCount: 0,</div><div class="line">  affectedRows: 2,</div><div class="line">  insertId: 45,</div><div class="line">  serverStatus: 2,</div><div class="line">  warningCount: 0,</div><div class="line">  message: &apos;&amp;Records: 2  Duplicates: 0  Warnings: 0&apos;,</div><div class="line">  protocol41: true,</div><div class="line">  changedRows: 0 &#125;</div><div class="line">selectSQL ==&gt; select * from t_user limit 10</div><div class="line">[ &#123; id: 45,</div><div class="line">    name: &apos;conan&apos;,</div><div class="line">    create_date: Fri Sep 13 2013 12:24:51 GMT+0800 (中国标准时间) &#125;,</div><div class="line">  &#123; id: 46,</div><div class="line">    name: &apos;fens.me&apos;,</div><div class="line">    create_date: Fri Sep 13 2013 12:24:51 GMT+0800 (中国标准时间) &#125; ]</div><div class="line">updateSQL ==&gt; update t_user set name=&quot;conan update&quot;  where name=&quot;conan&quot;</div><div class="line">&#123; fieldCount: 0,</div><div class="line">  affectedRows: 1,</div><div class="line">  insertId: 0,</div><div class="line">  serverStatus: 2,</div><div class="line">  warningCount: 0,</div><div class="line">  message: &apos;(Rows matched: 1  Changed: 1  Warnings: 0&apos;,</div><div class="line">  protocol41: true,</div><div class="line">  changedRows: 1 &#125;</div><div class="line">selectSQL ==&gt; select * from t_user limit 10</div><div class="line">[ &#123; id: 45,</div><div class="line">    name: &apos;conan update&apos;,</div><div class="line">    create_date: Fri Sep 13 2013 12:24:51 GMT+0800 (中国标准时间) &#125;,</div><div class="line">  &#123; id: 46,</div><div class="line">    name: &apos;fens.me&apos;,</div><div class="line">    create_date: Fri Sep 13 2013 12:24:51 GMT+0800 (中国标准时间) &#125; ]</div><div class="line">err: null</div></pre></td></tr></table></figure>
<blockquote>
<p>代码一下读性就增强了许多倍，这就是高效的开发。<br> 不用不知道，一用真强大！！！<br>当然还有其他的工作流框架来完成这件事情step,then.js,windjs。<br>windjs请参考：wind.js助力异步编程 </p>
</blockquote>
<h3 id="6-async-demo我的分支"><a href="#6-async-demo我的分支" class="headerlink" title="6. async_demo我的分支"></a>6. async_demo我的分支</h3><p><a href="https://github.com/bsspirit/async_demo" target="_blank" rel="external">demo</a></p>
<ol>
<li>forEach.js改名为each.js</li>
<li>each.js文件中的async.forEach，改为async.each</li>
<li>map.js增加mapLimit函数</li>
<li>filter_reject.js对注释补充</li>
<li>filter_reject.js增加rejectSeries函数</li>
<li>reduce.js增加注释</li>
<li>detect.js增加注释</li>
<li>sortBy.js增加注释</li>
<li>some.js对注释补充</li>
<li>every.js对注释补充和修改</li>
<li>series.js调整注释格式</li>
<li>parallel.js调整注释格式</li>
<li>parallel.js增加parallelLimit函数</li>
<li>whilist_until.js调整注释格式</li>
<li>whilist_until.js增加doWhilst函数</li>
<li>whilist_until.js增加doUntil函数</li>
<li>whilist_until.js增加forever函数</li>
<li>waterfall.js调整注释格式</li>
<li>增加compose.js文件</li>
<li>apply.js补充注释并增加一个实例</li>
<li>修改nextTick.js实例</li>
<li>增加times.js文件，包括times和timesSeries函数</li>
<li>修改iterator.js实例</li>
<li>修正auto.js关于第二个实例的错误解释</li>
<li>修改queue.js实例和注释</li>
<li>修改cargo.js文件</li>
<li>增加applyEach.js文件</li>
<li>修改utils.js实例和注释</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速排序（Quicksort）的Javascript实现]]></title>
      <url>/2015/07/15/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88Quicksort%EF%BC%89%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>日本程序员norahiko，写了一个排序算法的<a href="http://jsdo.it/norahiko/oxIy/fullscreen" target="_blank" rel="external">动画演示</a>，非常有趣。</p>
<p><a href="http://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank" rel="external">排序算法</a>（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。<br>目前，最常见的排序算法大概有七八种，其中<a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="external">“快速排序”</a>（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主C. A. R. Hoare（1934–）于1960时提出来的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/201324-90ffd235d11693ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="[地址](http://jsdo.it/norahiko/oxIy/fullscreen)"></p>
<p><a href="http://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank" rel="external">排序算法</a>（Sorting algorithm）是计算机科学最古老、最基本的课题之一。要想成为合格的程序员，就必须理解和掌握各种排序算法。</p>
<p>目前，最常见的排序算法大概有七八种，其中<a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="external">“快速排序”</a>（Quicksort）使用得最广泛，速度也较快。它是图灵奖得主C. A. R. Hoare（1934–）于1960时提出来的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/201324-75bf12dee8dd18ec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>“快速排序”的思想很简单，整个排序过程只需要三步：</p>
<blockquote>
<p>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p>
</blockquote>
<p>举例来说，现在有一个数据集{85, 24, 63, 45, 17, 31, 96, 50}，怎么对其排序呢？<br>第一步，选择中间的元素45作为”基准”。（基准值可以任意选择，但是选择中间的值比较容易理解。）<br><img src="http://upload-images.jianshu.io/upload_images/201324-629a85a9a5530ae3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>第二步，按照顺序，将每个元素与”基准”进行比较，形成两个子集，一个”小于45”，另一个”大于等于45”。<br><img src="http://upload-images.jianshu.io/upload_images/201324-8a25858f1176a875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>第三步，对两个子集不断重复第一步和第二步，直到所有子集只剩下一个元素为止。<br><img src="http://upload-images.jianshu.io/upload_images/201324-23dc83b11607e7a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/201324-89a6ca11a078a28c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/201324-a198982b852a5b46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/201324-f110ec937a56452a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>下面参照网上的资料（<a href="http://acatalept.com/blog/2008/10/28/stable-quicksort-in-javascript/" target="_blank" rel="external">这里</a>和<a href="http://www.stoimen.com/blog/2010/06/11/friday-algorithms-quicksort-difference-between-php-and-javascript/" target="_blank" rel="external">这里</a>），用Javascript语言实现上面的算法。<br>首先，定义一个quickSort函数，它的参数是一个数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var quickSort = function(arr) &#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后，检查数组的元素个数，如果小于等于1，就返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var quickSort = function(arr) &#123;</div><div class="line">　　**if (arr.length &lt;= 1) &#123; return arr; &#125;**</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>接着，选择”基准”（pivot），并将其与原数组分离，再定义两个空数组，用来存放一左一右的两个子集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var quickSort = function(arr) &#123;</div><div class="line">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class="line">　　**var pivotIndex = Math.floor(arr.length / 2) ;**</div><div class="line">　　**var pivot = arr.splice(pivotIndex, 1)[0];**</div><div class="line">　　**var left = [];**</div><div class="line">　　**var right = [];**</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后，开始遍历数组，小于”基准”的元素放入左边的子集，大于基准的元素放入右边的子集。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var quickSort = function(arr) &#123;</div><div class="line">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class="line">　　var pivotIndex = Math.floor(arr.length / 2) ;</div><div class="line">　　var pivot = arr.splice(pivotIndex, 1)[0];</div><div class="line">　　var left = [];</div><div class="line">　　var right = [];</div><div class="line">　　**for (var i = 0; i &lt; arr.length; i++)&#123;**</div><div class="line">　　　　**if (arr[i] &lt; pivot) &#123;**</div><div class="line">　　　　　　**left.push(arr[i]);**</div><div class="line">　　　　**&#125; else &#123;**</div><div class="line">　　　　　　**right.push(arr[i]);**</div><div class="line">　　　　**&#125;**</div><div class="line">　　**&#125;**</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>最后，使用递归不断重复这个过程，就可以得到排序后的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var quickSort = function(arr) &#123;</div><div class="line">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class="line">　　var pivotIndex = Math.floor(arr.length / 2);</div><div class="line">　　var pivot = arr.splice(pivotIndex, 1)[0];</div><div class="line">　　var left = [];</div><div class="line">　　var right = [];</div><div class="line">　　for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">　　　　if (arr[i] &lt; pivot) &#123;</div><div class="line">　　　　　　left.push(arr[i]);</div><div class="line">　　　　&#125; else &#123;</div><div class="line">　　　　　　right.push(arr[i]);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　**return quickSort(left).concat([pivot], quickSort(right));**</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用的时候，直接调用quickSort()就行了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/201324-ee7a842a1a1954e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>(END<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="external">摘自</a>)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[10个常见的Node-js面试题]]></title>
      <url>/2015/07/13/10%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84Node-js%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这篇文章来自 Github 上的一位开发者收集整理的 Node.js 中文学习资料和教程导航。Node 是一个服务器端 JavaScript 解释器，它将改变服务器应该如何工作的概念，它的目标是帮助程序员构建高度可伸缩的应用程序。这些参考资料和教程能够帮助你更好的掌握 Node.js 的应用。</p>
<p>如果你希望找一份有关Node.js的工作，但又不知道从哪里入手评测自己对Node.js的掌握程度。 本文就为你罗列了10个常见的Node.js面试题，分别考察了Node.js编程相关的几个主要方面。<br>在进入正文之前，需要提前声明两点：</p>
<ol>
<li>这些问题只是Node.js知识体系的一个局部，并不能完全考察被面试者的实际开发能力。</li>
<li>对现实世界开发中遇到的问题，需要的是随机应变与团队合作，所以你可以尝试结对编程。</li>
</ol>
<h3 id="Node-js面试题列表"><a href="#Node-js面试题列表" class="headerlink" title="Node.js面试题列表"></a>Node.js面试题列表</h3><ul>
<li>什么是错误优先的回调函数？</li>
<li>如何避免回调地狱？</li>
<li>如何用Node来监听80端口？</li>
<li>什么是事件循环？</li>
<li>哪些工具可以用来保证一致的编程风格？</li>
<li>运算错误与程序员错误的区别？</li>
<li>使用NPM有哪些好处？</li>
<li>什么是stub？举个使用场景？</li>
<li>什么是测试金字塔？对于HTTP API，如何利用测试金字塔？</li>
<li>你最喜欢的HTTP框架，并说明原因？</li>
</ul>
<p>现在，我们依次来解答这些问题吧。</p>
<h3 id="什么是错误优先的回调函数？"><a href="#什么是错误优先的回调函数？" class="headerlink" title="什么是错误优先的回调函数？"></a>什么是错误优先的回调函数？</h3><p>错误优先的回调函数用于传递错误和数据。第一个参数始终应该是一个错误对象， 用于检查程序是否发生了错误。其余的参数用于传递数据。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fs.readFile(filePath, function(err, data) &#123;  </div><div class="line">	if (err) &#123;</div><div class="line">		//handle the error</div><div class="line">	&#125;</div><div class="line">	// use the data object</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>解析：这个题目的主要作用在于检查被面试者对于Node中异步操作的一些基本知识的掌握。</p>
<h3 id="如何避免回调地狱"><a href="#如何避免回调地狱" class="headerlink" title="如何避免回调地狱"></a>如何避免回调地狱</h3><p>你可以有如下几个方法：</p>
<ul>
<li>模块化：将回调函数分割为独立的函数</li>
<li>使用Promises</li>
<li>使用yield来计算生成器或Promise</li>
</ul>
<p>解析：这个问题有很多种答案，取决你使用的场景，例如ES6, ES7，或者一些控制流库。</p>
<h3 id="如何用Node监听80端口"><a href="#如何用Node监听80端口" class="headerlink" title="如何用Node监听80端口"></a>如何用Node监听80端口</h3><p>这题有陷阱！在类Unix系统中你不应该尝试去监听80端口，因为这需要超级用户权限。 因此不推荐让你的应用直接监听这个端口。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/201324-f5ea643a3318968c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>目前，如果你一定要让你的应用监听80端口的话，你可以有通过在Node应用的前方再增加一层反向代理 （例如<a href="http://nginx.org/" target="_blank" rel="external">nginx</a>）来实现，如下图所示。否则，建议你直接监听大于1024的端口。</p>
<blockquote>
<p>方向代理指的是以代理服务器来接收Internet上的连接请求，然后将请求转发给内部网络上的服务器， 并且将服务器返回的结果发送给客户端。</p>
</blockquote>
<p>关于反向代理的更多内容，建议你阅读<a href="http://www.cnblogs.com/edisonchou/p/4126742.html" target="_blank" rel="external">这篇文章</a>。</p>
<p>解释：这个问题用于检查被面试者是否有实际运行Node应用的经验。</p>
<p>什么是事件循环<br>Node采用的是单线程的处理机制（所有的I/O请求都采用非阻塞的工作方式），至少从Node.js开发者的角度是这样的。 而在底层，Node.js借助<a href="https://github.com/libuv/libuv" target="_blank" rel="external">libuv</a>来作为抽象封装层， 从而屏蔽不同操作系统的差异，Node可以借助livuv来来实现多线程。下图表示了Node和libuv的关系。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/201324-7fd0c5aa6ddee88f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>Libuv库负责Node API的执行。它将不同的任务分配给不同的线程，形成一个事件循环， 以异步的方式将任务的执行结果返回给V8引擎。可以简单用下面这张图来表示。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/201324-36b641c049a7fc4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>每一个I/O都需要一个回调函数——一旦执行完便推到事件循环上用于执行。 如果你需要更多详细的解释，可以参考<a href="https://www.youtube.com/embed/8aGhZQkoFbQ" target="_blank" rel="external">这个视频</a>。 你也可以参考<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="external">这篇文章</a>。</p>
<p>解释：这用于检查Node.js的底层知识，例如什么是libuv，它的作用是什么</p>
<h3 id="哪些工具可以用来保证一致性的代码风格"><a href="#哪些工具可以用来保证一致性的代码风格" class="headerlink" title="哪些工具可以用来保证一致性的代码风格"></a>哪些工具可以用来保证一致性的代码风格</h3><p>你可以选择如下的工具：</p>
<ul>
<li><a href="http://jslint.com/" target="_blank" rel="external">JSLint</a></li>
<li><a href="http://jshint.com/" target="_blank" rel="external">JSHint</a></li>
<li><a href="http://eslint.org/" target="_blank" rel="external">ESLint</a></li>
<li><a href="http://jscs.info/" target="_blank" rel="external">JSCS</a> - 推荐</li>
</ul>
<p>在团队开发中，这些工具对于编写代码非常的有帮助，能够帮助团队开发者强制执行规定的风格指南， 还能够通过静态分析捕获常见的错误。</p>
<p>解析：用于检查被面试者是否有大型项目开发经验。</p>
<h3 id="运算错误与程序员错误的区别"><a href="#运算错误与程序员错误的区别" class="headerlink" title="运算错误与程序员错误的区别"></a>运算错误与程序员错误的区别</h3><p>运算错误并不是bug，这是和系统相关的问题，例如请求超时或者硬件故障。而程序员错误就是所谓的bug。</p>
<p>解析：这个题目和Node关系并不大，用于考察面试者的基础知识。</p>
<p>使用NPM有哪些好处？</p>
<p>通过NPM，你可以安装和管理项目的依赖，并且能够指明依赖项的具体版本号。 对于Node应用开发而言，你可以通过package.json文件来管理项目信息，配置脚本， 以及指明项目依赖的具体版本。</p>
<p>关于NPM的更多信息，你可以参考<a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="external">官方文档</a>。</p>
<p>解析：它能考察面试者使用npm命令的基础知识和Node.js开发的实际经验。</p>
<p>什么是Stub？举个使用场景</p>
<p>Stub是用于模拟一个组件或模块的函数或程序。在测试用例中， 简单的说，你可以用Stub去模拟一个方法，从而避免调用真实的方法， 使用Stub你还可以返回虚构的结果。你可以配合断言使用Stub。</p>
<p>举个例子，在一个读取文件的场景中，当你不想读取一个真正的文件时：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">var readFileStub = sinon.stub(fs, &apos;readFile&apos;, function (path, cb) &#123;  </div><div class="line">	return cb(null, &apos;filecontent&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(readFileStub).to.be.called;  </div><div class="line">readFileStub.restore();</div></pre></td></tr></table></figure>
<blockquote>
<p>在单元测试中：Stub是完全模拟一个外部依赖，而Mock常用来判断测试通过还是失败。</p>
</blockquote>
<p>有关Node.js的单元测试小结，你可以参考<a href="http://segmentfault.com/a/1190000002921481" target="_blank" rel="external">这个链接</a>。</p>
<p>解析：用于测试被面试者是否有测试的经验。如果被面试者知道什么是Stub， 那么可以继续问他是如何做单元测试的。</p>
<h3 id="什么是测试金字塔？"><a href="#什么是测试金字塔？" class="headerlink" title="什么是测试金字塔？"></a>什么是测试金字塔？</h3><p><a href="http://zyzhang.github.io/blog/2013/04/28/test-pyramid/" target="_blank" rel="external">测试金字塔</a>指的是： 当我们在编写测试用例时，底层的单元测试应该远比上层的端到端测试要多。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/201324-cb217905fd784d41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>当我们谈到HTTP API时，我们可能会涉及到：</p>
<ul>
<li>有很多针对模型的底层单元测试</li>
<li>但你需要测试模型间如何交互时，需要减少集成测试</li>
</ul>
<p>解析：本文主要考察被面试者的在测试方面的经验。</p>
<h3 id="你最喜欢的HTTP框架以及原因"><a href="#你最喜欢的HTTP框架以及原因" class="headerlink" title="你最喜欢的HTTP框架以及原因"></a>你最喜欢的HTTP框架以及原因</h3><p>这题没有唯一的答案。本题主要考察被面试者对于他所使用的Node框架的理解程度， 考察他是否能够给出选择该框架的理由，优缺点等。常用的HTTP框架你可以参考<a href="http://nodeframework.com/index.html" target="_blank" rel="external">这个网站</a>。</p>
<p><strong>Statement</strong></p>
<blockquote>
<p>原文地址：<a href="https://blog.risingstack.com/node-js-interview-questions" target="_blank" rel="external">https://blog.risingstack.com/node-js-interview-questions</a></p>
</blockquote>
<p><strong>References</strong></p>
<ul>
<li>[<a href="http://zyzhang.github.io/blog/2013/04/28/test-pyramid/]-" target="_blank" rel="external">http://zyzhang.github.io/blog/2013/04/28/test-pyramid/]-</a> (<a href="http://zyzhang.github.io/blog/2013/04/28/test-pyramid/" target="_blank" rel="external">http://zyzhang.github.io/blog/2013/04/28/test-pyramid/</a>)</li>
<li><a href="http://www.admin10000.com/document/5276.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></li>
<li><a href="http://segmentfault.com/a/1190000002921481" target="_blank" rel="external">http://segmentfault.com/a/1190000002921481</a></li>
</ul>
<p><em><a href="http://www.admin10000.com/" target="_blank" rel="external">摘自</a></em></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
